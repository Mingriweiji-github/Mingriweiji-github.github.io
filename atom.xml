<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KM的技术笔记</title>
  
  <subtitle>探索大前端技术 iOS/Flutter/Vue</subtitle>
  <link href="https://mingriweiji-github.github.io/atom.xml" rel="self"/>
  
  <link href="https://mingriweiji-github.github.io/"/>
  <updated>2022-05-13T10:14:17.148Z</updated>
  <id>https://mingriweiji-github.github.io/</id>
  
  <author>
    <name>KM</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter正式发布3.0</title>
    <link href="https://mingriweiji-github.github.io/2022/05/12/Flutter%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%833.0/"/>
    <id>https://mingriweiji-github.github.io/2022/05/12/Flutter%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%833.0/</id>
    <published>2022-05-11T23:12:45.000Z</published>
    <updated>2022-05-13T10:14:17.148Z</updated>
    
    
    <summary type="html">Flutter3.0 发布 2022/05/12


Google IO 发布会
一起看 I/O | Flutter 3 正式发布！ | Youtube - What’s new in Flutter 3.0

 * 稳定版本支持：macOS和 Linux
   
   
 * 稳定支持苹果ARM 处理器
   
   
 * 可折叠设备支持
   
   
 * Dart语法增强 eum枚举
   
   
   
 * 命名参数 anywhere
   
   
   
 * super 构造方法简化</summary>
    
    
    
    <category term="Flutter" scheme="https://mingriweiji-github.github.io/categories/Flutter/"/>
    
    
    <category term="Flutter" scheme="https://mingriweiji-github.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>谷歌的软件工程</title>
    <link href="https://mingriweiji-github.github.io/2022/03/10/%E8%B0%B7%E6%AD%8C%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    <id>https://mingriweiji-github.github.io/2022/03/10/%E8%B0%B7%E6%AD%8C%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</id>
    <published>2022-03-10T02:15:23.000Z</published>
    <updated>2022-05-14T02:39:42.880Z</updated>
    
    
    <summary type="html">谷歌的软件工程
目录
1、简介

2、软件开发

 * 源代码库
 * 系统构建
 * 代码 review
 * 测试
 * Bug追踪
 * 编程语言
 * 调试与分析工具
 * 发布工程
 * 项目启动批准
 * 事故复盘
 * 软件反复重写

3、项目管理

 * 20%时间自由分配
 * OKR 机制
 * 项目批准
 * 项目重组
 * 年度黑客马拉松

4、人员管理

 * 角色分工
 * 办公区域设施
 * 培训
 * 部门间转移
 * 绩效考核和奖励

1 简介
谷歌是一家非常成功的公司。除了 Google 搜索和 AdWords 的成功之外，Google 还提供了许多其他出色</summary>
    
    
    
    <category term="book" scheme="https://mingriweiji-github.github.io/categories/book/"/>
    
    
    <category term="book" scheme="https://mingriweiji-github.github.io/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 核心原理</title>
    <link href="https://mingriweiji-github.github.io/2021/10/15/Flutter%20%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    <id>https://mingriweiji-github.github.io/2021/10/15/Flutter%20%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/</id>
    <published>2021-10-15T02:15:10.000Z</published>
    <updated>2022-05-13T12:27:20.051Z</updated>
    
    
    <summary type="html">Flutter
 * 1.开发效率高- 快发阶段 JIT 即时编译，支持 HotReload，节省开发时间.发布节点 AOT提前编译生成高效机器码保证应用性能
 * 2.高性能-基于 Skia 引擎提供高保证的 UI 体验
 * 3.快速内存分配-Flutter 框架使用函数式流，这使得它在很大程度上依赖于底层的内存分配器。
 * 4.类型安全和空安全-2.12 后开始支持空安全和静态类型检测，在编译前提前发现错误，并排除潜在的问题。

Flutter 技术栈


Flutter的三棵树


Flutter 核心原理
JIT 即时编译与 AOT 提前编译
Flutter 是一个跨平台的 UI </summary>
    
    
    
    <category term="Flutter" scheme="https://mingriweiji-github.github.io/categories/Flutter/"/>
    
    
    <category term="Flutter" scheme="https://mingriweiji-github.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 实战记录</title>
    <link href="https://mingriweiji-github.github.io/2021/09/20/Flutter%20%E5%AE%9E%E6%88%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://mingriweiji-github.github.io/2021/09/20/Flutter%20%E5%AE%9E%E6%88%98%E8%AE%B0%E5%BD%95/</id>
    <published>2021-09-20T02:35:45.000Z</published>
    <updated>2022-05-13T12:11:31.132Z</updated>
    
    
    <summary type="html">The ‘Pods-wii’ target has frameworks with conflicting names: iflymsc.framework
原因是：iflymsc.framework接入 native 中和之前 flutter 中的iflymsc.framework冲突了

解决方式：flutter 缓存删除即可（从主工程的 development pods 的xxx_msc_plugin中删除）



TabController addListener两次回调
问题：这个监听在点击切换tab的时候会回调两次，左右滑动切换tab正常调用一次。

TabController a</summary>
    
    
    
    <category term="Flutter" scheme="https://mingriweiji-github.github.io/categories/Flutter/"/>
    
    
    <category term="Flutter" scheme="https://mingriweiji-github.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 资源</title>
    <link href="https://mingriweiji-github.github.io/2021/06/15/Flutter%20%E8%B5%84%E6%BA%90/"/>
    <id>https://mingriweiji-github.github.io/2021/06/15/Flutter%20%E8%B5%84%E6%BA%90/</id>
    <published>2021-06-15T02:35:45.000Z</published>
    <updated>2022-05-13T09:59:16.936Z</updated>
    
    
    <summary type="html">Flutter 官方
 Flutter 官方网站（中文） | Flutter 官方网站（英文）

 * 全网最全 Flutter 与 React Native 深入对比分析 
   
   
 * 字节跳动为什么选用Flutter：并非跨平台终极之选，但它可能是不一样的未来:
   
   

Flutter 原理和优化
 * Flutter 组件的事件传递与数据控制 | 开发者说·DTalk
   
   
 * Flutter如何合理的进行传递数据和事件
   
   
 * 从渲染原理出发探究 Flutter 内存泄漏
   
   
 * Flutter系列之图片加载详解 - 掘金
 </summary>
    
    
    
    <category term="Flutter" scheme="https://mingriweiji-github.github.io/categories/Flutter/"/>
    
    
    <category term="Flutter" scheme="https://mingriweiji-github.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter Widget</title>
    <link href="https://mingriweiji-github.github.io/2021/03/15/Flutter%20Widget/"/>
    <id>https://mingriweiji-github.github.io/2021/03/15/Flutter%20Widget/</id>
    <published>2021-03-15T04:25:45.000Z</published>
    <updated>2022-05-13T12:12:12.664Z</updated>
    
    
    <summary type="html">Flutter常见Widget
Expanded()按照比例分配
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38


// expand
import &#39;package:flutter/material.dart&#39;;

class ExpandedLearn extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return n</summary>
    
    
    
    <category term="Flutter" scheme="https://mingriweiji-github.github.io/categories/Flutter/"/>
    
    
    <category term="Flutter" scheme="https://mingriweiji-github.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter Dar基础</title>
    <link href="https://mingriweiji-github.github.io/2021/01/15/Flutter%20Dart%E5%9F%BA%E7%A1%80/"/>
    <id>https://mingriweiji-github.github.io/2021/01/15/Flutter%20Dart%E5%9F%BA%E7%A1%80/</id>
    <published>2021-01-14T23:15:45.000Z</published>
    <updated>2022-05-13T09:59:20.854Z</updated>
    
    
    <summary type="html">Dart基本语法
Dart的设计目标应该是同时借鉴了Java和JavaScript。

Dart在静态语法方面和Java非常相似，如类型定义、函数声明、泛型等，

而在动态特性方面又和JavaScript很像，如函数式特性、异步支持等。

除了融合Java和JavaScript语言之所长之外，Dart也具有一些其它具有表现力的语法，如可选命名参数、..（级联运算符）和?.（条件成员访问运算符）以及??（判空赋值运算符）。

其实，对编程语言了解比较多的读者会发现，在Dart中其实看到的不仅有Java和JavaScript的影子，它还具有其它编程语言中的身影，如命名参数在Objective-C和</summary>
    
    
    
    <category term="Flutter" scheme="https://mingriweiji-github.github.io/categories/Flutter/"/>
    
    
    <category term="Flutter" scheme="https://mingriweiji-github.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>URLProtocol源码</title>
    <link href="https://mingriweiji-github.github.io/2020/06/30/URLProtocol%E6%BA%90%E7%A0%81/"/>
    <id>https://mingriweiji-github.github.io/2020/06/30/URLProtocol%E6%BA%90%E7%A0%81/</id>
    <published>2020-06-30T15:13:45.000Z</published>
    <updated>2022-05-13T10:39:40.883Z</updated>
    
    
    <summary type="html">URLProtocol源码简析
swift标准库URLProtocol地址

一 、 URLProtocol初始化
1.1通过URLRequest初始化protocol
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27


open class URLProtocol : NSObject {

    private static var _registeredProtocolClasses = [AnyClass]()
    private static var _classesLock = N</summary>
    
    
    
    <category term="源码" scheme="https://mingriweiji-github.github.io/categories/%E6%BA%90%E7%A0%81/"/>
    
    
    <category term="Swift专题" scheme="https://mingriweiji-github.github.io/tags/Swift%E4%B8%93%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Alamfire源码</title>
    <link href="https://mingriweiji-github.github.io/2020/06/30/Alamfire%E6%BA%90%E7%A0%81/"/>
    <id>https://mingriweiji-github.github.io/2020/06/30/Alamfire%E6%BA%90%E7%A0%81/</id>
    <published>2020-06-30T02:13:45.000Z</published>
    <updated>2022-05-13T10:40:20.660Z</updated>
    
    
    <summary type="html">Alamfire Github地址
1、Request分析
Request准守的Protocol
 * Equatable
   
   
 * Hashable
   
   
 * CustomStringConvertible
   
   
 * Downloadable
   
   
 * UploadableConvertible
   
   

Equatable
1
2
3
4
5


extension Request: Equatable {
    public static func ==(lhs: Request, rhs: Request) -&gt; Bool {
</summary>
    
    
    
    <category term="源码" scheme="https://mingriweiji-github.github.io/categories/%E6%BA%90%E7%A0%81/"/>
    
    
    <category term="Swift专题" scheme="https://mingriweiji-github.github.io/tags/Swift%E4%B8%93%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Kingfisher源码</title>
    <link href="https://mingriweiji-github.github.io/2020/06/30/Kingfisher%E6%BA%90%E7%A0%81/"/>
    <id>https://mingriweiji-github.github.io/2020/06/30/Kingfisher%E6%BA%90%E7%A0%81/</id>
    <published>2020-06-30T01:13:45.000Z</published>
    <updated>2022-05-13T10:40:07.467Z</updated>
    
    
    <summary type="html">Kingfisher源码
Kingfisher3架构
kf命名空间
 * 类 Kingfisher 是一个范型类，类型是 Base 
 * 协议 KingfisherCompatible，声明属性 kf，类型是范型 CompatibleType 。并要求遵守协议的一方，实现该属性的 get 方法。
 * 协议扩展中，协议自身实现了属性。这样就不必在每个遵守该协议的类里实现该属性了。
 * 协议里的 kf 是一个 Kingfisher 类的实例，调用的方法是 Kingfisher 类的方法。
 * 根据类型的不同，调用不同类型里的方法。如：对应 Image/ImageView / Button </summary>
    
    
    
    <category term="源码" scheme="https://mingriweiji-github.github.io/categories/%E6%BA%90%E7%A0%81/"/>
    
    
    <category term="Swift专题" scheme="https://mingriweiji-github.github.io/tags/Swift%E4%B8%93%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Swift内存布局初探</title>
    <link href="https://mingriweiji-github.github.io/2020/06/25/Swift%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E5%88%9D%E6%8E%A2/"/>
    <id>https://mingriweiji-github.github.io/2020/06/25/Swift%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E5%88%9D%E6%8E%A2/</id>
    <published>2020-06-25T03:13:45.000Z</published>
    <updated>2022-05-13T10:41:11.162Z</updated>
    
    
    <summary type="html">Swift内存布局初探
enum
问题实际分配内存为何是25？

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20


///带有关联值的枚举
enum TestEnum {
    case t1(Int, Int, Int)
    case t2(Int, Int)
    case t3(Int)
    case t4(Bool)
}
print(MemoryLayout&lt;TestEnum&gt;.alignment)//Int类型内存对齐：8
print(MemoryLayout&lt;TestEnum&gt;.size)//实际大小:24 + 1</summary>
    
    
    
    <category term="Swift" scheme="https://mingriweiji-github.github.io/categories/Swift/"/>
    
    
    <category term="Swift专题" scheme="https://mingriweiji-github.github.io/tags/Swift%E4%B8%93%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Swift字符串</title>
    <link href="https://mingriweiji-github.github.io/2020/06/20/Swift%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://mingriweiji-github.github.io/2020/06/20/Swift%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2020-06-20T02:13:45.000Z</published>
    <updated>2022-05-13T06:49:08.301Z</updated>
    
    
    <summary type="html">Swift5 字符串String
Swift version 5.2

Xcode11

1


let str = &quot;WhelloKitty&quot;


字符串截取前n个字符
1
2
3
4
5


let subStr1 = String(str.dropFirst())
print(subStr1) // helloKitty
let subStr2 = String(str.dropFirst(6))
print(subStr2) // Kitty



字符串截取?前的一部分
1
2
3
4
5
6
7


if let index = path.firstIndex(of: &quot;?&quot;) {</summary>
    
    
    
    <category term="Swift" scheme="https://mingriweiji-github.github.io/categories/Swift/"/>
    
    
    <category term="Swift专题" scheme="https://mingriweiji-github.github.io/tags/Swift%E4%B8%93%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Swift标准库源码</title>
    <link href="https://mingriweiji-github.github.io/2020/04/18/Swift%E6%A0%87%E5%87%86%E5%BA%93%E6%BA%90%E7%A0%81/"/>
    <id>https://mingriweiji-github.github.io/2020/04/18/Swift%E6%A0%87%E5%87%86%E5%BA%93%E6%BA%90%E7%A0%81/</id>
    <published>2020-04-18T02:13:45.000Z</published>
    <updated>2022-05-13T10:40:57.642Z</updated>
    
    
    <summary type="html">Swift标准库源码
 * Swift.org
 * Github开源地址  * 1、下载后的路径使用BBEdit查看所有标准库：stdlib/public/core/
    * 2、网页查看：https://github.com/apple/swift/tree/master/stdlib/public/core
   
   

如何阅读 Swift 标准库中的源码 | Swift源码地址
00关键词
 * Array解读 | FFIB-LeetCode | ContiguousArray | ContiguousArray喵神解读
   
   
 * Sequence解读 | Col</summary>
    
    
    
    <category term="Swift" scheme="https://mingriweiji-github.github.io/categories/Swift/"/>
    
    
    <category term="Swift专题" scheme="https://mingriweiji-github.github.io/tags/Swift%E4%B8%93%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Swift集合源码</title>
    <link href="https://mingriweiji-github.github.io/2020/04/18/Swift%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81/"/>
    <id>https://mingriweiji-github.github.io/2020/04/18/Swift%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81/</id>
    <published>2020-04-18T00:08:23.000Z</published>
    <updated>2022-05-13T10:40:38.953Z</updated>
    
    
    <summary type="html">Swift Collections
使用篇
1、Array
数组基本操作
let someArray = [1,2,3,4,5,6]

let first5 = Array(someArray.prefix(3)) // [1,2,3]

数组Array的两种for循环
只遍历value

1
2
3


for item in array {
  print(item)
}


快速枚举数组，用元祖(index, value)接收

1
2
3


for (index, value) in array.enumerated() {
  print(index, value)
}


arr</summary>
    
    
    
    <category term="Swift" scheme="https://mingriweiji-github.github.io/categories/Swift/"/>
    
    
    <category term="Swift专题" scheme="https://mingriweiji-github.github.io/tags/Swift%E4%B8%93%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Swift函数式编程</title>
    <link href="https://mingriweiji-github.github.io/2020/02/20/Swift%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>https://mingriweiji-github.github.io/2020/02/20/Swift%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</id>
    <published>2020-02-20T02:13:45.000Z</published>
    <updated>2022-05-13T10:39:53.541Z</updated>
    
    
    <summary type="html">Functional Programming in Swift
函数式编程介绍。版本：swift 4.2, iOS 12, Xcode 10

在本部分中，您将介绍FP中的一些关键概念。许多讨论FP的论文都将不变状态和缺乏副作用视为FP的最重要方面，因此您将从这里开始。

不变性和副作用
无论您首先学习哪种编程语言，您可能要学习的最初概念之一就是变量代表数据或状态。如果您退一步考虑一下这个想法，变量似乎很奇怪。

术语“变量”表示随程序运行而变化的数量。从数学角度考虑数量问题，您已将时间作为软件行为的关键参数。通过更改变量，可以创建可变状态。

为了进行演示，请将以下代码添加到playgrou</summary>
    
    
    
    <category term="Swift" scheme="https://mingriweiji-github.github.io/categories/Swift/"/>
    
    
    <category term="Swift专题" scheme="https://mingriweiji-github.github.io/tags/Swift%E4%B8%93%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>LookinLoader安装使用</title>
    <link href="https://mingriweiji-github.github.io/2020/01/20/LookinLoader%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <id>https://mingriweiji-github.github.io/2020/01/20/LookinLoader%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</id>
    <published>2020-01-20T02:13:45.000Z</published>
    <updated>2022-05-10T16:01:43.690Z</updated>
    
    
    <summary type="html">Lookin查看自己的App
 * 1、Lookin下载
   
   
 * 2、pod添加：pod &#39;LookinServer&#39;, :configurations =&gt; [&#39;Debug&#39;]
   
   
 * 3、pod install
   
   
 * 4、打开mac上安装的Lookin
   
   

配合LookinLoader查看第三方App
官方：正常情况下，你无法将 LookinServer 嵌入到别人的 iOS App 里，因此你也就无法使用 Lookin 查看别人的 App。但我们也注意到有些第三方开发者通过某些方式实现了向别人的 App 中注入 Framework</summary>
    
    
    
    
    <category term="iOS" scheme="https://mingriweiji-github.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Dyld源码阅读</title>
    <link href="https://mingriweiji-github.github.io/2020/01/15/Dyld%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>https://mingriweiji-github.github.io/2020/01/15/Dyld%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</id>
    <published>2020-01-15T02:13:45.000Z</published>
    <updated>2022-05-10T16:01:43.640Z</updated>
    
    
    <summary type="html">Dyld源码阅读
 * Version：dyld-551.4
 * Lauange：C++
 * load()调用路径：3566行  * load()-&gt;loadPhase0()-&gt;loadPhase1()-&gt;loadPhase2()-&gt;loadPhase4()-&gt;loadPhase5()打开或检查已经存在的动态库：dyld3::findInSharedCacheImage-&gt;loadPhase5load()-&gt;loadPhase5open()-&gt;loadPhase6()-&gt;加载3种Mach-O文件
   
   

1、动态库路径
iOS越狱手机

 * 在Mac\iOS中，是使用了/usr</summary>
    
    
    
    <category term="源码" scheme="https://mingriweiji-github.github.io/categories/%E6%BA%90%E7%A0%81/"/>
    
    
    <category term="iOS" scheme="https://mingriweiji-github.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS越狱初体验</title>
    <link href="https://mingriweiji-github.github.io/2020/01/15/iOS%E8%B6%8A%E7%8B%B1%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>https://mingriweiji-github.github.io/2020/01/15/iOS%E8%B6%8A%E7%8B%B1%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
    <published>2020-01-15T02:13:45.000Z</published>
    <updated>2022-05-10T16:01:43.810Z</updated>
    
    
    <summary type="html">iOS越狱初体验
iOS越狱能做到什么？
 * 查看 第三方APP UI 排版方式、布局实现技术
 * 获取三方App内部资源 .assets/.plist/icon…
 * 修改APP 功能重新打包 (EX: 去广告)
 * 反编译推测原始工程代码内容
 * dump 出 .h 头文件 / keycahin / db

越狱环境
macOS 版本：10.15 Catalina
iOS 版本：iPhone 5s (iOS 9.0.1/ 完美越狱*必要)
Cydia: Open SSH

逆向工程大致流程：
 1. 解密并导出应用程序、class-dump导出头文件
 2. 从当面界面入手，获取</summary>
    
    
    
    <category term="源码" scheme="https://mingriweiji-github.github.io/categories/%E6%BA%90%E7%A0%81/"/>
    
    
    <category term="iOS" scheme="https://mingriweiji-github.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>算法实战</title>
    <link href="https://mingriweiji-github.github.io/2019/06/22/2020%E7%AE%97%E6%B3%95%E5%AE%9E%E6%88%98100%E9%81%93/"/>
    <id>https://mingriweiji-github.github.io/2019/06/22/2020%E7%AE%97%E6%B3%95%E5%AE%9E%E6%88%98100%E9%81%93/</id>
    <published>2019-06-21T19:18:15.000Z</published>
    <updated>2022-05-10T16:01:43.780Z</updated>
    
    
    <summary type="html">为什么学算法？
为什么要学习算法？
 * 算法是内功，决定你武功的高度
 * 算法能让你更好更快理解一门语言系统的设计理念
 * 算法能让你触类旁通
 * momo算法题：接雨水 反转链表II 旋转矩阵

主要算法
 * 基础技巧：分治、二分、贪心
 * 排序算法：快速排序、归并排序、计数排序
 * 搜索算法：回溯算法、递归、深度优先遍历，BFS广度优先遍历，二叉搜索树等
 * 图论：最短路径、最小生成树
 * 动态规划：背包问题、最长子序列

数据结构
 * 数组与链表：单 / 双向链表
 * 栈与队列
 * 哈希表
 * 堆：最大堆 ／ 最小堆
 * 树与图：最近公共祖先、并查集
 * 字</summary>
    
    
    
    <category term="算法" scheme="https://mingriweiji-github.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://mingriweiji-github.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法基础</title>
    <link href="https://mingriweiji-github.github.io/2019/06/22/2020%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    <id>https://mingriweiji-github.github.io/2019/06/22/2020%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</id>
    <published>2019-06-21T18:18:15.000Z</published>
    <updated>2022-05-10T16:01:43.680Z</updated>
    
    
    <summary type="html">算法基础
为什么要学习算法？
 * 算法是内功，决定你武功的高度
   
   
 * 算法能让你更好更快理解一门语言系统的设计理念
   
   
 * 算法能让你触类旁通
   
   

1 、数组



1
2
3
4
5
6
7
8
9
10
11
12
13
14


func merge(_ nums1: inout [Int], _ m: Int, _ nums2: [Int], _ n: Int) {
     var p1 = m - 1, p2 = n - 1
     var cur = m + n - 1
     while (p2 &gt;= 0) {
        </summary>
    
    
    
    <category term="算法" scheme="https://mingriweiji-github.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://mingriweiji-github.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
