<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>(一)Flutter初体验</title>
      <link href="2020/06/30/(%E4%B8%80)Flutter%E5%B8%83%E5%B1%80/"/>
      <url>2020/06/30/(%E4%B8%80)Flutter%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="Flutter布局"><a href="#Flutter布局" class="headerlink" title="Flutter布局"></a>Flutter布局</h2><h3 id="2020-6-29日更新"><a href="#2020-6-29日更新" class="headerlink" title="2020.6.29日更新"></a>2020.6.29日更新</h3><h3 id="2020-5-29日更新"><a href="#2020-5-29日更新" class="headerlink" title="2020.5.29日更新"></a>2020.5.29日更新</h3><h3 id="实现布局如下"><a href="#实现布局如下" class="headerlink" title="实现布局如下"></a>实现布局如下</h3><p><img src="https://user-gold-cdn.xitu.io/2018/5/27/1639f0b784cb2d62?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="markdown">Line 3</span></span></span><br><span class="line"><span class="keyword">new</span> Container(</span><br><span class="line">  margin: <span class="keyword">const</span> EdgeInsets.fromLTRB(<span class="number">6.0</span>, <span class="number">24.0</span>, <span class="number">6.0</span>, <span class="number">30.0</span>),</span><br><span class="line">  child: <span class="keyword">new</span> RoundInnerSquareBox(</span><br><span class="line">    child: <span class="keyword">new</span> Container(</span><br><span class="line">      padding: <span class="keyword">const</span> EdgeInsets.fromLTRB(<span class="number">24.0</span>, <span class="number">28.0</span>, <span class="number">24.0</span>, <span class="number">12.0</span>),</span><br><span class="line">      width: <span class="built_in">double</span>.infinity,</span><br><span class="line">      child: <span class="keyword">new</span> Column(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.start,</span><br><span class="line">        crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          <span class="keyword">new</span> Text(</span><br><span class="line">            <span class="string">&quot;Unit 1 Lesson 3 About animal&quot;</span>,</span><br><span class="line">            style: <span class="keyword">new</span> TextStyle(</span><br><span class="line">              fontSize: <span class="number">20.0</span>,</span><br><span class="line">              fontFamily: <span class="string">&quot;Round&quot;</span>,</span><br><span class="line">              color: Colors.white,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          <span class="keyword">new</span> Container(</span><br><span class="line">            margin: <span class="keyword">const</span> EdgeInsets.only(top: <span class="number">5.0</span>, bottom: <span class="number">13.0</span>),</span><br><span class="line">            child: <span class="keyword">new</span> Image.asset(</span><br><span class="line">                <span class="string">&quot;assets/images/publish_work_line.png&quot;</span>),</span><br><span class="line">          ),</span><br><span class="line">          <span class="keyword">new</span> Wrap(</span><br><span class="line">            alignment: WrapAlignment.start,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              <span class="keyword">new</span> WorkTotalItem(</span><br><span class="line">                title: <span class="string">&quot;课文跟读 11&quot;</span>,</span><br><span class="line">              ),</span><br><span class="line">              <span class="keyword">new</span> WorkTotalItem(</span><br><span class="line">                title: <span class="string">&quot;课文跟读 22&quot;</span>,</span><br><span class="line">              ),</span><br><span class="line">              <span class="keyword">new</span> WorkTotalItem(</span><br><span class="line">                title: <span class="string">&quot;课文跟读 33&quot;</span>,</span><br><span class="line">              ),</span><br><span class="line">              <span class="keyword">new</span> WorkTotalItem(</span><br><span class="line">                title: <span class="string">&quot;课文跟读 44&quot;</span>,</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">          <span class="keyword">new</span> Container(</span><br><span class="line">            margin: <span class="keyword">const</span> EdgeInsets.only(left: <span class="number">178.0</span>),</span><br><span class="line">            child: <span class="keyword">new</span> Stack(</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                <span class="keyword">new</span> Image.asset(</span><br><span class="line">                    <span class="string">&quot;assets/images/publish_work_sign.png&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> Positioned(</span><br><span class="line">                  left: <span class="number">4.0</span>,</span><br><span class="line">                  top: <span class="number">4.0</span>,</span><br><span class="line">                  child: <span class="keyword">new</span> Text(</span><br><span class="line">                    <span class="string">&quot;预习&quot;</span>,</span><br><span class="line">                    style: <span class="keyword">new</span> TextStyle(</span><br><span class="line">                        fontSize: <span class="number">14.0</span>, color: Colors.white),</span><br><span class="line">                  ),</span><br><span class="line">                )</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          <span class="keyword">new</span> Container(</span><br><span class="line">            alignment: Alignment.topRight,</span><br><span class="line">            child: <span class="keyword">new</span> Text(</span><br><span class="line">              <span class="string">&quot;明天12:00截止&quot;</span>,</span><br><span class="line">              style: <span class="keyword">new</span> TextStyle(</span><br><span class="line">                  fontSize: <span class="number">12.0</span>, color: <span class="keyword">const</span> Color(<span class="number">0xFFFFC1C1</span>)),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter专题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(八)URLProtocol源码</title>
      <link href="2020/06/30/(%E5%85%AB)URLProtocol%E6%BA%90%E7%A0%81/"/>
      <url>2020/06/30/(%E5%85%AB)URLProtocol%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="URLProtocol源码简析"><a href="#URLProtocol源码简析" class="headerlink" title="URLProtocol源码简析"></a>URLProtocol源码简析</h1><p><a href="https://github.com/apple/swift-corelibs-foundation/blob/master/Sources/FoundationNetworking/URLProtocol.swift">swift标准库URLProtocol地址</a></p><h2 id="一-、-URLProtocol初始化"><a href="#一-、-URLProtocol初始化" class="headerlink" title="一 、 URLProtocol初始化"></a>一 、 URLProtocol初始化</h2><h3 id="1-1通过URLRequest初始化protocol"><a href="#1-1通过URLRequest初始化protocol" class="headerlink" title="1.1通过URLRequest初始化protocol"></a>1.1通过URLRequest初始化protocol</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">URLProtocol</span> : <span class="title">NSObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">var</span> _registeredProtocolClasses = [<span class="type">AnyClass</span>]()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">var</span> _classesLock = <span class="type">NSLock</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">required</span> <span class="keyword">init</span>(request: <span class="type">URLRequest</span>, cachedResponse: <span class="type">CachedURLResponse?</span>, client: <span class="type">URLProtocolClient?</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>._request = request</span><br><span class="line">        <span class="keyword">self</span>._cachedResponse = cachedResponse</span><br><span class="line">        <span class="keyword">self</span>._client = client ?? _ProtocolClient()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> _request : <span class="type">URLRequest</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> _cachedResponse : <span class="type">CachedURLResponse?</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> _client : <span class="type">URLProtocolClient?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> client: <span class="type">URLProtocolClient?</span> &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123; <span class="keyword">self</span>._client = newValue &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="keyword">self</span>._client &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">/*@NSCopying*/</span> <span class="keyword">open</span> <span class="keyword">var</span> request: <span class="type">URLRequest</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _request</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@NSCopying*/</span> <span class="keyword">open</span> <span class="keyword">var</span> cachedResponse: <span class="type">CachedURLResponse?</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _cachedResponse</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2、通过URLSessionTask初始化protocol"><a href="#1-2、通过URLSessionTask初始化protocol" class="headerlink" title="1.2、通过URLSessionTask初始化protocol"></a>1.2、通过URLSessionTask初始化protocol</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">canInit</span>(<span class="title">with</span> <span class="title">task</span>: <span class="title">URLSessionTask</span>) -&gt; <span class="title">Bool</span> </span>&#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> request = task.currentRequest <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</span><br><span class="line">    <span class="keyword">return</span> canInit(with: request)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">required</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(task: <span class="type">URLSessionTask</span>, cachedResponse: <span class="type">CachedURLResponse?</span>, client: <span class="type">URLProtocolClient?</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> urlRequest = task.originalRequest</span><br><span class="line">    <span class="keyword">self</span>.<span class="keyword">init</span>(request: urlRequest!, cachedResponse: cachedResponse, client: client)</span><br><span class="line">    <span class="keyword">self</span>.task = task</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*@NSCopying*/</span> <span class="keyword">open</span> <span class="keyword">var</span> task: <span class="type">URLSessionTask?</span> &#123;</span><br><span class="line">    <span class="keyword">set</span> &#123; <span class="keyword">self</span>._task = newValue &#125;</span><br><span class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="keyword">self</span>._task &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> _task : <span class="type">URLSessionTask?</span> = <span class="literal">nil</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、-自定义URLProtocol"><a href="#二、-自定义URLProtocol" class="headerlink" title="二、 自定义URLProtocol"></a>二、 自定义URLProtocol</h2><h3 id="1、注册protocol"><a href="#1、注册protocol" class="headerlink" title="1、注册protocol"></a>1、注册protocol</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">registerClass</span>(<span class="title">_</span> <span class="title">protocolClass</span>: <span class="title">AnyClass</span>) -&gt; <span class="title">Bool</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> protocolClass <span class="keyword">is</span> <span class="type">URLProtocol</span>.<span class="type">Type</span> &#123;</span><br><span class="line">            _classesLock.lock()</span><br><span class="line">            <span class="keyword">guard</span> !_registeredProtocolClasses.<span class="built_in">contains</span>(<span class="keyword">where</span>: &#123; $<span class="number">0</span> === protocolClass &#125;) <span class="keyword">else</span> &#123;</span><br><span class="line">                _classesLock.unlock()</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            _registeredProtocolClasses.append(protocolClass)</span><br><span class="line">            _classesLock.unlock()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">unregisterClass</span>(<span class="title">_</span> <span class="title">protocolClass</span>: <span class="title">AnyClass</span>) </span>&#123;</span><br><span class="line">        _classesLock.lock()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> idx = _registeredProtocolClasses.firstIndex(<span class="keyword">where</span>: &#123; $<span class="number">0</span> === protocolClass &#125;) &#123;</span><br><span class="line">            _registeredProtocolClasses.remove(at: idx)</span><br><span class="line">        &#125;</span><br><span class="line">        _classesLock.unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、响应URLRequest"><a href="#2、响应URLRequest" class="headerlink" title="2、响应URLRequest"></a>2、响应URLRequest</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*======================================================================</span></span><br><span class="line"><span class="comment">  Begin responsibilities for protocol implementors</span></span><br><span class="line"><span class="comment">  The methods between this set of begin-end markers must be</span></span><br><span class="line"><span class="comment">  implemented in order to create a working protocol.</span></span><br><span class="line"><span class="comment">  ======================================================================*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">canInit</span>(<span class="title">with</span> <span class="title">request</span>: <span class="title">URLRequest</span>) -&gt; <span class="title">Bool</span> </span>&#123;</span><br><span class="line">    <span class="type">NSRequiresConcreteImplementation</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">canonicalRequest</span>(<span class="title">for</span> <span class="title">request</span>: <span class="title">URLRequest</span>) -&gt; <span class="title">URLRequest</span> </span>&#123;</span><br><span class="line">    <span class="type">NSRequiresConcreteImplementation</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">requestIsCacheEquivalent</span>(<span class="title">_</span> <span class="title">a</span>: <span class="title">URLRequest</span>, <span class="title">to</span> <span class="title">b</span>: <span class="title">URLRequest</span>) -&gt; <span class="title">Bool</span> </span>&#123;</span><br><span class="line">    <span class="type">NSRequiresConcreteImplementation</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">startLoading</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="type">NSRequiresConcreteImplementation</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">stopLoading</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="type">NSRequiresConcreteImplementation</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*======================================================================</span></span><br><span class="line"><span class="comment">  End responsibilities for protocol implementors</span></span><br><span class="line"><span class="comment">  ======================================================================*/</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、转发URLRequest"><a href="#3、转发URLRequest" class="headerlink" title="3、转发URLRequest"></a>3、转发URLRequest</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">URLProtocolClient</span> : <span class="title">NSObjectProtocol</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">urlProtocol</span><span class="params">(<span class="number">_</span> <span class="keyword">protocol</span>: URLProtocol, wasRedirectedTo request: URLRequest, redirectResponse: URLResponse)</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">urlProtocol</span><span class="params">(<span class="number">_</span> <span class="keyword">protocol</span>: URLProtocol, cachedResponseIsValid cachedResponse: CachedURLResponse)</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">urlProtocol</span><span class="params">(<span class="number">_</span> <span class="keyword">protocol</span>: URLProtocol, didReceive response: URLResponse, cacheStoragePolicy policy: URLCache.StoragePolicy)</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">urlProtocol</span><span class="params">(<span class="number">_</span> <span class="keyword">protocol</span>: URLProtocol, didLoad data: Data)</span></span></span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">urlProtocolDidFinishLoading</span><span class="params">(<span class="number">_</span> <span class="keyword">protocol</span>: URLProtocol)</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">urlProtocol</span><span class="params">(<span class="number">_</span> <span class="keyword">protocol</span>: URLProtocol, didFailWithError error: Error)</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">urlProtocol</span><span class="params">(<span class="number">_</span> <span class="keyword">protocol</span>: URLProtocol, didReceive challenge: URLAuthenticationChallenge)</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">urlProtocol</span><span class="params">(<span class="number">_</span> <span class="keyword">protocol</span>: URLProtocol, didCancel challenge: URLAuthenticationChallenge)</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">_ProtocolClient</span> : <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cachePolicy: <span class="type">URLCache</span>.<span class="type">StoragePolicy</span> = .notAllowed</span><br><span class="line">    <span class="keyword">var</span> cacheableData: [<span class="type">Data</span>]?</span><br><span class="line">    <span class="keyword">var</span> cacheableResponse: <span class="type">URLResponse?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、NFXProtocol实现URLProtocol"><a href="#三、NFXProtocol实现URLProtocol" class="headerlink" title="三、NFXProtocol实现URLProtocol"></a>三、NFXProtocol实现URLProtocol</h2><ul><li>源码来自<a href="https://github.com/kasketis/netfox/blob/master/netfox/Core/NFXProtocol.swift">https://github.com/kasketis/netfox/blob/master/netfox/Core/NFXProtocol.swift</a></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="meta">@objc</span></span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">NFXProtocol</span>: <span class="title">URLProtocol</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">let</span> nfxInternalKey = <span class="string">&quot;com.netfox.NFXInternal&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> session: <span class="type">URLSession</span> = &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">return</span> <span class="type">URLSession</span>(configuration: .<span class="keyword">default</span>, delegate: <span class="keyword">self</span>, delegateQueue: <span class="literal">nil</span>)</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> model = <span class="type">NFXHTTPModel</span>()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> response: <span class="type">URLResponse?</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> responseData: <span class="type">NSMutableData?</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">canInit</span>(<span class="title">with</span> <span class="title">request</span>: <span class="title">URLRequest</span>) -&gt; <span class="title">Bool</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> canServeRequest(request)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">canInit</span>(<span class="title">with</span> <span class="title">task</span>: <span class="title">URLSessionTask</span>) -&gt; <span class="title">Bool</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> request = task.currentRequest <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> canServeRequest(request)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">canServeRequest</span>(<span class="title">_</span> <span class="title">request</span>: <span class="title">URLRequest</span>) -&gt; <span class="title">Bool</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="type">NFX</span>.sharedInstance().isEnabled() <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">guard</span></span><br><span class="line">            <span class="type">URLProtocol</span>.property(forKey: <span class="type">NFXProtocol</span>.nfxInternalKey, <span class="keyword">in</span>: request) == <span class="literal">nil</span>,</span><br><span class="line">            <span class="keyword">let</span> url = request.url,</span><br><span class="line">            (url.absoluteString.hasPrefix(<span class="string">&quot;http&quot;</span>) || url.absoluteString.hasPrefix(<span class="string">&quot;https&quot;</span>))</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> absoluteString = url.absoluteString</span><br><span class="line">        <span class="keyword">guard</span> !<span class="type">NFX</span>.sharedInstance().getIgnoredURLs().<span class="built_in">contains</span>(<span class="keyword">where</span>: &#123; absoluteString.hasPrefix($<span class="number">0</span>) &#125;) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">startLoading</span><span class="params">()</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        model.saveRequest(request)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> mutableRequest = (request <span class="keyword">as</span> <span class="type">NSURLRequest</span>).mutableCopy() <span class="keyword">as</span>! <span class="type">NSMutableURLRequest</span></span><br><span class="line">        <span class="type">URLProtocol</span>.setProperty(<span class="literal">true</span>, forKey: <span class="type">NFXProtocol</span>.nfxInternalKey, <span class="keyword">in</span>: mutableRequest)</span><br><span class="line">        session.dataTask(with: mutableRequest <span class="keyword">as</span> <span class="type">URLRequest</span>).resume()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">stopLoading</span><span class="params">()</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        session.getTasksWithCompletionHandler &#123; dataTasks, <span class="number">_</span>, <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">            dataTasks.forEach &#123; $<span class="number">0</span>.cancel() &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">canonicalRequest</span>(<span class="title">for</span> <span class="title">request</span>: <span class="title">URLRequest</span>) -&gt; <span class="title">URLRequest</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NFXProtocol</span>: <span class="title">URLSessionDataDelegate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">urlSession</span><span class="params">(<span class="number">_</span> session: URLSession, dataTask: URLSessionDataTask, didReceive data: Data)</span></span> &#123;</span><br><span class="line">        responseData?.append(data)</span><br><span class="line">        </span><br><span class="line">        client?.urlProtocol(<span class="keyword">self</span>, didLoad: data)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">urlSession</span><span class="params">(<span class="number">_</span> session: URLSession, dataTask: URLSessionDataTask, didReceive response: URLResponse, completionHandler: @escaping <span class="params">(URLSession.ResponseDisposition)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.response = response</span><br><span class="line">        <span class="keyword">self</span>.responseData = <span class="type">NSMutableData</span>()</span><br><span class="line">        </span><br><span class="line">        client?.urlProtocol(<span class="keyword">self</span>, didReceive: response, cacheStoragePolicy: <span class="type">NFX</span>.swiftSharedInstance.cacheStoragePolicy)</span><br><span class="line">        completionHandler(.allow)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">urlSession</span><span class="params">(<span class="number">_</span> session: URLSession, task: URLSessionTask, didCompleteWithError error: Error?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> error = error &#123;</span><br><span class="line">                client?.urlProtocol(<span class="keyword">self</span>, didFailWithError: error)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                client?.urlProtocolDidFinishLoading(<span class="keyword">self</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> request = task.originalRequest <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        model.saveRequestBody(request)</span><br><span class="line">        model.logRequest(request)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> error != <span class="literal">nil</span> &#123;</span><br><span class="line">            model.saveErrorResponse()</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> response = response &#123;</span><br><span class="line">            <span class="keyword">let</span> data = (responseData ?? <span class="type">NSMutableData</span>()) <span class="keyword">as</span> <span class="type">Data</span></span><br><span class="line">            model.saveResponse(response, data: data)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">NFXHTTPModelManager</span>.sharedInstance.add(model)</span><br><span class="line">        <span class="type">NotificationCenter</span>.<span class="keyword">default</span>.post(name: .<span class="type">NFXReloadData</span>, object: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">urlSession</span><span class="params">(<span class="number">_</span> session: URLSession, task: URLSessionTask, willPerformHTTPRedirection response: HTTPURLResponse, newRequest request: URLRequest, completionHandler: @escaping <span class="params">(URLRequest?)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> updatedRequest: <span class="type">URLRequest</span></span><br><span class="line">        <span class="keyword">if</span> <span class="type">URLProtocol</span>.property(forKey: <span class="type">NFXProtocol</span>.nfxInternalKey, <span class="keyword">in</span>: request) != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> mutableRequest = (request <span class="keyword">as</span> <span class="type">NSURLRequest</span>).mutableCopy() <span class="keyword">as</span>! <span class="type">NSMutableURLRequest</span></span><br><span class="line">            <span class="type">URLProtocol</span>.removeProperty(forKey: <span class="type">NFXProtocol</span>.nfxInternalKey, <span class="keyword">in</span>: mutableRequest)</span><br><span class="line">            </span><br><span class="line">            updatedRequest = mutableRequest <span class="keyword">as</span> <span class="type">URLRequest</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            updatedRequest = request</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        client?.urlProtocol(<span class="keyword">self</span>, wasRedirectedTo: updatedRequest, redirectResponse: response)</span><br><span class="line">        completionHandler(updatedRequest)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">urlSession</span><span class="params">(<span class="number">_</span> session: URLSession, didReceive challenge: URLAuthenticationChallenge, completionHandler: @escaping <span class="params">(URLSession.AuthChallengeDisposition, URLCredential?)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> wrappedChallenge = <span class="type">URLAuthenticationChallenge</span>(authenticationChallenge: challenge, sender: <span class="type">NFXAuthenticationChallengeSender</span>(handler: completionHandler))</span><br><span class="line">        client?.urlProtocol(<span class="keyword">self</span>, didReceive: wrappedChallenge)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    #<span class="keyword">if</span> !os(<span class="type">OSX</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">urlSessionDidFinishEvents</span><span class="params">(forBackgroundURLSession session: URLSession)</span></span> &#123;</span><br><span class="line">        client?.urlProtocolDidFinishLoading(<span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    #endif</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://juejin.im/post/5ee07f45f265da76ce5795aa">即刻技术团队：iOS中的网络调试</a></li><li><a href="https://blog.fiteen.top/2020/hijacking-webview-request-with-nsprotocol">深入理解URLProtocol</a></li><li><a href="https://www.raywenderlich.com/2509-nsurlprotocol-tutorial#toc-anchor-008">Raywenderlish:NSURLProtocol Tutorial</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift专题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(七)Alamfire源码</title>
      <link href="2020/06/30/(%E4%B8%83)Alamfire%E6%BA%90%E7%A0%81/"/>
      <url>2020/06/30/(%E4%B8%83)Alamfire%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="Alamfire-Github地址"><a href="#Alamfire-Github地址" class="headerlink" title="Alamfire Github地址"></a><a href="https://github.com/Alamofire/Alamofire">Alamfire Github地址</a></h2><h2 id="1、Request分析"><a href="#1、Request分析" class="headerlink" title="1、Request分析"></a>1、Request分析</h2><h4 id="Request准守的Protocol"><a href="#Request准守的Protocol" class="headerlink" title="Request准守的Protocol"></a>Request准守的Protocol</h4><ul><li><p><strong>Equatable</strong></p></li><li><p><strong>Hashable</strong></p></li><li><p><strong>CustomStringConvertible</strong></p></li><li><p><strong>Downloadable</strong></p></li><li><p><strong>UploadableConvertible</strong></p></li></ul><h5 id="Equatable"><a href="#Equatable" class="headerlink" title="Equatable"></a>Equatable</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Request</span>: <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> ==<span class="params">(lhs: Request, rhs: Request)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.id == rhs.id</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Hashable"><a href="#Hashable" class="headerlink" title="Hashable"></a>Hashable</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Request</span>: <span class="title">Hashable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">hash</span><span class="params">(into hasher: <span class="keyword">inout</span> Hasher)</span></span> &#123;</span><br><span class="line">        hasher.combine(id)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="CustomStringConvertible"><a href="#CustomStringConvertible" class="headerlink" title="CustomStringConvertible"></a>CustomStringConvertible</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Request</span>: <span class="title">CustomStringConvertible</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// A textual representation of this instance, including the `HTTPMethod` and `URL` if the `URLRequest` has been</span></span><br><span class="line">    <span class="comment">/// created, as well as the response status code, if a response has been received.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> description: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> request = performedRequests.last ?? lastRequest,</span><br><span class="line">            <span class="keyword">let</span> url = request.url,</span><br><span class="line">            <span class="keyword">let</span> method = request.httpMethod <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="string">&quot;No request created yet.&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> requestDescription = <span class="string">&quot;\(method) \(url.absoluteString)&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response.<span class="built_in">map</span> &#123; <span class="string">&quot;\(requestDescription) (\($0.statusCode))&quot;</span> &#125; ?? requestDescription</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Downloadable"><a href="#Downloadable" class="headerlink" title="Downloadable"></a>Downloadable</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/// Type describing the source used to create the underlying `URLSessionDownloadTask`.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Downloadable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="comment">/// Download should be started from the `URLRequest` produced by the associated `URLRequestConvertible` value.</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">case</span> request(<span class="type">URLRequestConvertible</span>)</span><br><span class="line"></span><br><span class="line">​    <span class="comment">/// Download should be started from the associated resume `Data` value.</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">case</span> resumeData(<span class="type">Data</span>)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h5 id="UploadableConvertible"><a href="#UploadableConvertible" class="headerlink" title="UploadableConvertible"></a>UploadableConvertible</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// A type that can produce an `UploadRequest.Uploadable` value.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">UploadableConvertible</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// Produces an `UploadRequest.Uploadable` value from the instance.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// - Returns: The `UploadRequest.Uploadable`.</span></span><br><span class="line">    <span class="comment">/// - Throws:  Any `Error` produced during creation.</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">createUploadable</span><span class="params">()</span></span> <span class="keyword">throws</span> -&gt; <span class="type">UploadRequest</span>.<span class="type">Uploadable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UploadRequest</span>.<span class="title">Uploadable</span>: <span class="title">UploadableConvertible</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">createUploadable</span><span class="params">()</span></span> <span class="keyword">throws</span> -&gt; <span class="type">UploadRequest</span>.<span class="type">Uploadable</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// A type that can be converted to an upload, whether from an `UploadRequest.Uploadable` or `URLRequestConvertible`.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">UploadConvertible</span>: <span class="title">UploadableConvertible</span> &amp; <span class="title">URLRequestConvertible</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="初始化字段"><a href="#初始化字段" class="headerlink" title="初始化字段"></a>初始化字段</h4><p><code>id</code>: <code>UUID为request提供唯一标识，用于hash、相等</code><br><code>underlyingQueue</code>: DispatchQueue 内部异步操作的串行队列<br><code>serializationQueue</code>: DispatchQueue 序列化使用的队列<br><code>eventMonitor</code>: EventMonitor?   事件监控<br><code>interceptor</code>: RequestInterceptor? 拦截器(重试器、适配器)<br><code>delegate</code>: RequestDelegate?</p><h4 id="Result定义State枚举"><a href="#Result定义State枚举" class="headerlink" title="Result定义State枚举"></a>Result定义State枚举</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> initialized <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">case</span> resumed <span class="comment">//恢复</span></span><br><span class="line">        <span class="keyword">case</span> suspended <span class="comment">//挂起</span></span><br><span class="line">        <span class="keyword">case</span> cancelled <span class="comment">// 取消</span></span><br><span class="line">        <span class="keyword">case</span> finished <span class="comment">//完成</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canTransitionTo</span><span class="params">(<span class="number">_</span> state: State)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (<span class="keyword">self</span>, state) &#123;</span><br><span class="line">            <span class="keyword">case</span> (.initialized, <span class="number">_</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            <span class="keyword">case</span> (<span class="number">_</span>, .initialized), (.cancelled, <span class="number">_</span>), (.finished, <span class="number">_</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            <span class="keyword">case</span> (.resumed, .cancelled), (.suspended, .cancelled), (.resumed, .suspended), (.suspended, .resumed):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            <span class="keyword">case</span> (.suspended, .suspended), (.resumed, .resumed):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            <span class="keyword">case</span> (<span class="number">_</span>, .finished):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// MARK: - Initial State</span></span><br><span class="line">  <span class="comment">// MARK: - Mutable State</span></span><br><span class="line">      <span class="comment">// MARK: Progress</span></span><br><span class="line">      <span class="comment">// MARK: Redirect Handling</span></span><br><span class="line">      <span class="comment">// MARK: Cached Response Handling</span></span><br><span class="line">      <span class="comment">// MARK: URLCredential</span></span><br><span class="line">      <span class="comment">// MARK: Validators</span></span><br><span class="line">      <span class="comment">// MARK: URLRequests</span></span><br><span class="line">      <span class="comment">// MARK: HTTPURLResponse</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// MARK: Tasks</span></span><br><span class="line">      <span class="comment">/// All `URLSessionTask`s created on behalf of the `Request`.</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">var</span> tasks: [<span class="type">URLSessionTask</span>] &#123; <span class="keyword">return</span> protectedMutableState.directValue.tasks &#125;</span><br><span class="line">      <span class="comment">/// First `URLSessionTask` created on behalf of the `Request`.</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">var</span> firstTask: <span class="type">URLSessionTask?</span> &#123; <span class="keyword">return</span> tasks.first &#125;</span><br><span class="line">      <span class="comment">/// Last `URLSessionTask` crated on behalf of the `Request`.</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">var</span> lastTask: <span class="type">URLSessionTask?</span> &#123; <span class="keyword">return</span> tasks.last &#125;</span><br><span class="line">      <span class="comment">/// Current `URLSessionTask` created on behalf of the `Request`.</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">var</span> task: <span class="type">URLSessionTask?</span> &#123; <span class="keyword">return</span> lastTask &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">///MARK: Metrics</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">///MARK: Retry Count</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">var</span> retryCount: <span class="type">Int</span> &#123; <span class="keyword">return</span> protectedMutableState.directValue.retryCount &#125;</span><br><span class="line">      <span class="comment">///MARK: Error</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">fileprivate</span>(<span class="keyword">set</span>) <span class="keyword">var</span> error: <span class="type">AFError?</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> protectedMutableState.directValue.error &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; protectedMutableState.write &#123; $<span class="number">0</span>.error = newValue &#125; &#125;</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">     <span class="comment">// MARK: - Internal Event API</span></span><br><span class="line">     <span class="comment">// All API must be called from underlyingQueue.(所有的API必须从底层队列调用)      </span></span><br><span class="line">      </span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Task相关-cancle-resume-suspend"><a href="#Task相关-cancle-resume-suspend" class="headerlink" title="Task相关: cancle/resume/suspend"></a>Task相关: cancle/resume/suspend</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK: Task Creation</span></span><br><span class="line"><span class="comment">/// - Returns:   The `URLSessionTask` created.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">task</span><span class="params">(<span class="keyword">for</span> request: URLRequest, using session: URLSession)</span></span> -&gt; <span class="type">URLSessionTask</span> &#123;</span><br><span class="line">    <span class="built_in">fatalError</span>(<span class="string">&quot;Subclasses must override.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// MARK: State</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@discardableResult</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">cancel</span><span class="params">()</span></span> -&gt; <span class="type">Self</span> &#123;</span><br><span class="line">        protectedMutableState.write &#123; mutableState <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">guard</span> mutableState.state.canTransitionTo(.cancelled) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line">            mutableState.state = .cancelled</span><br><span class="line"></span><br><span class="line">            underlyingQueue.async &#123; <span class="keyword">self</span>.didCancel() &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> task = mutableState.tasks.last, task.state != .completed <span class="keyword">else</span> &#123;</span><br><span class="line">                underlyingQueue.async &#123; <span class="keyword">self</span>.finish() &#125;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Resume to ensure metrics are gathered.</span></span><br><span class="line">            task.resume()</span><br><span class="line">            task.cancel()</span><br><span class="line">            underlyingQueue.async &#123; <span class="keyword">self</span>.didCancelTask(task) &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Suspends the instance.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// - Returns: The instance.</span></span><br><span class="line">    <span class="meta">@discardableResult</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">suspend</span><span class="params">()</span></span> -&gt; <span class="type">Self</span> &#123;</span><br><span class="line">        protectedMutableState.write &#123; mutableState <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">guard</span> mutableState.state.canTransitionTo(.suspended) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line">            mutableState.state = .suspended</span><br><span class="line"></span><br><span class="line">            underlyingQueue.async &#123; <span class="keyword">self</span>.didSuspend() &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> task = mutableState.tasks.last, task.state != .completed <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line">            task.suspend()</span><br><span class="line">            underlyingQueue.async &#123; <span class="keyword">self</span>.didSuspendTask(task) &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Resumes the instance.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// - Returns: The instance.</span></span><br><span class="line">    <span class="meta">@discardableResult</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">resume</span><span class="params">()</span></span> -&gt; <span class="type">Self</span> &#123;</span><br><span class="line">        protectedMutableState.write &#123; mutableState <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">guard</span> mutableState.state.canTransitionTo(.resumed) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line">            mutableState.state = .resumed</span><br><span class="line"></span><br><span class="line">            underlyingQueue.async &#123; <span class="keyword">self</span>.didResume() &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> task = mutableState.tasks.last, task.state != .completed <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line">            task.resume()</span><br><span class="line">            underlyingQueue.async &#123; <span class="keyword">self</span>.didResumeTask(task) &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="State"><a href="#State" class="headerlink" title="State"></a>State</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Protected `MutableState` value that provides thread-safe access to state values.</span></span><br><span class="line">   <span class="keyword">fileprivate</span> <span class="keyword">let</span> protectedMutableState: <span class="type">Protector</span>&lt;<span class="type">MutableState</span>&gt; = <span class="type">Protector</span>(<span class="type">MutableState</span>())</span><br><span class="line"></span><br><span class="line">   <span class="comment">/// `State` of the `Request`.</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">var</span> state: <span class="type">State</span> &#123; <span class="keyword">return</span> protectedMutableState.directValue.state &#125;</span><br><span class="line">   <span class="comment">/// Returns whether `state` is `.initialized`.</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">var</span> isInitialized: <span class="type">Bool</span> &#123; <span class="keyword">return</span> state == .initialized &#125;</span><br><span class="line">   <span class="comment">/// Returns whether `state is `.resumed`.</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">var</span> isResumed: <span class="type">Bool</span> &#123; <span class="keyword">return</span> state == .resumed &#125;</span><br><span class="line">   <span class="comment">/// Returns whether `state` is `.suspended`.</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">var</span> isSuspended: <span class="type">Bool</span> &#123; <span class="keyword">return</span> state == .suspended &#125;</span><br><span class="line">   <span class="comment">/// Returns whether `state` is `.cancelled`.</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">var</span> isCancelled: <span class="type">Bool</span> &#123; <span class="keyword">return</span> state == .cancelled &#125;</span><br><span class="line">   <span class="comment">/// Returns whether `state` is `.finished`.</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">var</span> isFinished: <span class="type">Bool</span> &#123; <span class="keyword">return</span> state == .finished &#125;</span><br></pre></td></tr></table></figure><h4 id="可变状态MutableState"><a href="#可变状态MutableState" class="headerlink" title="可变状态MutableState"></a>可变状态MutableState</h4><p>通过结构体MutableState封装，包括进度、重定向、缓存、cURL、响应序列化、凭证、请求、task、metrics、重试次数、错误。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Protected `MutableState` value that provides thread-safe access to state values.</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">let</span> protectedMutableState: <span class="type">Protector</span>&lt;<span class="type">MutableState</span>&gt; = <span class="type">Protector</span>(<span class="type">MutableState</span>())</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MutableState</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// State of the `Request`.</span></span><br><span class="line">    <span class="keyword">var</span> state: <span class="type">State</span> = .initialized</span><br><span class="line">    <span class="comment">/// `ProgressHandler` and `DispatchQueue` provided for upload progress callbacks.</span></span><br><span class="line">    <span class="keyword">var</span> uploadProgressHandler: (handler: <span class="type">ProgressHandler</span>, queue: <span class="type">DispatchQueue</span>)?</span><br><span class="line">    <span class="comment">/// `ProgressHandler` and `DispatchQueue` provided for download progress callbacks.</span></span><br><span class="line">    <span class="keyword">var</span> downloadProgressHandler: (handler: <span class="type">ProgressHandler</span>, queue: <span class="type">DispatchQueue</span>)?</span><br><span class="line">    <span class="comment">/// `RedirectHandler` provided for to handle request redirection.</span></span><br><span class="line">    <span class="keyword">var</span> redirectHandler: <span class="type">RedirectHandler?</span></span><br><span class="line">    <span class="comment">/// `CachedResponseHandler` provided to handle response caching.</span></span><br><span class="line">    <span class="keyword">var</span> cachedResponseHandler: <span class="type">CachedResponseHandler?</span></span><br><span class="line">    <span class="comment">/// Closure called when the `Request` is able to create a cURL description of itself.</span></span><br><span class="line">    <span class="keyword">var</span> cURLHandler: ((<span class="type">String</span>) -&gt; <span class="type">Void</span>)?</span><br><span class="line">    <span class="comment">/// Response serialization closures that handle response parsing.</span></span><br><span class="line">    <span class="keyword">var</span> responseSerializers: [() -&gt; <span class="type">Void</span>] = []</span><br><span class="line">    <span class="comment">/// Response serialization completion closures executed once all response serializers are complete.</span></span><br><span class="line">    <span class="keyword">var</span> responseSerializerCompletions: [() -&gt; <span class="type">Void</span>] = []</span><br><span class="line">    <span class="comment">/// Whether response serializer processing is finished.</span></span><br><span class="line">    <span class="keyword">var</span> responseSerializerProcessingFinished = <span class="literal">false</span></span><br><span class="line">    <span class="comment">/// `URLCredential` used for authentication challenges.</span></span><br><span class="line">    <span class="keyword">var</span> credential: <span class="type">URLCredential?</span></span><br><span class="line">    <span class="comment">/// All `URLRequest`s created by Alamofire on behalf of the `Request`.</span></span><br><span class="line">    <span class="keyword">var</span> requests: [<span class="type">URLRequest</span>] = []</span><br><span class="line">    <span class="comment">/// All `URLSessionTask`s created by Alamofire on behalf of the `Request`.</span></span><br><span class="line">    <span class="keyword">var</span> tasks: [<span class="type">URLSessionTask</span>] = []</span><br><span class="line">    <span class="comment">/// All `URLSessionTaskMetrics` values gathered by Alamofire on behalf of the `Request`. Should correspond</span></span><br><span class="line">    <span class="comment">/// exactly the the `tasks` created.</span></span><br><span class="line">    <span class="keyword">var</span> metrics: [<span class="type">URLSessionTaskMetrics</span>] = []</span><br><span class="line">    <span class="comment">/// Number of times any retriers provided retried the `Request`.</span></span><br><span class="line">    <span class="keyword">var</span> retryCount = <span class="number">0</span></span><br><span class="line">    <span class="comment">/// Final `AFError` for the `Request`, whether from various internal Alamofire calls or as a result of a `task`.</span></span><br><span class="line">    <span class="keyword">var</span> error: <span class="type">AFError?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Redirects"><a href="#Redirects" class="headerlink" title="Redirects"></a>Redirects</h5><ul><li>如果多次设置重定向hander是逻辑错误的而且会引起crash</li><li>如果设置了redirect handler,当redirect response 响应的话，会使用到实例Request</li></ul><h5 id="Cached-Responses"><a href="#Cached-Responses" class="headerlink" title="Cached Responses"></a><strong>Cached Responses</strong></h5><ul><li><p>Sets the cached response handler for the <code>Request</code> which will be used when attempting to cache a response.</p></li><li><p>Note: Attempting to set the cache handler more than once is a logic error and will crash.</p></li></ul><h4 id="Clearup"><a href="#Clearup" class="headerlink" title="Clearup"></a>Clearup</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Final cleanup step executed when the instance finishes response serialization.</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">cleanup</span><span class="params">()</span></span> &#123;</span><br><span class="line">        delegate?.cleanup(after: <span class="keyword">self</span>)</span><br><span class="line">        <span class="comment">// No-op: override in subclass</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="DataRequest"><a href="#DataRequest" class="headerlink" title="DataRequest"></a>DataRequest</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// DataRequest是Request子类，使用URLSessionDataTask处理内存中下载的Data</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataRequest</span>: <span class="title">Request</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DownloadRequest"><a href="#DownloadRequest" class="headerlink" title="DownloadRequest"></a><strong>DownloadRequest</strong></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// `Request` subclass which downloads `Data` to a file on disk using `URLSessionDownloadTask`.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// DownloadRequest也是Request子类，使用URLSessionDownloadTask处理下载到硬盘中的Data。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">DownloadRequest</span>也是<span class="title">Request</span>子类，使用: <span class="title">Request</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="UploadRequest"><a href="#UploadRequest" class="headerlink" title="UploadRequest"></a><strong>UploadRequest</strong></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// `DataRequest` subclass which handles `Data` upload from memory, file, or stream using `URLSessionUploadTask`.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadRequest</span>: <span class="title">DataRequest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Type describing the origin of the upload, whether `Data`, file, or stream.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Uploadable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="comment">/// Upload from the provided `Data` value.</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">case</span> data(<span class="type">Data</span>)</span><br><span class="line"></span><br><span class="line">​    <span class="comment">/// Upload from the provided file `URL`, as well as a `Bool` determining whether the source file should be</span></span><br><span class="line"></span><br><span class="line">​    <span class="comment">/// automatically removed once uploaded.</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">case</span> file(<span class="type">URL</span>, shouldRemove: <span class="type">Bool</span>)</span><br><span class="line"></span><br><span class="line">​    <span class="comment">/// Upload from the provided `InputStream`.</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">case</span> stream(<span class="type">InputStream</span>)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// MARK: **Initial State**</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// The `UploadableConvertible` value used to produce the `Uploadable` value for this instance.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">let</span> upload: <span class="type">UploadableConvertible</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// `FileManager` used to perform cleanup tasks, including the removal of multipart form encoded payloads written</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// to disk.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">let</span> fileManager: <span class="type">FileManager</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// MARK: **Mutable State**</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// `Uploadable` value used by the instance.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> uploadable: <span class="type">Uploadable?</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Creates an `UploadRequest` using the provided parameters.</span></span><br><span class="line">  ......</span><br></pre></td></tr></table></figure><h2 id="2、Session"><a href="#2、Session" class="headerlink" title="2、Session"></a>2、Session</h2><h2 id="3、Result枚举"><a href="#3、Result枚举" class="headerlink" title="3、Result枚举"></a>3、Result枚举</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Result.swift</span></span><br><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Result</span>&lt;<span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> success(<span class="type">Value</span>)</span><br><span class="line">    <span class="keyword">case</span> failure(<span class="type">Error</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Returns `true` if the result is a success, `false` otherwise.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> isSuccess: <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .success:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">case</span> .failure:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Returns `true` if the result is a failure, `false` otherwise.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> isFailure: <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !isSuccess</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Returns the associated value if the result is a success, `nil` otherwise.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> value: <span class="type">Value?</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .success(<span class="keyword">let</span> value):</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        <span class="keyword">case</span> .failure:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Returns the associated error value if the result is a failure, `nil` otherwise.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> error: <span class="type">Error?</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .success:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">case</span> .failure(<span class="keyword">let</span> error):</span><br><span class="line">            <span class="keyword">return</span> error</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: - CustomStringConvertible</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Result</span>: <span class="title">CustomStringConvertible</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// The textual representation used when written to an output stream, which includes whether the result was a</span></span><br><span class="line">    <span class="comment">/// success or failure.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> description: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .success:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;SUCCESS&quot;</span></span><br><span class="line">        <span class="keyword">case</span> .failure:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;FAILURE&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: - CustomDebugStringConvertible</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Result</span>: <span class="title">CustomDebugStringConvertible</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// The debug textual representation used when written to an output stream, which includes whether the result was a</span></span><br><span class="line">    <span class="comment">/// success or failure in addition to the value or error.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> debugDescription: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .success(<span class="keyword">let</span> value):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;SUCCESS: \(value)&quot;</span></span><br><span class="line">        <span class="keyword">case</span> .failure(<span class="keyword">let</span> error):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;FAILURE: \(error)&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">AFError</span>: <span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// The underlying reason the parameter encoding error occurred.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// - missingURL:                 The URL request did not have a URL to encode.</span></span><br><span class="line">    <span class="comment">/// - jsonEncodingFailed:         JSON serialization failed with an underlying system error during the</span></span><br><span class="line">    <span class="comment">///                               encoding process.</span></span><br><span class="line">    <span class="comment">/// - propertyListEncodingFailed: Property list serialization failed with an underlying system error during</span></span><br><span class="line">    <span class="comment">///                               encoding process.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ParameterEncodingFailureReason</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> missingURL</span><br><span class="line">        <span class="keyword">case</span> jsonEncodingFailed(error: <span class="type">Error</span>)</span><br><span class="line">        <span class="keyword">case</span> propertyListEncodingFailed(error: <span class="type">Error</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// The underlying reason the multipart encoding error occurred.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">MultipartEncodingFailureReason</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> bodyPartURLInvalid(url: <span class="type">URL</span>)</span><br><span class="line">        <span class="keyword">case</span> bodyPartFilenameInvalid(<span class="keyword">in</span>: <span class="type">URL</span>)</span><br><span class="line">        <span class="keyword">case</span> bodyPartFileNotReachable(at: <span class="type">URL</span>)</span><br><span class="line">        <span class="keyword">case</span> bodyPartFileNotReachableWithError(atURL: <span class="type">URL</span>, error: <span class="type">Error</span>)</span><br><span class="line">        <span class="keyword">case</span> bodyPartFileIsDirectory(at: <span class="type">URL</span>)</span><br><span class="line">        <span class="keyword">case</span> bodyPartFileSizeNotAvailable(at: <span class="type">URL</span>)</span><br><span class="line">        <span class="keyword">case</span> bodyPartFileSizeQueryFailedWithError(forURL: <span class="type">URL</span>, error: <span class="type">Error</span>)</span><br><span class="line">        <span class="keyword">case</span> bodyPartInputStreamCreationFailed(<span class="keyword">for</span>: <span class="type">URL</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> outputStreamCreationFailed(<span class="keyword">for</span>: <span class="type">URL</span>)</span><br><span class="line">        <span class="keyword">case</span> outputStreamFileAlreadyExists(at: <span class="type">URL</span>)</span><br><span class="line">        <span class="keyword">case</span> outputStreamURLInvalid(url: <span class="type">URL</span>)</span><br><span class="line">        <span class="keyword">case</span> outputStreamWriteFailed(error: <span class="type">Error</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> inputStreamReadFailed(error: <span class="type">Error</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ResponseValidationFailureReason</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> dataFileNil</span><br><span class="line">        <span class="keyword">case</span> dataFileReadFailed(at: <span class="type">URL</span>)</span><br><span class="line">        <span class="keyword">case</span> missingContentType(acceptableContentTypes: [<span class="type">String</span>])</span><br><span class="line">        <span class="keyword">case</span> unacceptableContentType(acceptableContentTypes: [<span class="type">String</span>], responseContentType: <span class="type">String</span>)</span><br><span class="line">        <span class="keyword">case</span> unacceptableStatusCode(code: <span class="type">Int</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ResponseSerializationFailureReason</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> inputDataNil</span><br><span class="line">        <span class="keyword">case</span> inputDataNilOrZeroLength</span><br><span class="line">        <span class="keyword">case</span> inputFileNil</span><br><span class="line">        <span class="keyword">case</span> inputFileReadFailed(at: <span class="type">URL</span>)</span><br><span class="line">        <span class="keyword">case</span> stringSerializationFailed(encoding: <span class="type">String</span>.<span class="type">Encoding</span>)</span><br><span class="line">        <span class="keyword">case</span> jsonSerializationFailed(error: <span class="type">Error</span>)</span><br><span class="line">        <span class="keyword">case</span> propertyListSerializationFailed(error: <span class="type">Error</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> invalidURL(url: <span class="type">URLConvertible</span>)</span><br><span class="line">    <span class="keyword">case</span> parameterEncodingFailed(reason: <span class="type">ParameterEncodingFailureReason</span>)</span><br><span class="line">    <span class="keyword">case</span> multipartEncodingFailed(reason: <span class="type">MultipartEncodingFailureReason</span>)</span><br><span class="line">    <span class="keyword">case</span> responseValidationFailed(reason: <span class="type">ResponseValidationFailureReason</span>)</span><br><span class="line">    <span class="keyword">case</span> responseSerializationFailed(reason: <span class="type">ResponseSerializationFailureReason</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="JSONSerialization编解码"><a href="#JSONSerialization编解码" class="headerlink" title="JSONSerialization编解码"></a>JSONSerialization编解码</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSONSerialization</span> : <span class="title">NSObject</span></span></span><br></pre></td></tr></table></figure><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>您可以使用JSONSerialization类将JSON转换为Foundation对象，并将Foundation对象转换为JSON。</p><p>可能转换为JSON的Foundation对象必须具有以下属性：</p><ul><li>顶级对象是[<code>NSArray</code>]（<a href="https://developer.apple.com/documentation/foundation/nsarray%EF%BC%89%E6%88%96[%60NSDictionary%60]%EF%BC%88https://developer.apple.com/documentation/foundation/">https://developer.apple.com/documentation/foundation/nsarray）或[`NSDictionary`]（https://developer.apple.com/documentation/foundation/</a> nsdictionary）。</li><li>所有对象都是<a href="https://developer.apple.com/documentation/foundation/nsstring"><code>NSString</code></a>，<a href="https://developer.apple.com/documentation/foundation/nsnumber"><code>NSNumber</code></a>，<a href="https://developer.apple.com/documentation/foundation/nsarray"><code>NSArray</code></a>，<a href="https://developer.apple.com/documentation/foundation/nsdictionary"><code>NSDictionary</code></a>的实例 </li><li><a href="https://developer.apple.com/documentation/foundation/nsnull"> NSNull对象</a></li><li>所有字典的key都是<a href="https://developer.apple.com/documentation/foundation/nsstring"><code>NSString</code></a>的实例。</li><li>不是NaN或无穷大的数字。</li></ul><p>其他规则可能适用。如调用<a href="https://developer.apple.com/documentation/foundation/jsonserialization/1418461-isvalidjsonobject"><code>isValidJSONObject（_：）</code></a>或尝试进行转换是确定给定对象是否可以转换为JSON的确定方法数据。</p><blockquote><p> 线程安全在iOS 7和更高版本以及macOS 10.9和更高版本上，**<code>JSONSerialization</code>是线程安全的**。</p></blockquote><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="Creating-a-JSON-Object"><a href="#Creating-a-JSON-Object" class="headerlink" title="Creating a JSON Object"></a>Creating a JSON Object</h3><p><a href="https://developer.apple.com/documentation/foundation/jsonserialization/1415493-jsonobject"><code>class func jsonObject(with: Data, options: JSONSerialization.ReadingOptions) -&gt; Any</code></a></p><p>Returns a Foundation object from given JSON data.</p><p><a href="https://developer.apple.com/documentation/foundation/jsonserialization/1418059-jsonobject"><code>class func jsonObject(with: InputStream, options: JSONSerialization.ReadingOptions) -&gt; Any</code></a></p><p>Returns a Foundation object from JSON data in a given stream.</p><h3 id="Creating-JSON-Data"><a href="#Creating-JSON-Data" class="headerlink" title="Creating JSON Data"></a>Creating JSON Data</h3><p><a href="https://developer.apple.com/documentation/foundation/jsonserialization/1413636-data"><code>class func data(withJSONObject: Any, options: JSONSerialization.WritingOptions) -&gt; Data</code></a></p><p>Returns JSON data from a Foundation object.</p><p><a href="https://developer.apple.com/documentation/foundation/jsonserialization/1417433-writejsonobject"><code>class func writeJSONObject(Any, to: OutputStream, options: JSONSerialization.WritingOptions, error: NSErrorPointer) -&gt; Int</code></a></p><p>Writes a given JSON object to a stream.</p><p><a href="https://developer.apple.com/documentation/foundation/jsonserialization/1418461-isvalidjsonobject"><code>class func isValidJSONObject(Any) -&gt; Bool</code></a></p><p>Returns a Boolean value that indicates whether a given object can be converted to JSON data.</p><h3 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h3><h4 id="AFNetwork姊妹篇"><a href="#AFNetwork姊妹篇" class="headerlink" title="AFNetwork姊妹篇"></a><a href="https://xiaozhuanlan.com/topic/7510469283">AFNetwork姊妹篇</a></h4><h4 id="URLSession全家桶"><a href="#URLSession全家桶" class="headerlink" title="URLSession全家桶"></a><a href="https://www.cnblogs.com/ludashi/p/5556088.html">URLSession全家桶</a></h4><h4 id="AlamFire结构解析"><a href="#AlamFire结构解析" class="headerlink" title="AlamFire结构解析"></a><a href="https://www.cnblogs.com/ludashi/p/5588044.html">AlamFire结构解析</a></h4><h4 id="戴铭JSONDecoder"><a href="#戴铭JSONDecoder" class="headerlink" title="戴铭JSONDecoder"></a><a href="http://xiaozhuanlan.com/topic/1703695248">戴铭JSONDecoder</a></h4>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift专题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(六)Kingfisher源码</title>
      <link href="2020/06/30/(%E5%85%AD)Kingfisher%E6%BA%90%E7%A0%81/"/>
      <url>2020/06/30/(%E5%85%AD)Kingfisher%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Kingfisher源码"><a href="#Kingfisher源码" class="headerlink" title="Kingfisher源码"></a>Kingfisher源码</h1><h4 id="Kingfisher3架构"><a href="#Kingfisher3架构" class="headerlink" title="Kingfisher3架构"></a><a href="https://chenao0727.github.io/2016/12/26/Kingfisher/">Kingfisher3架构</a></h4><h2 id="kf命名空间"><a href="#kf命名空间" class="headerlink" title="kf命名空间"></a>kf命名空间</h2><ul><li>类 <code>Kingfisher</code> 是一个范型类，类型是 Base </li><li>协议 KingfisherCompatible，声明属性 kf，类型是范型 CompatibleType 。并要求遵守协议的一方，实现该属性的 get 方法。</li><li>协议扩展中，协议自身实现了属性。这样就不必在每个遵守该协议的类里实现该属性了。</li><li>协议里的 kf 是一个 Kingfisher 类的实例，调用的方法是 Kingfisher 类的方法。</li><li>根据类型的不同，调用不同类型里的方法。如：对应 Image/ImageView / Button 的 Kingfisher 里的setImage 方法。</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Kingfisher.swift</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Kingfisher</span>&lt;<span class="title">Base</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">let</span> base: <span class="type">Base</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> base: <span class="type">Base</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.base = base</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> A type that has Kingfisher extensions.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">KingfisherCompatible</span> </span>&#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">CompatibleType</span></span><br><span class="line">    <span class="keyword">var</span> kf: <span class="type">CompatibleType</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">KingfisherCompatible</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> kf: <span class="type">Kingfisher</span>&lt;<span class="type">Self</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Kingfisher</span>(<span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Image</span>: <span class="title">KingfisherCompatible</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span> !os(watchOS)</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ImageView</span>: <span class="title">KingfisherCompatible</span> </span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Button</span>: <span class="title">KingfisherCompatible</span> </span>&#123; &#125;</span><br><span class="line">#<span class="keyword">else</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">WKInterfaceImage</span>: <span class="title">KingfisherCompatible</span> </span>&#123; &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1、weak-var解决CADisplayLink循环引用"><a href="#1、weak-var解决CADisplayLink循环引用" class="headerlink" title="1、weak var解决CADisplayLink循环引用"></a>1、weak var解决CADisplayLink循环引用</h2><p>为了防止<code>AnimatedImageView</code> 和 <code>CADisplayLink</code> 之间的循环引用，Kingfisher在<code>AnimatedImageView</code> 内部写了一个代理类。通过<code>TargetProxy</code> 来调用 <code>AnimatedImageView</code> 中的 <code>updateFrame</code> 方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimatedImageView</span>: <span class="title">UIImageView</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// Proxy object for prevending a reference cycle between the CADDisplayLink and AnimatedImageView.</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TargetProxy</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">weak</span> <span class="keyword">var</span> target: <span class="type">AnimatedImageView?</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">init</span>(target: <span class="type">AnimatedImageView</span>) &#123;</span><br><span class="line">            <span class="keyword">self</span>.target = target</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">onScreenUpdate</span><span class="params">()</span></span> &#123;</span><br><span class="line">            target?.updateFrame()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// A display link that keeps calling the `updateFrame` method on every screen refresh.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> displayLink: <span class="type">CADisplayLink</span> = &#123;</span><br><span class="line">        <span class="keyword">self</span>.isDisplayLinkInitialized = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">let</span> displayLink = <span class="type">CADisplayLink</span>(target: <span class="type">TargetProxy</span>(target: <span class="keyword">self</span>), selector: #selector(<span class="type">TargetProxy</span>.onScreenUpdate))</span><br><span class="line">        displayLink.add(to: .main, forMode: <span class="keyword">self</span>.runLoopMode)</span><br><span class="line">        displayLink.isPaused = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">return</span> displayLink</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、处理Gif图片"><a href="#2、处理Gif图片" class="headerlink" title="2、处理Gif图片"></a>2、处理Gif图片</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// MARK: - Image format</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">struct</span> <span class="title">ImageHeaderData</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">PNG</span>: [<span class="type">UInt8</span>] = [<span class="number">0x89</span>, <span class="number">0x50</span>, <span class="number">0x4E</span>, <span class="number">0x47</span>, <span class="number">0x0D</span>, <span class="number">0x0A</span>, <span class="number">0x1A</span>, <span class="number">0x0A</span>]</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">JPEG_SOI</span>: [<span class="type">UInt8</span>] = [<span class="number">0xFF</span>, <span class="number">0xD8</span>]</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">JPEG_IF</span>: [<span class="type">UInt8</span>] = [<span class="number">0xFF</span>]</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">GIF</span>: [<span class="type">UInt8</span>] = [<span class="number">0x47</span>, <span class="number">0x49</span>, <span class="number">0x46</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ImageFormat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> unknown, <span class="type">PNG</span>, <span class="type">JPEG</span>, <span class="type">GIF</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">DataProxy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> imageFormat: <span class="type">ImageFormat</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> buffer = [<span class="type">UInt8</span>](repeating: <span class="number">0</span>, <span class="built_in">count</span>: <span class="number">8</span>)</span><br><span class="line">        (base <span class="keyword">as</span> <span class="type">NSData</span>).getBytes(&amp;buffer, length: <span class="number">8</span>)</span><br><span class="line">        <span class="keyword">if</span> buffer == <span class="type">ImageHeaderData</span>.<span class="type">PNG</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> .<span class="type">PNG</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> buffer[<span class="number">0</span>] == <span class="type">ImageHeaderData</span>.<span class="type">JPEG_SOI</span>[<span class="number">0</span>] &amp;&amp;</span><br><span class="line">            buffer[<span class="number">1</span>] == <span class="type">ImageHeaderData</span>.<span class="type">JPEG_SOI</span>[<span class="number">1</span>] &amp;&amp;</span><br><span class="line">            buffer[<span class="number">2</span>] == <span class="type">ImageHeaderData</span>.<span class="type">JPEG_IF</span>[<span class="number">0</span>]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> .<span class="type">JPEG</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> buffer[<span class="number">0</span>] == <span class="type">ImageHeaderData</span>.<span class="type">GIF</span>[<span class="number">0</span>] &amp;&amp;</span><br><span class="line">            buffer[<span class="number">1</span>] == <span class="type">ImageHeaderData</span>.<span class="type">GIF</span>[<span class="number">1</span>] &amp;&amp;</span><br><span class="line">            buffer[<span class="number">2</span>] == <span class="type">ImageHeaderData</span>.<span class="type">GIF</span>[<span class="number">2</span>]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> .<span class="type">GIF</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> .unknown</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="关联对象objc-setAssociatedObject"><a href="#关联对象objc-setAssociatedObject" class="headerlink" title="关联对象objc_setAssociatedObject"></a>关联对象objc_setAssociatedObject</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> animatedImageDataKey: <span class="type">Void?</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> imageSourceKey: <span class="type">Void?</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: - Image Properties</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Kingfisher</span> <span class="title">where</span> <span class="title">Base</span>: <span class="title">Image</span> </span>&#123;</span><br><span class="line">    <span class="keyword">fileprivate</span>(<span class="keyword">set</span>) <span class="keyword">var</span> animatedImageData: <span class="type">Data?</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> objc_getAssociatedObject(base, &amp;animatedImageDataKey) <span class="keyword">as</span>? <span class="type">Data</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            objc_setAssociatedObject(base, &amp;animatedImageDataKey, newValue, .<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">fileprivate</span>(<span class="keyword">set</span>) <span class="keyword">var</span> imageSource: <span class="type">ImageSource?</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> objc_getAssociatedObject(base, &amp;imageSourceKey) <span class="keyword">as</span>? <span class="type">ImageSource</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            objc_setAssociatedObject(base, &amp;imageSourceKey, newValue, .<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="KingfisherManager原理"><a href="#KingfisherManager原理" class="headerlink" title="KingfisherManager原理"></a>KingfisherManager原理</h4><ul><li>KingfisherManager 包含了downloader和cache</li><li>通过URL检索图片</li><li>获取图片retrieveImage</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Main manager class of Kingfisher. It connects Kingfisher downloader and cache.</span></span><br><span class="line"><span class="comment">/// You can use this class to retrieve an image via a specified URL from web or cache.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KingfisherManager</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// Shared manager used by the extensions across Kingfisher.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> shared = <span class="type">KingfisherManager</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// Cache used by this manager</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> cache: <span class="type">ImageCache</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// Downloader used by this manager</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> downloader: <span class="type">ImageDownloader</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">let</span> processQueue: <span class="type">DispatchQueue</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(downloader: .<span class="keyword">default</span>, cache: .<span class="keyword">default</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(downloader: <span class="type">ImageDownloader</span>, cache: <span class="type">ImageCache</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.downloader = downloader</span><br><span class="line">        <span class="keyword">self</span>.cache = cache</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> processQueueName = <span class="string">&quot;com.onevcat.Kingfisher.KingfisherManager.processQueue.\(UUID().uuidString)&quot;</span></span><br><span class="line">        processQueue = <span class="type">DispatchQueue</span>(label: processQueueName, attributes: .concurrent)</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">    Get an image with resource.</span></span><br><span class="line"><span class="comment">    If KingfisherOptions.None is used as `options`, Kingfisher will seek the image in memory and disk first.</span></span><br><span class="line"><span class="comment">    If not found, it will download the image at `resource.downloadURL` and cache it with `resource.cacheKey`.</span></span><br><span class="line"><span class="comment">    These default behaviors could be adjusted by passing different options. See `KingfisherOptions` for more.</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    - parameter resource:          Resource object contains information such as `cacheKey` and `downloadURL`.</span></span><br><span class="line"><span class="comment">    - parameter options:           A dictionary could control some behaviors. See `KingfisherOptionsInfo` for more.</span></span><br><span class="line"><span class="comment">    - parameter progressBlock:     Called every time downloaded data changed. This could be used as a progress UI.</span></span><br><span class="line"><span class="comment">    - parameter completionHandler: Called when the whole retrieving process finished.</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    - returns: A `RetrieveImageTask` task object. You can use this object to cancel the task.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@discardableResult</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">retrieveImage</span><span class="params">(with resource: Resource,</span></span></span><br><span class="line"><span class="function"><span class="params">        options: KingfisherOptionsInfo?,</span></span></span><br><span class="line"><span class="function"><span class="params">        progressBlock: DownloadProgressBlock?,</span></span></span><br><span class="line"><span class="function"><span class="params">        completionHandler: CompletionHandler?)</span></span> -&gt; <span class="type">RetrieveImageTask</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> task = <span class="type">RetrieveImageTask</span>()</span><br><span class="line">        <span class="keyword">let</span> options = currentDefaultOptions + (options ?? <span class="type">KingfisherEmptyOptionsInfo</span>)</span><br><span class="line">        <span class="keyword">if</span> options.forceRefresh &#123;</span><br><span class="line">            <span class="number">_</span> = downloadAndCacheImage(</span><br><span class="line">                with: resource.downloadURL,</span><br><span class="line">                forKey: resource.cacheKey,</span><br><span class="line">                retrieveImageTask: task,</span><br><span class="line">                progressBlock: progressBlock,</span><br><span class="line">                completionHandler: completionHandler,</span><br><span class="line">                options: options)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tryToRetrieveImageFromCache(</span><br><span class="line">                forKey: resource.cacheKey,</span><br><span class="line">                with: resource.downloadURL,</span><br><span class="line">                retrieveImageTask: task,</span><br><span class="line">                progressBlock: progressBlock,</span><br><span class="line">                completionHandler: completionHandler,</span><br><span class="line">                options: options)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> task</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift专题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(五)Swift内存布局初探</title>
      <link href="2020/06/25/(%E4%BA%94)Swift%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E5%88%9D%E6%8E%A2/"/>
      <url>2020/06/25/(%E4%BA%94)Swift%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="Swift内存布局初探"><a href="#Swift内存布局初探" class="headerlink" title="Swift内存布局初探"></a>Swift内存布局初探</h1><h2 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h2><blockquote><p>问题实际分配内存为何是25？</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///带有关联值的枚举</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">TestEnum</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> t1(<span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> t2(<span class="type">Int</span>, <span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> t3(<span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> t4(<span class="type">Bool</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="type">MemoryLayout</span>&lt;<span class="type">TestEnum</span>&gt;.alignment)<span class="comment">//Int类型内存对齐：8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">MemoryLayout</span>&lt;<span class="type">TestEnum</span>&gt;.size)<span class="comment">//实际大小:24 + 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">MemoryLayout</span>&lt;<span class="type">TestEnum</span>&gt;.<span class="built_in">stride</span>)<span class="comment">//系统分配：24 + 8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///带有关联值的枚举</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Password</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> num(<span class="type">Int</span>, <span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> str</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="type">MemoryLayout</span>&lt;<span class="type">Password</span>&gt;.alignment)<span class="comment">//Int类型内存对齐：8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">MemoryLayout</span>&lt;<span class="type">Password</span>&gt;.size)<span class="comment">//实际大小:16 + 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">MemoryLayout</span>&lt;<span class="type">Password</span>&gt;.<span class="built_in">stride</span>)<span class="comment">//系统分配：16 + 8</span></span><br></pre></td></tr></table></figure><h2 id="Struct"><a href="#Struct" class="headerlink" title="Struct"></a>Struct</h2><blockquote><p>实际分配内存是多少？实际大小是多少？</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> x: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> y: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> isHit: <span class="type">Bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="type">MemoryLayout</span>&lt;<span class="type">Point</span>&gt;.alignment)<span class="comment">//Int类型内存对齐：8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">MemoryLayout</span>&lt;<span class="type">Point</span>&gt;.size)<span class="comment">//实际大小:16 + 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">MemoryLayout</span>&lt;<span class="type">Point</span>&gt;.<span class="built_in">stride</span>)<span class="comment">//系统分配：16 + 8</span></span><br></pre></td></tr></table></figure><h2 id="Class的内存管理"><a href="#Class的内存管理" class="headerlink" title="Class的内存管理"></a>Class的内存管理</h2><blockquote><p>Class 本身也是分配在栈上，在堆上保留class的type信息，type信息里面有一个函数表，class的函数在派发时会按照type信息里面的函数表进行派发。</p><p>当子类需要继承父类时，子类只要在自己的type信息中记录自己的信息即可。</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;Jack&quot;</span></span><br><span class="line">    <span class="keyword">var</span> year = <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> m = <span class="type">Man</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="type">MemoryLayout</span>&lt;<span class="type">Man</span>&gt;.alignment) <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">MemoryLayout</span>&lt;<span class="type">Man</span>&gt;.size) <span class="comment">//8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">MemoryLayout</span>&lt;<span class="type">Man</span>&gt;.<span class="built_in">stride</span>) <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">print</span>(class_getInstanceSize(<span class="type">Man</span>.<span class="keyword">self</span>)) <span class="comment">// 32 + 8对齐 = 40</span></span><br><span class="line"><span class="built_in">print</span>(class_getInstanceSize(type(of: m))) <span class="comment">// 32 + 8对齐 = 40</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Woman</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;Rose&quot;</span></span><br><span class="line">    <span class="keyword">var</span> year = <span class="number">20</span></span><br><span class="line">    <span class="keyword">var</span> isMan = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> woman = <span class="type">Woman</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="type">MemoryLayout</span>&lt;<span class="type">Woman</span>&gt;.alignment) <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">MemoryLayout</span>&lt;<span class="type">Woman</span>&gt;.size) <span class="comment">//8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">MemoryLayout</span>&lt;<span class="type">Woman</span>&gt;.<span class="built_in">stride</span>) <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">print</span>(class_getInstanceSize(<span class="type">Woman</span>.<span class="keyword">self</span>)) <span class="comment">// 32 + 16对齐 = 48</span></span><br><span class="line"><span class="built_in">print</span>(class_getInstanceSize(type(of: woman))) <span class="comment">// 32 + 16对齐 = 48</span></span><br></pre></td></tr></table></figure><blockquote><p>问题：Swift中最小的class内存对齐是8还是16？  </p><p>分情况</p><ul><li><strong>对于Man不需要分配内存8对齐</strong></li><li><strong>iOS/macOS中malloc函数分配内存大小总是16的倍数，所以对于woman需要分配内存16对齐</strong></li></ul></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类size</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Size</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 16 类型信息+引用计数</span></span><br><span class="line">    <span class="keyword">var</span> width = <span class="number">1</span> <span class="comment">//8</span></span><br><span class="line">    <span class="keyword">var</span> height = <span class="number">2</span> <span class="comment">//8</span></span><br><span class="line">    <span class="keyword">var</span> isBig = <span class="literal">false</span> <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 变量 size 接收类Size</span></span><br><span class="line"><span class="keyword">var</span> size = <span class="type">Size</span>()</span><br><span class="line"><span class="built_in">print</span>(class_getInstanceSize(type(of: size))) <span class="comment">// 32 + 8 = 40</span></span><br><span class="line"><span class="built_in">print</span>(class_getInstanceSize(<span class="type">Size</span>.<span class="keyword">self</span>)) <span class="comment">// 32 + 8 = 40</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Mems</span>.size(ofRef: size)) <span class="comment">// 实际分配：48</span></span><br></pre></td></tr></table></figure><p><strong>汇编跟踪查看堆内存分布：</strong></p><ul><li><strong>查找：allocating_init</strong>()</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callq  0x100001da0; xxx.Size.__allocating_init()</span><br></pre></td></tr></table></figure><ul><li>debug控制台输入:  si </li><li>debug控制台输入: finish 到<strong>swift_allocObject</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callq  0x10000298e; symbol stub for: swift_allocObject</span><br></pre></td></tr></table></figure><ul><li>debug控制台输入:  si </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callq  0x7fff666246c0; swift_slowAlloc</span><br></pre></td></tr></table></figure><ul><li>进入<strong>swift_slowAlloc，找到malloc</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callq  0x7fff6669e722; symbol stub for: malloc</span><br></pre></td></tr></table></figure><ul><li>进入call malloc可以看到<strong>malloc_zone_malloc</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callq  0x7fff670ab002; malloc_zone_malloc</span><br></pre></td></tr></table></figure><p><strong>总结Class对象的堆空间申请过程：</strong></p><ul><li><strong>1、allocating_init()</strong></li><li><strong>2、swift_allocObject</strong></li><li><strong>3、swift_slowAlloc</strong></li><li><strong>4、malloc</strong></li><li><strong>5、malloc_zone_malloc</strong></li></ul><h2 id="协议的内存管理"><a href="#协议的内存管理" class="headerlink" title="协议的内存管理"></a>协议的内存管理</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">DragonFire</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">DragonFire</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fire</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">YellowDragon</span>: <span class="title">DragonFire</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> year = <span class="string">&quot;8&quot;</span></span><br><span class="line">    <span class="keyword">let</span> teeth = <span class="number">48</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="type">MemoryLayout</span>&lt;<span class="type">YellowDragon</span>&gt;.size) <span class="comment">// 24</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">MemoryLayout</span>&lt;<span class="type">DragonFire</span>&gt;.size) <span class="comment">// 40</span></span><br></pre></td></tr></table></figure><blockquote><p>协议类型内存管理使用Existential Container 内存模型。</p><p>前三个word使用Value buffer 来存储inline的值</p><p>第四个word使用Value Witness Table 存储各种操作如allocate、copy、destruct、deallocate等</p><p>第五个word使用Protocol Witness Table 来存储协议的函数</p></blockquote><h2 id="泛型的内存管理"><a href="#泛型的内存管理" class="headerlink" title="泛型的内存管理"></a>泛型的内存管理</h2><blockquote><p>泛型采用是和Exsistential Container原理类似的内存管理。</p><p>Value Witness Table 和 Protocol Witness Table是作为隐形参数传递到泛型方法里。</p><p>不过经过编辑器的层层inline优化后，最终类型会被推导出来，也就不再需要Existential Container 这一套方法了。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift专题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/06/18/(%E4%B9%9D)Swift%20%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>2020/06/18/(%E4%B9%9D)Swift%20%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="Swift5-字符串String"><a href="#Swift5-字符串String" class="headerlink" title="Swift5 字符串String"></a>Swift5 字符串String</h1><blockquote><p>Swift version 5.2</p><p>Xcode11</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;WhelloKitty&quot;</span></span><br></pre></td></tr></table></figure><h2 id="字符串截取前n个字符"><a href="#字符串截取前n个字符" class="headerlink" title="字符串截取前n个字符"></a>字符串截取前n个字符</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> subStr1 = <span class="type">String</span>(str.<span class="built_in">dropFirst</span>())</span><br><span class="line"><span class="built_in">print</span>(subStr1) <span class="comment">// helloKitty</span></span><br><span class="line"><span class="keyword">let</span> subStr2 = <span class="type">String</span>(str.<span class="built_in">dropFirst</span>(<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(subStr2) <span class="comment">// Kitty</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="字符串截取-前的一部分"><a href="#字符串截取-前的一部分" class="headerlink" title="字符串截取?前的一部分"></a>字符串截取?前的一部分</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> index = path.firstIndex(of: <span class="string">&quot;?&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> paramStr = path[path.index(after: index)..&lt;path.endIndex]</span><br><span class="line">  <span class="comment">// paramStr:&quot;/xxx/xxx?&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;paramStr is:\(String(paramStr.dropLast())&quot;</span>)</span><br><span class="line">  <span class="comment">// paramStr:&quot;/xxx/xxx&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串截取-后的一部分"><a href="#字符串截取-后的一部分" class="headerlink" title="字符串截取?后的一部分"></a>字符串截取?后的一部分</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> index = path.firstIndex(of: <span class="string">&quot;?&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> paramStr = path[path.index(after: index)..&lt;path.endIndex]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;paramStr is:\(paramStr)&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串截取后n个字符串"><a href="#字符串截取后n个字符串" class="headerlink" title="字符串截取后n个字符串"></a>字符串截取后n个字符串</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> subStr3 = <span class="type">String</span>(str.<span class="built_in">dropLast</span>())</span><br><span class="line"><span class="built_in">print</span>(subStr3) <span class="comment">// WhelloKitt</span></span><br><span class="line"><span class="keyword">let</span> subStr4 = <span class="type">String</span>(str.<span class="built_in">dropLast</span>(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(subStr4) <span class="comment">// Whello</span></span><br></pre></td></tr></table></figure><h2 id="Extension"><a href="#Extension" class="headerlink" title="Extension"></a>Extension</h2><ul><li>通过URL中的query参数获取对应字典</li><li></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 通过URL中的query参数获取对应字典</span></span><br><span class="line">    <span class="comment">/// ?time=2020-04&amp;name=张三 =》&#123;&quot;time&quot;: &quot;2020-04&quot;, &quot;name&quot;: &quot;张三&quot; &#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getUrlParameters</span><span class="params">()</span></span> -&gt; [<span class="type">String</span>: <span class="type">String</span>]? &#123;</span><br><span class="line">        <span class="keyword">var</span> params: [<span class="type">String</span>: <span class="type">String</span>] = [:]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> array = <span class="keyword">self</span>.components(separatedBy: <span class="string">&quot;?&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> array.<span class="built_in">count</span> == <span class="number">2</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> paramsStr = array[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> paramsStr.<span class="built_in">count</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> paramsArray = paramsStr.components(separatedBy: <span class="string">&quot;&amp;&quot;</span>)</span><br><span class="line">                <span class="keyword">for</span> param <span class="keyword">in</span> paramsArray &#123;</span><br><span class="line">                    <span class="keyword">let</span> arr = param.components(separatedBy: <span class="string">&quot;=&quot;</span>)</span><br><span class="line">                    <span class="keyword">if</span> arr.<span class="built_in">count</span> == <span class="number">2</span> &#123;</span><br><span class="line">                        params[arr[<span class="number">0</span>]] = arr[<span class="number">1</span>]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> params</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/// 处理千分符号</span></span><br><span class="line">  <span class="comment">/// 10000 =&gt; 10，000</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">thousandsNumber</span><span class="params">(content: Double)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> format = <span class="type">NumberFormatter</span>()</span><br><span class="line">        format.numberStyle = .decimal</span><br><span class="line">        format.usesGroupingSeparator = <span class="literal">true</span></span><br><span class="line">        format.groupingSeparator = <span class="string">&quot;,&quot;</span></span><br><span class="line">        format.groupingSize = <span class="number">3</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> result = format.string(<span class="keyword">for</span>: <span class="type">NSNumber</span>(value: content)) <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="string">&quot;&quot;</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>(四)Swift标准库源码</title>
      <link href="2020/04/18/(%E5%9B%9B)Swift%E6%A0%87%E5%87%86%E5%BA%93%E6%BA%90%E7%A0%81/"/>
      <url>2020/04/18/(%E5%9B%9B)Swift%E6%A0%87%E5%87%86%E5%BA%93%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Swift标准库源码"><a href="#Swift标准库源码" class="headerlink" title="Swift标准库源码"></a>Swift标准库源码</h1><ul><li><a href="https://swift.org/">Swift.org</a></li><li><a href="https://github.com/apple/swift">Github开源地址</a> <ul><li> 1、下载后的路径使用BBEdit查看<strong>所有标准库</strong>：<strong>stdlib/public/core/</strong></li><li> 2、网页查看：<a href="https://github.com/apple/swift/tree/master/stdlib/public/core">https://github.com/apple/swift/tree/master/stdlib/public/core</a></li></ul></li></ul><h2 id="如何阅读-Swift-标准库中的源码-Swift源码地址"><a href="#如何阅读-Swift-标准库中的源码-Swift源码地址" class="headerlink" title="如何阅读 Swift 标准库中的源码 | Swift源码地址"></a><a href="https://swift.gg/2016/12/30/how-to-read-the-swift-standard-libray-source/">如何阅读 Swift 标准库中的源码</a> | <a href="https://github.com/apple/swift/tree/swift-5.0-RELEASE/stdlib/public/core">Swift源码地址</a></h2><h3 id="00关键词"><a href="#00关键词" class="headerlink" title="00关键词"></a>00关键词</h3><ul><li><p><a href="https://juejin.im/post/5b30a90e6fb9a00e8b25322a">Array解读</a> | <a href="https://juejin.im/post/5a371b6a5188253b0318510d">FFIB-LeetCode</a> |  <a href="https://gist.github.com/onevcat/bf59e749a9b66949e16f7f5015936e92#file-contiguousarray-swift-L197">ContiguousArray</a> |  <a href="https://xiaozhuanlan.com/topic/7286901534">ContiguousArray喵神解读</a></p></li><li><p>Sequence解读 | <a href="https://www.jianshu.com/p/6762c2b5274a">Collection解读</a> | <a href="https://www.jianshu.com/p/553e6b9b866d">optional解读</a> |  <a href="https://www.jianshu.com/p/114efe4f32bd">map源码解读</a> |  <a href="https://github.com/dengyhgit/Talks/tree/master/ASM%20FOR%20ARM64%20%E5%88%86%E4%BA%AB">ASM FOR ARM64</a> | <a href="https://github.com/apple/swift/blob/swift-5.0-RELEASE/stdlib/public/core/Character.swift#L65">Character源码</a> | <a href="https://github.com/apple/swift/blob/swift-5.0-RELEASE/stdlib/public/core/String.swift#L352">String源码</a> | <a href="https://zhuanlan.zhihu.com/p/80520884">如何判断字符串为空？</a> | <a href="https://www.jianshu.com/p/b46a4f5478af">替换特殊字符</a></p></li></ul><h3 id="Algorithm源码"><a href="#Algorithm源码" class="headerlink" title="Algorithm源码"></a>Algorithm源码</h3><h4 id="min"><a href="#min" class="headerlink" title="min()"></a>min()</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">min</span>&lt;T: Comparable&gt;<span class="params">(<span class="number">_</span> x: T, <span class="number">_</span> y: T)</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">  <span class="comment">// In case `x == y` we pick `x`.</span></span><br><span class="line">  <span class="comment">// `(min(x, y), max(x, y))` should return `(x, y)` in case `x == y`.</span></span><br><span class="line">  <span class="keyword">return</span> y &lt; x ? y : x</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">min</span>&lt;T: Comparable&gt;<span class="params">(<span class="number">_</span> x: T, <span class="number">_</span> y: T, <span class="number">_</span> z: T, <span class="number">_</span> rest: T...)</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> minValue = <span class="built_in">min</span>(<span class="built_in">min</span>(x, y), z)</span><br><span class="line">  <span class="comment">// In case `value == minValue`, we pick `minValue`. See min(_:_:).</span></span><br><span class="line">  <span class="keyword">for</span> value <span class="keyword">in</span> rest <span class="keyword">where</span> value &lt; minValue &#123;</span><br><span class="line">    minValue = value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> minValue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="max"><a href="#max" class="headerlink" title="max()"></a>max()</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">max</span>&lt;T: Comparable&gt;<span class="params">(<span class="number">_</span> x: T, <span class="number">_</span> y: T)</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">  <span class="comment">// In case `x == y`, we pick `y`. See min(_:_:).</span></span><br><span class="line">  <span class="keyword">return</span> y &gt;= x ? y : x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">max</span>&lt;T: Comparable&gt;<span class="params">(<span class="number">_</span> x: T, <span class="number">_</span> y: T, <span class="number">_</span> z: T, <span class="number">_</span> rest: T...)</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> maxValue = <span class="built_in">max</span>(<span class="built_in">max</span>(x, y), z)</span><br><span class="line">  <span class="comment">// In case `value == maxValue`, we pick `value`. See min(_:_:).</span></span><br><span class="line">  <span class="keyword">for</span> value <span class="keyword">in</span> rest <span class="keyword">where</span> value &gt;= maxValue &#123;</span><br><span class="line">    maxValue = value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> maxValue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="EnumeratedSequence"><a href="#EnumeratedSequence" class="headerlink" title="EnumeratedSequence"></a>EnumeratedSequence</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">EnumeratedSequence</span>&lt;<span class="title">Base</span>: <span class="title">Sequence</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> _base: <span class="type">Base</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">init</span>(_base: <span class="type">Base</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>._base = _base</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">EnumeratedSequence</span> </span>&#123;</span><br><span class="line">  <span class="comment">///     var iterator = [&quot;foo&quot;, &quot;bar&quot;].enumerated().makeIterator()</span></span><br><span class="line">  <span class="comment">///     iterator.next() // (0, &quot;foo&quot;)</span></span><br><span class="line">  <span class="comment">///     iterator.next() // (1, &quot;bar&quot;)</span></span><br><span class="line">  <span class="comment">///     iterator.next() // nil</span></span><br><span class="line">  <span class="comment">/// To create an instance, call `enumerated().makeIterator()` on a sequence or collection.</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> _base: <span class="type">Base</span>.<span class="type">Iterator</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> _count: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">init</span>(_base: <span class="type">Base</span>.<span class="type">Iterator</span>) &#123;</span><br><span class="line">      <span class="keyword">self</span>._base = _base</span><br><span class="line">      <span class="keyword">self</span>._count = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">EnumeratedSequence</span>.<span class="title">Iterator</span>: <span class="title">IteratorProtocol</span>, <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// The type of element returned by `next()`.</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">Element</span> = (offset: <span class="type">Int</span>, element: <span class="type">Base</span>.<span class="type">Element</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">next</span><span class="params">()</span></span> -&gt; <span class="type">Element?</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> b = _base.next() <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">    <span class="keyword">let</span> result = (offset: _count, element: b)</span><br><span class="line">    _count += <span class="number">1</span> </span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">EnumeratedSequence</span>: <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// Returns an iterator over the elements of this sequence.</span></span><br><span class="line">  <span class="keyword">public</span> __consuming <span class="function"><span class="keyword">func</span> <span class="title">makeIterator</span><span class="params">()</span></span> -&gt; <span class="type">Iterator</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Iterator</span>(_base: _base.makeIterator())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sequence源码"><a href="#Sequence源码" class="headerlink" title="Sequence源码"></a>Sequence源码</h3><h4 id="IteratorProtocol"><a href="#IteratorProtocol" class="headerlink" title="IteratorProtocol"></a>IteratorProtocol</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">IteratorProtocol</span> </span>&#123;</span><br><span class="line">  <span class="keyword">associatedtype</span> <span class="type">Element</span></span><br><span class="line">  <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">next</span><span class="params">()</span></span> -&gt; <span class="type">Element?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>“序列和迭代器非常相似，你可能会问，为什么它们会被分为不同的类型？为什么不能直接把 IteratorProtocol 的功能包含到 Sequence 中呢？”</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibsIterator</span><span class="params">()</span></span> -&gt; <span class="type">AnyIterator</span>&lt;<span class="type">Int</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> state = (<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="type">AnyIterator</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> upcomingNumber = state.<span class="number">0</span></span><br><span class="line">    state = (state.<span class="number">1</span>, state.<span class="number">0</span> + state.<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> upcomingNumber</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sequence"><a href="#Sequence" class="headerlink" title="Sequence"></a>Sequence</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">Sequence</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">associatedtype</span> <span class="type">Element</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">associatedtype</span> <span class="type">Iterator</span>: <span class="type">IteratorProtocol</span> <span class="keyword">where</span> <span class="type">Iterator</span>.<span class="type">Element</span> == <span class="type">Element</span></span><br><span class="line"></span><br><span class="line">  __consuming <span class="function"><span class="keyword">func</span> <span class="title">makeIterator</span><span class="params">()</span></span> -&gt; <span class="type">Iterator</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> underestimatedCount: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">_customContainsEquatableElement</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="number">_</span> element: Element</span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span> -&gt; <span class="type">Bool?</span></span><br><span class="line"></span><br><span class="line">  __consuming <span class="function"><span class="keyword">func</span> <span class="title">_copyToContiguousArray</span><span class="params">()</span></span> -&gt; <span class="type">ContiguousArray</span>&lt;<span class="type">Element</span>&gt;</span><br><span class="line"></span><br><span class="line">  __consuming <span class="function"><span class="keyword">func</span> <span class="title">_copyContents</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    initializing ptr: UnsafeMutableBufferPointer&lt;Element&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span> -&gt; (<span class="type">Iterator</span>,<span class="type">UnsafeMutableBufferPointer</span>&lt;<span class="type">Element</span>&gt;.<span class="type">Index</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">withContiguousStorageIfAvailable</span>&lt;R&gt;<span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="number">_</span> body: <span class="params">(UnsafeBufferPointer&lt;Element&gt;)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">R</span></span><br><span class="line">  ) <span class="keyword">rethrows</span> -&gt; <span class="type">R?</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sequence实现"><a href="#Sequence实现" class="headerlink" title="Sequence实现"></a>Sequence实现</h3><h4 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Sequence</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;T&gt;<span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="number">_</span> transform: <span class="params">(Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">T</span></span><br><span class="line">  ) <span class="keyword">rethrows</span> -&gt; [<span class="type">T</span>] &#123;</span><br><span class="line">    <span class="keyword">let</span> initialCapacity = underestimatedCount</span><br><span class="line">    <span class="keyword">var</span> result = <span class="type">ContiguousArray</span>&lt;<span class="type">T</span>&gt;()</span><br><span class="line">    result.reserveCapacity(initialCapacity)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> iterator = <span class="keyword">self</span>.makeIterator()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add elements up to the initial capacity without checking for regrowth.</span></span><br><span class="line">    <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;initialCapacity &#123;</span><br><span class="line">      result.append(<span class="keyword">try</span> transform(iterator.next()!))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Add remaining elements, if any.</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">let</span> element = iterator.next() &#123;</span><br><span class="line">      result.append(<span class="keyword">try</span> transform(element))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Array</span>(result)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">    @inlinable</span><br><span class="line">  <span class="keyword">public</span> __consuming <span class="function"><span class="keyword">func</span> <span class="title">filter</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="number">_</span> isIncluded: <span class="params">(Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Bool</span></span><br><span class="line">  ) <span class="keyword">rethrows</span> -&gt; [<span class="type">Element</span>] &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">try</span> _filter(isIncluded)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @_transparent</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">_filter</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="number">_</span> isIncluded: <span class="params">(Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Bool</span></span><br><span class="line">  ) <span class="keyword">rethrows</span> -&gt; [<span class="type">Element</span>] &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result = <span class="type">ContiguousArray</span>&lt;<span class="type">Element</span>&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> iterator = <span class="keyword">self</span>.makeIterator()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">let</span> element = iterator.next() &#123;</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">try</span> isIncluded(element) &#123;</span><br><span class="line">        result.append(element)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="type">Array</span>(result)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">  @_semantics(<span class="string">&quot;sequence.forEach&quot;</span>)</span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">forEach</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="number">_</span> body: <span class="params">(Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Void</span></span><br><span class="line">  ) <span class="keyword">rethrows</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> <span class="keyword">self</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> body(element)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Sequence</span> <span class="title">where</span> <span class="title">Element</span>: <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> __consuming <span class="function"><span class="keyword">func</span> <span class="title">split</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    separator: Element,</span></span></span><br><span class="line"><span class="function"><span class="params">    maxSplits: Int = Int.<span class="built_in">max</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    omittingEmptySubsequences: Bool = <span class="literal">true</span></span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span> -&gt; [<span class="type">ArraySlice</span>&lt;<span class="type">Element</span>&gt;] &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">split</span>(</span><br><span class="line">      maxSplits: maxSplits,</span><br><span class="line">      omittingEmptySubsequences: omittingEmptySubsequences,</span><br><span class="line">      whereSeparator: &#123; $<span class="number">0</span> == separator &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="IteratorSequence"><a href="#IteratorSequence" class="headerlink" title="IteratorSequence()"></a>IteratorSequence()</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">IteratorSequence</span>&lt;<span class="title">Base</span>: <span class="title">IteratorProtocol</span>&gt; </span>&#123;</span><br><span class="line">  @usableFromInline</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> _base: <span class="type">Base</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Creates an instance whose iterator is a copy of `base`.</span></span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> base: <span class="type">Base</span>) &#123;</span><br><span class="line">    _base = base</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">IteratorSequence</span>: <span class="title">IteratorProtocol</span>, <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// Advances to the next element and returns it, or `nil` if no next element</span></span><br><span class="line">  <span class="comment">/// exists.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// Once `nil` has been returned, all subsequent calls return `nil`.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Precondition: `next()` has not been applied to a copy of `self`</span></span><br><span class="line">  <span class="comment">///   since the copy was made.</span></span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">next</span><span class="params">()</span></span> -&gt; <span class="type">Base</span>.<span class="type">Element?</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> _base.next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><h3 id="-3"><a href="#-3" class="headerlink" title=""></a></h3><h3 id="-4"><a href="#-4" class="headerlink" title=""></a></h3><h3 id="SequenceAlgorithms源码"><a href="#SequenceAlgorithms源码" class="headerlink" title="SequenceAlgorithms源码"></a>SequenceAlgorithms源码</h3><h4 id="enumerated"><a href="#enumerated" class="headerlink" title="enumerated()"></a>enumerated()</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">  @inlinable <span class="comment">// protocol-only</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">enumerated</span><span class="params">()</span></span> -&gt; <span class="type">EnumeratedSequence</span>&lt;<span class="type">Self</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">EnumeratedSequence</span>(_base: <span class="keyword">self</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="min-1"><a href="#min-1" class="headerlink" title="min()"></a>min()</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    by areInIncreasingOrder: <span class="params">(Element, Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Bool</span></span><br><span class="line">  ) <span class="keyword">rethrows</span> -&gt; <span class="type">Element?</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> it = makeIterator()</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">var</span> result = it.next() <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">let</span> e = it.next() &#123;</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">try</span> areInIncreasingOrder(e, result) &#123; result = e &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="max-1"><a href="#max-1" class="headerlink" title="max()"></a>max()</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    by areInIncreasingOrder: <span class="params">(Element, Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Bool</span></span><br><span class="line">  ) <span class="keyword">rethrows</span> -&gt; <span class="type">Element?</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> it = makeIterator()</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">var</span> result = it.next() <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">let</span> e = it.next() &#123;</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">try</span> areInIncreasingOrder(result, e) &#123; result = e &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="contains"><a href="#contains" class="headerlink" title="contains()"></a>contains()</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">contains</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">where</span> predicate: <span class="params">(Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Bool</span></span><br><span class="line">  ) <span class="keyword">rethrows</span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> <span class="keyword">self</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">try</span> predicate(e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">allSatisfy</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="number">_</span> predicate: <span class="params">(Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Bool</span></span><br><span class="line">  ) <span class="keyword">rethrows</span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">try</span> !<span class="built_in">contains</span> &#123; <span class="keyword">try</span> !predicate($<span class="number">0</span>) &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Sequence</span> <span class="title">where</span> <span class="title">Element</span>: <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">contains</span><span class="params">(<span class="number">_</span> element: Element)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> result = _customContainsEquatableElement(element) &#123;</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">self</span>.<span class="built_in">contains</span> &#123; $<span class="number">0</span> == element &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="reduce-函数"><a href="#reduce-函数" class="headerlink" title="reduce()函数"></a>reduce()函数</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">reduce</span>&lt;Result&gt;<span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="number">_</span> initialResult: Result,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="number">_</span> nextPartialResult:</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="params">(<span class="number">_</span> partialResult: Result, Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Result</span></span><br><span class="line">  ) <span class="keyword">rethrows</span> -&gt; <span class="type">Result</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> accumulator = initialResult</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> <span class="keyword">self</span> &#123;</span><br><span class="line">      accumulator = <span class="keyword">try</span> nextPartialResult(accumulator, element)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> accumulator</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">reduce</span>&lt;Result&gt;<span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    into initialResult: __owned Result,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="number">_</span> updateAccumulatingResult:</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="params">(<span class="number">_</span> partialResult: <span class="keyword">inout</span> Result, Element)</span></span></span> <span class="keyword">throws</span> -&gt; ()</span><br><span class="line">  ) <span class="keyword">rethrows</span> -&gt; <span class="type">Result</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> accumulator = initialResult</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> <span class="keyword">self</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> updateAccumulatingResult(&amp;accumulator, element)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> accumulator</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="reversed"><a href="#reversed" class="headerlink" title="reversed()"></a>reversed()</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Sequence</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> __consuming <span class="function"><span class="keyword">func</span> <span class="title">reversed</span><span class="params">()</span></span> -&gt; [<span class="type">Element</span>] &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> result = <span class="type">Array</span>(<span class="keyword">self</span>)</span><br><span class="line">    <span class="keyword">let</span> <span class="built_in">count</span> = result.<span class="built_in">count</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span>/<span class="number">2</span> &#123;</span><br><span class="line">      result.swapAt(i, <span class="built_in">count</span> - ((i + <span class="number">1</span>) <span class="keyword">as</span> <span class="type">Int</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap()"></a>flatMap()</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">flatMap</span>&lt;SegmentOfResult: Sequence&gt;<span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="number">_</span> transform: <span class="params">(Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">SegmentOfResult</span></span><br><span class="line">  ) <span class="keyword">rethrows</span> -&gt; [<span class="type">SegmentOfResult</span>.<span class="type">Element</span>] &#123;</span><br><span class="line">    <span class="keyword">var</span> result: [<span class="type">SegmentOfResult</span>.<span class="type">Element</span>] = []</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> <span class="keyword">self</span> &#123;</span><br><span class="line">      result.append(contentsOf: <span class="keyword">try</span> transform(element))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="03-zip源码"><a href="#03-zip源码" class="headerlink" title="03 zip源码"></a>03 zip源码</h3><h4 id="zip使用"><a href="#zip使用" class="headerlink" title="zip使用"></a><a href="https://www.hangge.com/blog/cache/detail_1829.html">zip使用</a></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> words = [<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>]</span><br><span class="line"><span class="comment">// 1.1、Array(zip())生成元组</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="type">Array</span>(<span class="built_in">zip</span>(words, numbers))</span><br><span class="line"><span class="comment">//1.2、zip+map生成元组</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="built_in">zip</span>(words, numbers).<span class="built_in">map</span> &#123; $<span class="number">0</span> &#125;</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">//&quot;[(&quot;one&quot;, &quot;1&quot;), (&quot;two&quot;, &quot;2&quot;), (&quot;three&quot;, &quot;3&quot;), (&quot;four&quot;, &quot;4&quot;)]\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、将两个数组合并成一个新数组</span></span><br><span class="line"><span class="keyword">let</span> b = [words, numbers].flatMap &#123; $<span class="number">0</span> &#125;</span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">//&quot;[&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;]\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">c</span> = <span class="built_in">zip</span>(words, numbers).flatMap &#123; [$<span class="number">0</span>, $<span class="number">1</span>] &#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">c</span>) <span class="comment">// &quot;[&quot;one&quot;, &quot;1&quot;, &quot;two&quot;, &quot;2&quot;, &quot;three&quot;, &quot;3&quot;, &quot;four&quot;, &quot;4&quot;]\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3、将两个数组生成字典</span></span><br><span class="line"><span class="keyword">let</span> dic = <span class="type">Dictionary</span>(uniqueKeysWithValues: <span class="built_in">zip</span>(words, numbers))</span><br><span class="line"><span class="built_in">print</span>(dic)<span class="comment">//[&quot;two&quot;: &quot;2&quot;, &quot;four&quot;: &quot;4&quot;, &quot;one&quot;: &quot;1&quot;, &quot;three&quot;: &quot;3&quot;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="zip源码"><a href="#zip源码" class="headerlink" title="zip源码"></a>zip源码</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">zip</span>&lt;Sequence1, Sequence2&gt;<span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="number">_</span> sequence1: Sequence1, <span class="number">_</span> sequence2: Sequence2</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span> -&gt; <span class="type">Zip2Sequence</span>&lt;<span class="type">Sequence1</span>, <span class="type">Sequence2</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">Zip2Sequence</span>(sequence1, sequence2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@frozen <span class="comment">// generic-performance</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Zip2Sequence</span>&lt;<span class="title">Sequence1</span>: <span class="title">Sequence</span>, <span class="title">Sequence2</span>: <span class="title">Sequence</span>&gt; </span>&#123;</span><br><span class="line">  @usableFromInline <span class="comment">// generic-performance</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">let</span> _sequence1: <span class="type">Sequence1</span></span><br><span class="line">  @usableFromInline <span class="comment">// generic-performance</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">let</span> _sequence2: <span class="type">Sequence2</span></span><br><span class="line"></span><br><span class="line">  @inlinable <span class="comment">// generic-performance</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">init</span>(<span class="number">_</span> sequence1: <span class="type">Sequence1</span>, <span class="number">_</span> sequence2: <span class="type">Sequence2</span>) &#123;</span><br><span class="line">    (_sequence1, _sequence2) = (sequence1, sequence2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Zip2Sequence</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// An iterator for `Zip2Sequence`.</span></span><br><span class="line">  @frozen <span class="comment">// generic-performance</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    @usableFromInline <span class="comment">// generic-performance</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> _baseStream1: <span class="type">Sequence1</span>.<span class="type">Iterator</span></span><br><span class="line">    @usableFromInline <span class="comment">// generic-performance</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> _baseStream2: <span class="type">Sequence2</span>.<span class="type">Iterator</span></span><br><span class="line">    @usableFromInline <span class="comment">// generic-performance</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> _reachedEnd: <span class="type">Bool</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    @inlinable <span class="comment">// generic-performance</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">init</span>(</span><br><span class="line">    <span class="number">_</span> iterator1: <span class="type">Sequence1</span>.<span class="type">Iterator</span>, </span><br><span class="line">    <span class="number">_</span> iterator2: <span class="type">Sequence2</span>.<span class="type">Iterator</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      (_baseStream1, _baseStream2) = (iterator1, iterator2)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Zip2Sequence</span>.<span class="title">Iterator</span>: <span class="title">IteratorProtocol</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">Element</span> = (<span class="type">Sequence1</span>.<span class="type">Element</span>, <span class="type">Sequence2</span>.<span class="type">Element</span>)</span><br><span class="line">  </span><br><span class="line">  @inlinable <span class="comment">// generic-performance</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">next</span><span class="params">()</span></span> -&gt; <span class="type">Element?</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> _reachedEnd &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> element1 = _baseStream1.next(),</span><br><span class="line">          <span class="keyword">let</span> element2 = _baseStream2.next() <span class="keyword">else</span> &#123;</span><br><span class="line">      _reachedEnd = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (element1, element2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Zip2Sequence</span>: <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">Element</span> = (<span class="type">Sequence1</span>.<span class="type">Element</span>, <span class="type">Sequence2</span>.<span class="type">Element</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Returns an iterator over the elements of this sequence.</span></span><br><span class="line">  @inlinable <span class="comment">// generic-performance</span></span><br><span class="line">  <span class="keyword">public</span> __consuming <span class="function"><span class="keyword">func</span> <span class="title">makeIterator</span><span class="params">()</span></span> -&gt; <span class="type">Iterator</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Iterator</span>(</span><br><span class="line">      _sequence1.makeIterator(),</span><br><span class="line">      _sequence2.makeIterator())</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @inlinable <span class="comment">// generic-performance</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> underestimatedCount: <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Swift</span>.<span class="built_in">min</span>(</span><br><span class="line">      _sequence1.underestimatedCount,</span><br><span class="line">      _sequence2.underestimatedCount</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="04"><a href="#04" class="headerlink" title="04"></a>04</h4><h4 id="05"><a href="#05" class="headerlink" title="05"></a>05</h4><h4 id="06"><a href="#06" class="headerlink" title="06"></a>06</h4><h4 id="07"><a href="#07" class="headerlink" title="07"></a>07</h4><h4 id="08"><a href="#08" class="headerlink" title="08"></a>08</h4><h4 id="09"><a href="#09" class="headerlink" title="09"></a>09</h4><h4 id="10"><a href="#10" class="headerlink" title="10"></a>10</h4><p><strong>集合协议Sequence: 如果让你设计<code>Sequence</code>类型，你会为它添加那些约束呢？如果你没有特别丰富的经验，最好的办法，还是去看看Swift官方的<code>Sequence</code>实现吧。还是那句话，源码之前，了无秘密。</strong></p><h2 id="Sequence是一个值类型"><a href="#Sequence是一个值类型" class="headerlink" title="Sequence是一个值类型"></a>Sequence是一个值类型</h2><p>当我们走近源代码之前，先来思考一个问题。一个最纯粹的“序列”，究竟意味着什么呢？通过前面两节内容我们知道，序列本身可以是有限的，也可以是无限的；可以是支持多次遍历的，也可以是只能遍历一次的。把这些约束摆在眼前，其实答案就很明显了：</p><ul><li>序列的遍历只能单步向前；</li><li>序列表现的语义，是某种形式的值，它支持的各种访问操作应该是只读的；</li></ul><h2 id="如何以标准库的视角设计一个类型"><a href="#如何以标准库的视角设计一个类型" class="headerlink" title="如何以标准库的视角设计一个类型"></a>如何以标准库的视角设计一个类型</h2><p>接下来，我们思考第二个问题。把序列作为一个标准库的组件进行设计的时候，我们应该从哪些方面来考虑呢？其实，这个问题可以进一步放大成：设计一个容器类型应该从哪些方面进行考虑呢？实际上，得益于编程语言自身的发展，关于标准库中容器类的设计，已经被人们总结出了一些规律。围绕着容器类，一共有三个大的概念，分别是：</p><ul><li><strong>Container</strong> - 容器类型本身，它提供了元素的存储，并为各种不同容器（数组、链表、字典、树等等）的访问提供了一致的接口；</li><li><strong>Iterator</strong> - 与容器搭配工作的Iterator，它为用各种不同的形式遍历容器（向前、向后、随机访问）提供了一致的接口。通常，每一个Container都有它“御用”的Iterator，因为Iterator的各种实现需要对Container的内部构造了如指掌；</li><li><strong>Algorithm</strong> - 当Container和Iterator有了一致的接口之后，也就意味着对各种不同形式数据结构的访问都有了一致的访问方法，于是，我们就可以基于这些接口，来开发出重用度极高的通用算法，这些算法只基于通用接口描述的核心语义，而不与任何具体的数据结构相关；</li></ul><p>基于上面这三个大的概念，我们可以进一步细化它们各自应该考虑的约束，也就是应该提供哪些接口：</p><p>对于Container而言，我们应该回答下面几个“它应该”的问题：</p><ul><li>暴露哪些和容器自身有关的类型；</li><li>如何初始化；</li><li>支持哪些赋值方式；</li><li>提供哪些和尺寸有关的接口；</li><li>有哪些直接访问元素的方法；</li><li>可以获取哪些形式的Iterator；</li><li>支持哪些形式的比较；</li><li>提供哪些以只读方式访问元素的接口；</li><li>提供哪些增、删、改元素的接口；</li></ul><p>对于Iterator而言，我们应该回答下面几个“它应该”的问题：</p><ul><li>暴露哪些和Iterator自身有关的类型；</li><li>提供哪些在Container中移动位置的接口；</li><li>提供哪些访问Container数据成员的接口；</li></ul><h2 id="Sequence-swift完整源码-20200418"><a href="#Sequence-swift完整源码-20200418" class="headerlink" title="Sequence.swift完整源码-20200418"></a>Sequence.swift完整源码-20200418</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//===----------------------------------------------------------------------===//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This source file is part of the Swift.org open source project</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Copyright (c) 2014 - 2017 Apple Inc. and the Swift project authors</span></span><br><span class="line"><span class="comment">// Licensed under Apache License v2.0 with Runtime Library Exception</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// See https://swift.org/LICENSE.txt for license information</span></span><br><span class="line"><span class="comment">// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//===----------------------------------------------------------------------===//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// A type that supplies the values of a sequence one at a time.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// The `IteratorProtocol` protocol is tightly linked with the `Sequence`</span></span><br><span class="line"><span class="comment">/// protocol. Sequences provide access to their elements by creating an</span></span><br><span class="line"><span class="comment">/// iterator, which keeps track of its iteration process and returns one</span></span><br><span class="line"><span class="comment">/// element at a time as it advances through the sequence.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Whenever you use a `for`-`in` loop with an array, set, or any other</span></span><br><span class="line"><span class="comment">/// collection or sequence, you&#x27;re using that type&#x27;s iterator. Swift uses a</span></span><br><span class="line"><span class="comment">/// sequence&#x27;s or collection&#x27;s iterator internally to enable the `for`-`in`</span></span><br><span class="line"><span class="comment">/// loop language construct.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Using a sequence&#x27;s iterator directly gives you access to the same elements</span></span><br><span class="line"><span class="comment">/// in the same order as iterating over that sequence using a `for`-`in` loop.</span></span><br><span class="line"><span class="comment">/// For example, you might typically use a `for`-`in` loop to print each of</span></span><br><span class="line"><span class="comment">/// the elements in an array.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">///     let animals = [&quot;Antelope&quot;, &quot;Butterfly&quot;, &quot;Camel&quot;, &quot;Dolphin&quot;]</span></span><br><span class="line"><span class="comment">///     for animal in animals &#123;</span></span><br><span class="line"><span class="comment">///         print(animal)</span></span><br><span class="line"><span class="comment">///     &#125;</span></span><br><span class="line"><span class="comment">///     // Prints &quot;Antelope&quot;</span></span><br><span class="line"><span class="comment">///     // Prints &quot;Butterfly&quot;</span></span><br><span class="line"><span class="comment">///     // Prints &quot;Camel&quot;</span></span><br><span class="line"><span class="comment">///     // Prints &quot;Dolphin&quot;</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Behind the scenes, Swift uses the `animals` array&#x27;s iterator to loop over</span></span><br><span class="line"><span class="comment">/// the contents of the array.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">///     var animalIterator = animals.makeIterator()</span></span><br><span class="line"><span class="comment">///     while let animal = animalIterator.next() &#123;</span></span><br><span class="line"><span class="comment">///         print(animal)</span></span><br><span class="line"><span class="comment">///     &#125;</span></span><br><span class="line"><span class="comment">///     // Prints &quot;Antelope&quot;</span></span><br><span class="line"><span class="comment">///     // Prints &quot;Butterfly&quot;</span></span><br><span class="line"><span class="comment">///     // Prints &quot;Camel&quot;</span></span><br><span class="line"><span class="comment">///     // Prints &quot;Dolphin&quot;</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// The call to `animals.makeIterator()` returns an instance of the array&#x27;s</span></span><br><span class="line"><span class="comment">/// iterator. Next, the `while` loop calls the iterator&#x27;s `next()` method</span></span><br><span class="line"><span class="comment">/// repeatedly, binding each element that is returned to `animal` and exiting</span></span><br><span class="line"><span class="comment">/// when the `next()` method returns `nil`.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Using Iterators Directly</span></span><br><span class="line"><span class="comment">/// ========================</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// You rarely need to use iterators directly, because a `for`-`in` loop is the</span></span><br><span class="line"><span class="comment">/// more idiomatic approach to traversing a sequence in Swift. Some</span></span><br><span class="line"><span class="comment">/// algorithms, however, may call for direct iterator use.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// One example is the `reduce1(_:)` method. Similar to the `reduce(_:_:)`</span></span><br><span class="line"><span class="comment">/// method defined in the standard library, which takes an initial value and a</span></span><br><span class="line"><span class="comment">/// combining closure, `reduce1(_:)` uses the first element of the sequence as</span></span><br><span class="line"><span class="comment">/// the initial value.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Here&#x27;s an implementation of the `reduce1(_:)` method. The sequence&#x27;s</span></span><br><span class="line"><span class="comment">/// iterator is used directly to retrieve the initial value before looping</span></span><br><span class="line"><span class="comment">/// over the rest of the sequence.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">///     extension Sequence &#123;</span></span><br><span class="line"><span class="comment">///         func reduce1(</span></span><br><span class="line"><span class="comment">///             _ nextPartialResult: (Element, Element) -&gt; Element</span></span><br><span class="line"><span class="comment">///         ) -&gt; Element?</span></span><br><span class="line"><span class="comment">///         &#123;</span></span><br><span class="line"><span class="comment">///             var i = makeIterator()</span></span><br><span class="line"><span class="comment">///             guard var accumulated = i.next() else &#123;</span></span><br><span class="line"><span class="comment">///                 return nil</span></span><br><span class="line"><span class="comment">///             &#125;</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">///             while let element = i.next() &#123;</span></span><br><span class="line"><span class="comment">///                 accumulated = nextPartialResult(accumulated, element)</span></span><br><span class="line"><span class="comment">///             &#125;</span></span><br><span class="line"><span class="comment">///             return accumulated</span></span><br><span class="line"><span class="comment">///         &#125;</span></span><br><span class="line"><span class="comment">///     &#125;</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// The `reduce1(_:)` method makes certain kinds of sequence operations</span></span><br><span class="line"><span class="comment">/// simpler. Here&#x27;s how to find the longest string in a sequence, using the</span></span><br><span class="line"><span class="comment">/// `animals` array introduced earlier as an example:</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">///     let longestAnimal = animals.reduce1 &#123; current, element in</span></span><br><span class="line"><span class="comment">///         if current.count &gt; element.count &#123;</span></span><br><span class="line"><span class="comment">///             return current</span></span><br><span class="line"><span class="comment">///         &#125; else &#123;</span></span><br><span class="line"><span class="comment">///             return element</span></span><br><span class="line"><span class="comment">///         &#125;</span></span><br><span class="line"><span class="comment">///     &#125;</span></span><br><span class="line"><span class="comment">///     print(longestAnimal)</span></span><br><span class="line"><span class="comment">///     // Prints &quot;Butterfly&quot;</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Using Multiple Iterators</span></span><br><span class="line"><span class="comment">/// ========================</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Whenever you use multiple iterators (or `for`-`in` loops) over a single</span></span><br><span class="line"><span class="comment">/// sequence, be sure you know that the specific sequence supports repeated</span></span><br><span class="line"><span class="comment">/// iteration, either because you know its concrete type or because the</span></span><br><span class="line"><span class="comment">/// sequence is also constrained to the `Collection` protocol.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Obtain each separate iterator from separate calls to the sequence&#x27;s</span></span><br><span class="line"><span class="comment">/// `makeIterator()` method rather than by copying. Copying an iterator is</span></span><br><span class="line"><span class="comment">/// safe, but advancing one copy of an iterator by calling its `next()` method</span></span><br><span class="line"><span class="comment">/// may invalidate other copies of that iterator. `for`-`in` loops are safe in</span></span><br><span class="line"><span class="comment">/// this regard.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Adding IteratorProtocol Conformance to Your Type</span></span><br><span class="line"><span class="comment">/// ================================================</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Implementing an iterator that conforms to `IteratorProtocol` is simple.</span></span><br><span class="line"><span class="comment">/// Declare a `next()` method that advances one step in the related sequence</span></span><br><span class="line"><span class="comment">/// and returns the current element. When the sequence has been exhausted, the</span></span><br><span class="line"><span class="comment">/// `next()` method returns `nil`.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// For example, consider a custom `Countdown` sequence. You can initialize the</span></span><br><span class="line"><span class="comment">/// `Countdown` sequence with a starting integer and then iterate over the</span></span><br><span class="line"><span class="comment">/// count down to zero. The `Countdown` structure&#x27;s definition is short: It</span></span><br><span class="line"><span class="comment">/// contains only the starting count and the `makeIterator()` method required</span></span><br><span class="line"><span class="comment">/// by the `Sequence` protocol.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">///     struct Countdown: Sequence &#123;</span></span><br><span class="line"><span class="comment">///         let start: Int</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">///         func makeIterator() -&gt; CountdownIterator &#123;</span></span><br><span class="line"><span class="comment">///             return CountdownIterator(self)</span></span><br><span class="line"><span class="comment">///         &#125;</span></span><br><span class="line"><span class="comment">///     &#125;</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// The `makeIterator()` method returns another custom type, an iterator named</span></span><br><span class="line"><span class="comment">/// `CountdownIterator`. The `CountdownIterator` type keeps track of both the</span></span><br><span class="line"><span class="comment">/// `Countdown` sequence that it&#x27;s iterating and the number of times it has</span></span><br><span class="line"><span class="comment">/// returned a value.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">///     struct CountdownIterator: IteratorProtocol &#123;</span></span><br><span class="line"><span class="comment">///         let countdown: Countdown</span></span><br><span class="line"><span class="comment">///         var times = 0</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">///         init(_ countdown: Countdown) &#123;</span></span><br><span class="line"><span class="comment">///             self.countdown = countdown</span></span><br><span class="line"><span class="comment">///         &#125;</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">///         mutating func next() -&gt; Int? &#123;</span></span><br><span class="line"><span class="comment">///             let nextNumber = countdown.start - times</span></span><br><span class="line"><span class="comment">///             guard nextNumber &gt; 0</span></span><br><span class="line"><span class="comment">///                 else &#123; return nil &#125;</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">///             times += 1</span></span><br><span class="line"><span class="comment">///             return nextNumber</span></span><br><span class="line"><span class="comment">///         &#125;</span></span><br><span class="line"><span class="comment">///     &#125;</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Each time the `next()` method is called on a `CountdownIterator` instance,</span></span><br><span class="line"><span class="comment">/// it calculates the new next value, checks to see whether it has reached</span></span><br><span class="line"><span class="comment">/// zero, and then returns either the number, or `nil` if the iterator is</span></span><br><span class="line"><span class="comment">/// finished returning elements of the sequence.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Creating and iterating over a `Countdown` sequence uses a</span></span><br><span class="line"><span class="comment">/// `CountdownIterator` to handle the iteration.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">///     let threeTwoOne = Countdown(start: 3)</span></span><br><span class="line"><span class="comment">///     for count in threeTwoOne &#123;</span></span><br><span class="line"><span class="comment">///         print(&quot;\(count)...&quot;)</span></span><br><span class="line"><span class="comment">///     &#125;</span></span><br><span class="line"><span class="comment">///     // Prints &quot;3...&quot;</span></span><br><span class="line"><span class="comment">///     // Prints &quot;2...&quot;</span></span><br><span class="line"><span class="comment">///     // Prints &quot;1...&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">IteratorProtocol</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// The type of element traversed by the iterator.</span></span><br><span class="line">  <span class="keyword">associatedtype</span> <span class="type">Element</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Advances to the next element and returns it, or `nil` if no next element</span></span><br><span class="line">  <span class="comment">/// exists.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// Repeatedly calling this method returns, in order, all the elements of the</span></span><br><span class="line">  <span class="comment">/// underlying sequence. As soon as the sequence has run out of elements, all</span></span><br><span class="line">  <span class="comment">/// subsequent calls return `nil`.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// You must not call this method if any other copy of this iterator has been</span></span><br><span class="line">  <span class="comment">/// advanced with a call to its `next()` method.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// The following example shows how an iterator can be used explicitly to</span></span><br><span class="line">  <span class="comment">/// emulate a `for`-`in` loop. First, retrieve a sequence&#x27;s iterator, and</span></span><br><span class="line">  <span class="comment">/// then call the iterator&#x27;s `next()` method until it returns `nil`.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">///     let numbers = [2, 3, 5, 7]</span></span><br><span class="line">  <span class="comment">///     var numbersIterator = numbers.makeIterator()</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">///     while let num = numbersIterator.next() &#123;</span></span><br><span class="line">  <span class="comment">///         print(num)</span></span><br><span class="line">  <span class="comment">///     &#125;</span></span><br><span class="line">  <span class="comment">///     // Prints &quot;2&quot;</span></span><br><span class="line">  <span class="comment">///     // Prints &quot;3&quot;</span></span><br><span class="line">  <span class="comment">///     // Prints &quot;5&quot;</span></span><br><span class="line">  <span class="comment">///     // Prints &quot;7&quot;</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Returns: The next element in the underlying sequence, if a next element</span></span><br><span class="line">  <span class="comment">///   exists; otherwise, `nil`.</span></span><br><span class="line">  <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">next</span><span class="params">()</span></span> -&gt; <span class="type">Element?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// A type that provides sequential, iterated access to its elements.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// A sequence is a list of values that you can step through one at a time. The</span></span><br><span class="line"><span class="comment">/// most common way to iterate over the elements of a sequence is to use a</span></span><br><span class="line"><span class="comment">/// `for`-`in` loop:</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">///     let oneTwoThree = 1...3</span></span><br><span class="line"><span class="comment">///     for number in oneTwoThree &#123;</span></span><br><span class="line"><span class="comment">///         print(number)</span></span><br><span class="line"><span class="comment">///     &#125;</span></span><br><span class="line"><span class="comment">///     // Prints &quot;1&quot;</span></span><br><span class="line"><span class="comment">///     // Prints &quot;2&quot;</span></span><br><span class="line"><span class="comment">///     // Prints &quot;3&quot;</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// While seemingly simple, this capability gives you access to a large number</span></span><br><span class="line"><span class="comment">/// of operations that you can perform on any sequence. As an example, to</span></span><br><span class="line"><span class="comment">/// check whether a sequence includes a particular value, you can test each</span></span><br><span class="line"><span class="comment">/// value sequentially until you&#x27;ve found a match or reached the end of the</span></span><br><span class="line"><span class="comment">/// sequence. This example checks to see whether a particular insect is in an</span></span><br><span class="line"><span class="comment">/// array.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">///     let bugs = [&quot;Aphid&quot;, &quot;Bumblebee&quot;, &quot;Cicada&quot;, &quot;Damselfly&quot;, &quot;Earwig&quot;]</span></span><br><span class="line"><span class="comment">///     var hasMosquito = false</span></span><br><span class="line"><span class="comment">///     for bug in bugs &#123;</span></span><br><span class="line"><span class="comment">///         if bug == &quot;Mosquito&quot; &#123;</span></span><br><span class="line"><span class="comment">///             hasMosquito = true</span></span><br><span class="line"><span class="comment">///             break</span></span><br><span class="line"><span class="comment">///         &#125;</span></span><br><span class="line"><span class="comment">///     &#125;</span></span><br><span class="line"><span class="comment">///     print(&quot;&#x27;bugs&#x27; has a mosquito: \(hasMosquito)&quot;)</span></span><br><span class="line"><span class="comment">///     // Prints &quot;&#x27;bugs&#x27; has a mosquito: false&quot;</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// The `Sequence` protocol provides default implementations for many common</span></span><br><span class="line"><span class="comment">/// operations that depend on sequential access to a sequence&#x27;s values. For</span></span><br><span class="line"><span class="comment">/// clearer, more concise code, the example above could use the array&#x27;s</span></span><br><span class="line"><span class="comment">/// `contains(_:)` method, which every sequence inherits from `Sequence`,</span></span><br><span class="line"><span class="comment">/// instead of iterating manually:</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">///     if bugs.contains(&quot;Mosquito&quot;) &#123;</span></span><br><span class="line"><span class="comment">///         print(&quot;Break out the bug spray.&quot;)</span></span><br><span class="line"><span class="comment">///     &#125; else &#123;</span></span><br><span class="line"><span class="comment">///         print(&quot;Whew, no mosquitos!&quot;)</span></span><br><span class="line"><span class="comment">///     &#125;</span></span><br><span class="line"><span class="comment">///     // Prints &quot;Whew, no mosquitos!&quot;</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Repeated Access</span></span><br><span class="line"><span class="comment">/// ===============</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// The `Sequence` protocol makes no requirement on conforming types regarding</span></span><br><span class="line"><span class="comment">/// whether they will be destructively consumed by iteration. As a</span></span><br><span class="line"><span class="comment">/// consequence, don&#x27;t assume that multiple `for`-`in` loops on a sequence</span></span><br><span class="line"><span class="comment">/// will either resume iteration or restart from the beginning:</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">///     for element in sequence &#123;</span></span><br><span class="line"><span class="comment">///         if ... some condition &#123; break &#125;</span></span><br><span class="line"><span class="comment">///     &#125;</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">///     for element in sequence &#123;</span></span><br><span class="line"><span class="comment">///         // No defined behavior</span></span><br><span class="line"><span class="comment">///     &#125;</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// In this case, you cannot assume either that a sequence will be consumable</span></span><br><span class="line"><span class="comment">/// and will resume iteration, or that a sequence is a collection and will</span></span><br><span class="line"><span class="comment">/// restart iteration from the first element. A conforming sequence that is</span></span><br><span class="line"><span class="comment">/// not a collection is allowed to produce an arbitrary sequence of elements</span></span><br><span class="line"><span class="comment">/// in the second `for`-`in` loop.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// To establish that a type you&#x27;ve created supports nondestructive iteration,</span></span><br><span class="line"><span class="comment">/// add conformance to the `Collection` protocol.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Conforming to the Sequence Protocol</span></span><br><span class="line"><span class="comment">/// ===================================</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Making your own custom types conform to `Sequence` enables many useful</span></span><br><span class="line"><span class="comment">/// operations, like `for`-`in` looping and the `contains` method, without</span></span><br><span class="line"><span class="comment">/// much effort. To add `Sequence` conformance to your own custom type, add a</span></span><br><span class="line"><span class="comment">/// `makeIterator()` method that returns an iterator.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Alternatively, if your type can act as its own iterator, implementing the</span></span><br><span class="line"><span class="comment">/// requirements of the `IteratorProtocol` protocol and declaring conformance</span></span><br><span class="line"><span class="comment">/// to both `Sequence` and `IteratorProtocol` are sufficient.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Here&#x27;s a definition of a `Countdown` sequence that serves as its own</span></span><br><span class="line"><span class="comment">/// iterator. The `makeIterator()` method is provided as a default</span></span><br><span class="line"><span class="comment">/// implementation.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">///     struct Countdown: Sequence, IteratorProtocol &#123;</span></span><br><span class="line"><span class="comment">///         var count: Int</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">///         mutating func next() -&gt; Int? &#123;</span></span><br><span class="line"><span class="comment">///             if count == 0 &#123;</span></span><br><span class="line"><span class="comment">///                 return nil</span></span><br><span class="line"><span class="comment">///             &#125; else &#123;</span></span><br><span class="line"><span class="comment">///                 defer &#123; count -= 1 &#125;</span></span><br><span class="line"><span class="comment">///                 return count</span></span><br><span class="line"><span class="comment">///             &#125;</span></span><br><span class="line"><span class="comment">///         &#125;</span></span><br><span class="line"><span class="comment">///     &#125;</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">///     let threeToGo = Countdown(count: 3)</span></span><br><span class="line"><span class="comment">///     for i in threeToGo &#123;</span></span><br><span class="line"><span class="comment">///         print(i)</span></span><br><span class="line"><span class="comment">///     &#125;</span></span><br><span class="line"><span class="comment">///     // Prints &quot;3&quot;</span></span><br><span class="line"><span class="comment">///     // Prints &quot;2&quot;</span></span><br><span class="line"><span class="comment">///     // Prints &quot;1&quot;</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Expected Performance</span></span><br><span class="line"><span class="comment">/// ====================</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// A sequence should provide its iterator in O(1). The `Sequence` protocol</span></span><br><span class="line"><span class="comment">/// makes no other requirements about element access, so routines that</span></span><br><span class="line"><span class="comment">/// traverse a sequence should be considered O(*n*) unless documented</span></span><br><span class="line"><span class="comment">/// otherwise.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// A type representing the sequence&#x27;s elements.</span></span><br><span class="line">  <span class="keyword">associatedtype</span> <span class="type">Element</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// A type that provides the sequence&#x27;s iteration interface and</span></span><br><span class="line">  <span class="comment">/// encapsulates its iteration state.</span></span><br><span class="line">  <span class="keyword">associatedtype</span> <span class="type">Iterator</span>: <span class="type">IteratorProtocol</span> <span class="keyword">where</span> <span class="type">Iterator</span>.<span class="type">Element</span> == <span class="type">Element</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// A type that represents a subsequence of some of the sequence&#x27;s elements.</span></span><br><span class="line">  <span class="comment">// associatedtype SubSequence: Sequence = AnySequence&lt;Element&gt;</span></span><br><span class="line">  <span class="comment">//   where Element == SubSequence.Element,</span></span><br><span class="line">  <span class="comment">//         SubSequence.SubSequence == SubSequence</span></span><br><span class="line">  <span class="comment">// typealias SubSequence = AnySequence&lt;Element&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Returns an iterator over the elements of this sequence.</span></span><br><span class="line">  __consuming <span class="function"><span class="keyword">func</span> <span class="title">makeIterator</span><span class="params">()</span></span> -&gt; <span class="type">Iterator</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// A value less than or equal to the number of elements in the sequence,</span></span><br><span class="line">  <span class="comment">/// calculated nondestructively.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// The default implementation returns 0. If you provide your own</span></span><br><span class="line">  <span class="comment">/// implementation, make sure to compute the value nondestructively.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Complexity: O(1), except if the sequence also conforms to `Collection`.</span></span><br><span class="line">  <span class="comment">///   In this case, see the documentation of `Collection.underestimatedCount`.</span></span><br><span class="line">  <span class="keyword">var</span> underestimatedCount: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">_customContainsEquatableElement</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="number">_</span> element: Element</span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span> -&gt; <span class="type">Bool?</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Create a native array buffer containing the elements of `self`,</span></span><br><span class="line">  <span class="comment">/// in the same order.</span></span><br><span class="line">  __consuming <span class="function"><span class="keyword">func</span> <span class="title">_copyToContiguousArray</span><span class="params">()</span></span> -&gt; <span class="type">ContiguousArray</span>&lt;<span class="type">Element</span>&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Copy `self` into an unsafe buffer, returning a partially-consumed</span></span><br><span class="line">  <span class="comment">/// iterator with any elements that didn&#x27;t fit remaining.</span></span><br><span class="line">  __consuming <span class="function"><span class="keyword">func</span> <span class="title">_copyContents</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    initializing ptr: UnsafeMutableBufferPointer&lt;Element&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span> -&gt; (<span class="type">Iterator</span>,<span class="type">UnsafeMutableBufferPointer</span>&lt;<span class="type">Element</span>&gt;.<span class="type">Index</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// Call `body(p)`, where `p` is a pointer to the collection&#x27;s</span></span><br><span class="line">  <span class="comment">/// contiguous storage.  If no such storage exists, it is</span></span><br><span class="line">  <span class="comment">/// first created.  If the collection does not support an internal</span></span><br><span class="line">  <span class="comment">/// representation in a form of contiguous storage, `body` is not</span></span><br><span class="line">  <span class="comment">/// called and `nil` is returned.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// A `Collection` that provides its own implementation of this method</span></span><br><span class="line">  <span class="comment">/// must also guarantee that an equivalent buffer of its `SubSequence` </span></span><br><span class="line">  <span class="comment">/// can be generated by advancing the pointer by the distance to the</span></span><br><span class="line">  <span class="comment">/// slice&#x27;s `startIndex`.</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">withContiguousStorageIfAvailable</span>&lt;R&gt;<span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="number">_</span> body: <span class="params">(UnsafeBufferPointer&lt;Element&gt;)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">R</span></span><br><span class="line">  ) <span class="keyword">rethrows</span> -&gt; <span class="type">R?</span>  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Provides a default associated type witness for Iterator when the</span></span><br><span class="line"><span class="comment">// Self type is both a Sequence and an Iterator.</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Sequence</span> <span class="title">where</span> <span class="title">Self</span>: <span class="title">IteratorProtocol</span> </span>&#123;</span><br><span class="line">  <span class="comment">// @_implements(Sequence, Iterator)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">typealias</span> _Default_Iterator = <span class="type">Self</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// A default makeIterator() function for `IteratorProtocol` instances that</span></span><br><span class="line"><span class="comment">/// are declared to conform to `Sequence`</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Sequence</span> <span class="title">where</span> <span class="title">Self</span>.<span class="title">Iterator</span> == <span class="title">Self</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// Returns an iterator over the elements of this sequence.</span></span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> __consuming <span class="function"><span class="keyword">func</span> <span class="title">makeIterator</span><span class="params">()</span></span> -&gt; <span class="type">Self</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// A sequence that lazily consumes and drops `n` elements from an underlying</span></span><br><span class="line"><span class="comment">/// `Base` iterator before possibly returning the first available element.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// The underlying iterator&#x27;s sequence may be infinite.</span></span><br><span class="line">@frozen</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">DropFirstSequence</span>&lt;<span class="title">Base</span>: <span class="title">Sequence</span>&gt; </span>&#123;</span><br><span class="line">  @usableFromInline</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">let</span> _base: <span class="type">Base</span></span><br><span class="line">  @usableFromInline</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">let</span> _limit: <span class="type">Int</span></span><br><span class="line">  </span><br><span class="line">  @inlinable </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> base: <span class="type">Base</span>, dropping limit: <span class="type">Int</span>) &#123;</span><br><span class="line">    _precondition(limit &gt;= <span class="number">0</span>, </span><br><span class="line">      <span class="string">&quot;Can&#x27;t drop a negative number of elements from a sequence&quot;</span>)</span><br><span class="line">    _base = base</span><br><span class="line">    _limit = limit</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">DropFirstSequence</span>: <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">Element</span> = <span class="type">Base</span>.<span class="type">Element</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">Iterator</span> = <span class="type">Base</span>.<span class="type">Iterator</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">SubSequence</span> = <span class="type">AnySequence</span>&lt;<span class="type">Element</span>&gt;</span><br><span class="line">  </span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> __consuming <span class="function"><span class="keyword">func</span> <span class="title">makeIterator</span><span class="params">()</span></span> -&gt; <span class="type">Iterator</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> it = _base.makeIterator()</span><br><span class="line">    <span class="keyword">var</span> dropped = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> dropped &lt; _limit, it.next() != <span class="literal">nil</span> &#123; dropped &amp;+= <span class="number">1</span> &#125;</span><br><span class="line">    <span class="keyword">return</span> it</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> __consuming <span class="function"><span class="keyword">func</span> <span class="title">dropFirst</span><span class="params">(<span class="number">_</span> k: Int)</span></span> -&gt; <span class="type">DropFirstSequence</span>&lt;<span class="type">Base</span>&gt; &#123;</span><br><span class="line">    <span class="comment">// If this is already a _DropFirstSequence, we need to fold in</span></span><br><span class="line">    <span class="comment">// the current drop count and drop limit so no data is lost.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// i.e. [1,2,3,4].dropFirst(1).dropFirst(1) should be equivalent to</span></span><br><span class="line">    <span class="comment">// [1,2,3,4].dropFirst(2).</span></span><br><span class="line">    <span class="keyword">return</span> <span class="type">DropFirstSequence</span>(_base, dropping: _limit + k)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// A sequence that only consumes up to `n` elements from an underlying</span></span><br><span class="line"><span class="comment">/// `Base` iterator.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// The underlying iterator&#x27;s sequence may be infinite.</span></span><br><span class="line">@frozen</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">PrefixSequence</span>&lt;<span class="title">Base</span>: <span class="title">Sequence</span>&gt; </span>&#123;</span><br><span class="line">  @usableFromInline</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> _base: <span class="type">Base</span></span><br><span class="line">  @usableFromInline</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">let</span> _maxLength: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> base: <span class="type">Base</span>, maxLength: <span class="type">Int</span>) &#123;</span><br><span class="line">    _precondition(maxLength &gt;= <span class="number">0</span>, <span class="string">&quot;Can&#x27;t take a prefix of negative length&quot;</span>)</span><br><span class="line">    _base = base</span><br><span class="line">    _maxLength = maxLength</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">PrefixSequence</span> </span>&#123;</span><br><span class="line">  @frozen</span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    @usableFromInline</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> _base: <span class="type">Base</span>.<span class="type">Iterator</span></span><br><span class="line">    @usableFromInline</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> _remaining: <span class="type">Int</span></span><br><span class="line">    </span><br><span class="line">    @inlinable</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">init</span>(<span class="number">_</span> base: <span class="type">Base</span>.<span class="type">Iterator</span>, maxLength: <span class="type">Int</span>) &#123;</span><br><span class="line">      _base = base</span><br><span class="line">      _remaining = maxLength</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">PrefixSequence</span>.<span class="title">Iterator</span>: <span class="title">IteratorProtocol</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">Element</span> = <span class="type">Base</span>.<span class="type">Element</span></span><br><span class="line">  </span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">next</span><span class="params">()</span></span> -&gt; <span class="type">Element?</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> _remaining != <span class="number">0</span> &#123;</span><br><span class="line">      _remaining &amp;-= <span class="number">1</span></span><br><span class="line">      <span class="keyword">return</span> _base.next()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">PrefixSequence</span>: <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> __consuming <span class="function"><span class="keyword">func</span> <span class="title">makeIterator</span><span class="params">()</span></span> -&gt; <span class="type">Iterator</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Iterator</span>(_base.makeIterator(), maxLength: _maxLength)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> __consuming <span class="function"><span class="keyword">func</span> <span class="title">prefix</span><span class="params">(<span class="number">_</span> maxLength: Int)</span></span> -&gt; <span class="type">PrefixSequence</span>&lt;<span class="type">Base</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> length = <span class="type">Swift</span>.<span class="built_in">min</span>(maxLength, <span class="keyword">self</span>._maxLength)</span><br><span class="line">    <span class="keyword">return</span> <span class="type">PrefixSequence</span>(_base, maxLength: length)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// A sequence that lazily consumes and drops `n` elements from an underlying</span></span><br><span class="line"><span class="comment">/// `Base` iterator before possibly returning the first available element.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// The underlying iterator&#x27;s sequence may be infinite.</span></span><br><span class="line">@frozen</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">DropWhileSequence</span>&lt;<span class="title">Base</span>: <span class="title">Sequence</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">Element</span> = <span class="type">Base</span>.<span class="type">Element</span></span><br><span class="line">  </span><br><span class="line">  @usableFromInline</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> _iterator: <span class="type">Base</span>.<span class="type">Iterator</span></span><br><span class="line">  @usableFromInline</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> _nextElement: <span class="type">Element?</span></span><br><span class="line">  </span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">init</span>(iterator: <span class="type">Base</span>.<span class="type">Iterator</span>, predicate: (<span class="type">Element</span>) <span class="keyword">throws</span> -&gt; <span class="type">Bool</span>) <span class="keyword">rethrows</span> &#123;</span><br><span class="line">    _iterator = iterator</span><br><span class="line">    _nextElement = _iterator.next()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">let</span> x = _nextElement, <span class="keyword">try</span> predicate(x) &#123;</span><br><span class="line">      _nextElement = _iterator.next()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">init</span>(<span class="number">_</span> base: <span class="type">Base</span>, predicate: (<span class="type">Element</span>) <span class="keyword">throws</span> -&gt; <span class="type">Bool</span>) <span class="keyword">rethrows</span> &#123;</span><br><span class="line">    <span class="keyword">self</span> = <span class="keyword">try</span> <span class="type">DropWhileSequence</span>(iterator: base.makeIterator(), predicate: predicate)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">DropWhileSequence</span> </span>&#123;</span><br><span class="line">  @frozen</span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    @usableFromInline</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> _iterator: <span class="type">Base</span>.<span class="type">Iterator</span></span><br><span class="line">    @usableFromInline</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> _nextElement: <span class="type">Element?</span></span><br><span class="line">    </span><br><span class="line">    @inlinable</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">init</span>(<span class="number">_</span> iterator: <span class="type">Base</span>.<span class="type">Iterator</span>, nextElement: <span class="type">Element?</span>) &#123;</span><br><span class="line">      _iterator = iterator</span><br><span class="line">      _nextElement = nextElement</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">DropWhileSequence</span>.<span class="title">Iterator</span>: <span class="title">IteratorProtocol</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">Element</span> = <span class="type">Base</span>.<span class="type">Element</span></span><br><span class="line">  </span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">next</span><span class="params">()</span></span> -&gt; <span class="type">Element?</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> next = _nextElement <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">    _nextElement = _iterator.next()</span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">DropWhileSequence</span>: <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">makeIterator</span><span class="params">()</span></span> -&gt; <span class="type">Iterator</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Iterator</span>(_iterator, nextElement: _nextElement)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> __consuming <span class="function"><span class="keyword">func</span> <span class="title">drop</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">while</span> predicate: <span class="params">(Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Bool</span></span><br><span class="line">  ) <span class="keyword">rethrows</span> -&gt; <span class="type">DropWhileSequence</span>&lt;<span class="type">Base</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> x = _nextElement, <span class="keyword">try</span> predicate(x) <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="keyword">self</span> &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">try</span> <span class="type">DropWhileSequence</span>(iterator: _iterator, predicate: predicate)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//===----------------------------------------------------------------------===//</span></span><br><span class="line"><span class="comment">// Default implementations for Sequence</span></span><br><span class="line"><span class="comment">//===----------------------------------------------------------------------===//</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// Returns an array containing the results of mapping the given closure</span></span><br><span class="line">  <span class="comment">/// over the sequence&#x27;s elements.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// In this example, `map` is used first to convert the names in the array</span></span><br><span class="line">  <span class="comment">/// to lowercase strings and then to count their characters.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">///     let cast = [&quot;Vivien&quot;, &quot;Marlon&quot;, &quot;Kim&quot;, &quot;Karl&quot;]</span></span><br><span class="line">  <span class="comment">///     let lowercaseNames = cast.map &#123; $0.lowercased() &#125;</span></span><br><span class="line">  <span class="comment">///     // &#x27;lowercaseNames&#x27; == [&quot;vivien&quot;, &quot;marlon&quot;, &quot;kim&quot;, &quot;karl&quot;]</span></span><br><span class="line">  <span class="comment">///     let letterCounts = cast.map &#123; $0.count &#125;</span></span><br><span class="line">  <span class="comment">///     // &#x27;letterCounts&#x27; == [6, 6, 3, 4]</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Parameter transform: A mapping closure. `transform` accepts an</span></span><br><span class="line">  <span class="comment">///   element of this sequence as its parameter and returns a transformed</span></span><br><span class="line">  <span class="comment">///   value of the same or of a different type.</span></span><br><span class="line">  <span class="comment">/// - Returns: An array containing the transformed elements of this</span></span><br><span class="line">  <span class="comment">///   sequence.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Complexity: O(*n*), where *n* is the length of the sequence.</span></span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;T&gt;<span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="number">_</span> transform: <span class="params">(Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">T</span></span><br><span class="line">  ) <span class="keyword">rethrows</span> -&gt; [<span class="type">T</span>] &#123;</span><br><span class="line">    <span class="keyword">let</span> initialCapacity = underestimatedCount</span><br><span class="line">    <span class="keyword">var</span> result = <span class="type">ContiguousArray</span>&lt;<span class="type">T</span>&gt;()</span><br><span class="line">    result.reserveCapacity(initialCapacity)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> iterator = <span class="keyword">self</span>.makeIterator()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add elements up to the initial capacity without checking for regrowth.</span></span><br><span class="line">    <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;initialCapacity &#123;</span><br><span class="line">      result.append(<span class="keyword">try</span> transform(iterator.next()!))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Add remaining elements, if any.</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">let</span> element = iterator.next() &#123;</span><br><span class="line">      result.append(<span class="keyword">try</span> transform(element))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Array</span>(result)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Returns an array containing, in order, the elements of the sequence</span></span><br><span class="line">  <span class="comment">/// that satisfy the given predicate.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// In this example, `filter(_:)` is used to include only names shorter than</span></span><br><span class="line">  <span class="comment">/// five characters.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">///     let cast = [&quot;Vivien&quot;, &quot;Marlon&quot;, &quot;Kim&quot;, &quot;Karl&quot;]</span></span><br><span class="line">  <span class="comment">///     let shortNames = cast.filter &#123; $0.count &lt; 5 &#125;</span></span><br><span class="line">  <span class="comment">///     print(shortNames)</span></span><br><span class="line">  <span class="comment">///     // Prints &quot;[&quot;Kim&quot;, &quot;Karl&quot;]&quot;</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Parameter isIncluded: A closure that takes an element of the</span></span><br><span class="line">  <span class="comment">///   sequence as its argument and returns a Boolean value indicating</span></span><br><span class="line">  <span class="comment">///   whether the element should be included in the returned array.</span></span><br><span class="line">  <span class="comment">/// - Returns: An array of the elements that `isIncluded` allowed.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Complexity: O(*n*), where *n* is the length of the sequence.</span></span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> __consuming <span class="function"><span class="keyword">func</span> <span class="title">filter</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="number">_</span> isIncluded: <span class="params">(Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Bool</span></span><br><span class="line">  ) <span class="keyword">rethrows</span> -&gt; [<span class="type">Element</span>] &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">try</span> _filter(isIncluded)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @_transparent</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">_filter</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="number">_</span> isIncluded: <span class="params">(Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Bool</span></span><br><span class="line">  ) <span class="keyword">rethrows</span> -&gt; [<span class="type">Element</span>] &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result = <span class="type">ContiguousArray</span>&lt;<span class="type">Element</span>&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> iterator = <span class="keyword">self</span>.makeIterator()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">let</span> element = iterator.next() &#123;</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">try</span> isIncluded(element) &#123;</span><br><span class="line">        result.append(element)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="type">Array</span>(result)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// A value less than or equal to the number of elements in the sequence,</span></span><br><span class="line">  <span class="comment">/// calculated nondestructively.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// The default implementation returns 0. If you provide your own</span></span><br><span class="line">  <span class="comment">/// implementation, make sure to compute the value nondestructively.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Complexity: O(1), except if the sequence also conforms to `Collection`.</span></span><br><span class="line">  <span class="comment">///   In this case, see the documentation of `Collection.underestimatedCount`.</span></span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> underestimatedCount: <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @inlinable</span><br><span class="line">  @inline(__always)</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">_customContainsEquatableElement</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="number">_</span> element: Iterator.Element</span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span> -&gt; <span class="type">Bool?</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Calls the given closure on each element in the sequence in the same order</span></span><br><span class="line">  <span class="comment">/// as a `for`-`in` loop.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// The two loops in the following example produce the same output:</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">///     let numberWords = [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]</span></span><br><span class="line">  <span class="comment">///     for word in numberWords &#123;</span></span><br><span class="line">  <span class="comment">///         print(word)</span></span><br><span class="line">  <span class="comment">///     &#125;</span></span><br><span class="line">  <span class="comment">///     // Prints &quot;one&quot;</span></span><br><span class="line">  <span class="comment">///     // Prints &quot;two&quot;</span></span><br><span class="line">  <span class="comment">///     // Prints &quot;three&quot;</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">///     numberWords.forEach &#123; word in</span></span><br><span class="line">  <span class="comment">///         print(word)</span></span><br><span class="line">  <span class="comment">///     &#125;</span></span><br><span class="line">  <span class="comment">///     // Same as above</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// Using the `forEach` method is distinct from a `for`-`in` loop in two</span></span><br><span class="line">  <span class="comment">/// important ways:</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// 1. You cannot use a `break` or `continue` statement to exit the current</span></span><br><span class="line">  <span class="comment">///    call of the `body` closure or skip subsequent calls.</span></span><br><span class="line">  <span class="comment">/// 2. Using the `return` statement in the `body` closure will exit only from</span></span><br><span class="line">  <span class="comment">///    the current call to `body`, not from any outer scope, and won&#x27;t skip</span></span><br><span class="line">  <span class="comment">///    subsequent calls.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Parameter body: A closure that takes an element of the sequence as a</span></span><br><span class="line">  <span class="comment">///   parameter.</span></span><br><span class="line">  @_semantics(<span class="string">&quot;sequence.forEach&quot;</span>)</span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">forEach</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="number">_</span> body: <span class="params">(Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Void</span></span><br><span class="line">  ) <span class="keyword">rethrows</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> <span class="keyword">self</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> body(element)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// Returns the first element of the sequence that satisfies the given</span></span><br><span class="line">  <span class="comment">/// predicate.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// The following example uses the `first(where:)` method to find the first</span></span><br><span class="line">  <span class="comment">/// negative number in an array of integers:</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">///     let numbers = [3, 7, 4, -2, 9, -6, 10, 1]</span></span><br><span class="line">  <span class="comment">///     if let firstNegative = numbers.first(where: &#123; $0 &lt; 0 &#125;) &#123;</span></span><br><span class="line">  <span class="comment">///         print(&quot;The first negative number is \(firstNegative).&quot;)</span></span><br><span class="line">  <span class="comment">///     &#125;</span></span><br><span class="line">  <span class="comment">///     // Prints &quot;The first negative number is -2.&quot;</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Parameter predicate: A closure that takes an element of the sequence as</span></span><br><span class="line">  <span class="comment">///   its argument and returns a Boolean value indicating whether the</span></span><br><span class="line">  <span class="comment">///   element is a match.</span></span><br><span class="line">  <span class="comment">/// - Returns: The first element of the sequence that satisfies `predicate`,</span></span><br><span class="line">  <span class="comment">///   or `nil` if there is no element that satisfies `predicate`.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Complexity: O(*n*), where *n* is the length of the sequence.</span></span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">first</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">where</span> predicate: <span class="params">(Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Bool</span></span><br><span class="line">  ) <span class="keyword">rethrows</span> -&gt; <span class="type">Element?</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> <span class="keyword">self</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">try</span> predicate(element) &#123;</span><br><span class="line">        <span class="keyword">return</span> element</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Sequence</span> <span class="title">where</span> <span class="title">Element</span>: <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// Returns the longest possible subsequences of the sequence, in order,</span></span><br><span class="line">  <span class="comment">/// around elements equal to the given element.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// The resulting array consists of at most `maxSplits + 1` subsequences.</span></span><br><span class="line">  <span class="comment">/// Elements that are used to split the sequence are not returned as part of</span></span><br><span class="line">  <span class="comment">/// any subsequence.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// The following examples show the effects of the `maxSplits` and</span></span><br><span class="line">  <span class="comment">/// `omittingEmptySubsequences` parameters when splitting a string at each</span></span><br><span class="line">  <span class="comment">/// space character (&quot; &quot;). The first use of `split` returns each word that</span></span><br><span class="line">  <span class="comment">/// was originally separated by one or more spaces.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">///     let line = &quot;BLANCHE:   I don&#x27;t want realism. I want magic!&quot;</span></span><br><span class="line">  <span class="comment">///     print(line.split(separator: &quot; &quot;)</span></span><br><span class="line">  <span class="comment">///               .map(String.init))</span></span><br><span class="line">  <span class="comment">///     // Prints &quot;[&quot;BLANCHE:&quot;, &quot;I&quot;, &quot;don\&#x27;t&quot;, &quot;want&quot;, &quot;realism.&quot;, &quot;I&quot;, &quot;want&quot;, &quot;magic!&quot;]&quot;</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// The second example passes `1` for the `maxSplits` parameter, so the</span></span><br><span class="line">  <span class="comment">/// original string is split just once, into two new strings.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">///     print(line.split(separator: &quot; &quot;, maxSplits: 1)</span></span><br><span class="line">  <span class="comment">///               .map(String.init))</span></span><br><span class="line">  <span class="comment">///     // Prints &quot;[&quot;BLANCHE:&quot;, &quot;  I don\&#x27;t want realism. I want magic!&quot;]&quot;</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// The final example passes `false` for the `omittingEmptySubsequences`</span></span><br><span class="line">  <span class="comment">/// parameter, so the returned array contains empty strings where spaces</span></span><br><span class="line">  <span class="comment">/// were repeated.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">///     print(line.split(separator: &quot; &quot;, omittingEmptySubsequences: false)</span></span><br><span class="line">  <span class="comment">///               .map(String.init))</span></span><br><span class="line">  <span class="comment">///     // Prints &quot;[&quot;BLANCHE:&quot;, &quot;&quot;, &quot;&quot;, &quot;I&quot;, &quot;don\&#x27;t&quot;, &quot;want&quot;, &quot;realism.&quot;, &quot;I&quot;, &quot;want&quot;, &quot;magic!&quot;]&quot;</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Parameters:</span></span><br><span class="line">  <span class="comment">///   - separator: The element that should be split upon.</span></span><br><span class="line">  <span class="comment">///   - maxSplits: The maximum number of times to split the sequence, or one</span></span><br><span class="line">  <span class="comment">///     less than the number of subsequences to return. If `maxSplits + 1`</span></span><br><span class="line">  <span class="comment">///     subsequences are returned, the last one is a suffix of the original</span></span><br><span class="line">  <span class="comment">///     sequence containing the remaining elements. `maxSplits` must be</span></span><br><span class="line">  <span class="comment">///     greater than or equal to zero. The default value is `Int.max`.</span></span><br><span class="line">  <span class="comment">///   - omittingEmptySubsequences: If `false`, an empty subsequence is</span></span><br><span class="line">  <span class="comment">///     returned in the result for each consecutive pair of `separator`</span></span><br><span class="line">  <span class="comment">///     elements in the sequence and for each instance of `separator` at the</span></span><br><span class="line">  <span class="comment">///     start or end of the sequence. If `true`, only nonempty subsequences</span></span><br><span class="line">  <span class="comment">///     are returned. The default value is `true`.</span></span><br><span class="line">  <span class="comment">/// - Returns: An array of subsequences, split from this sequence&#x27;s elements.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Complexity: O(*n*), where *n* is the length of the sequence.</span></span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> __consuming <span class="function"><span class="keyword">func</span> <span class="title">split</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    separator: Element,</span></span></span><br><span class="line"><span class="function"><span class="params">    maxSplits: Int = Int.<span class="built_in">max</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    omittingEmptySubsequences: Bool = <span class="literal">true</span></span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span> -&gt; [<span class="type">ArraySlice</span>&lt;<span class="type">Element</span>&gt;] &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">split</span>(</span><br><span class="line">      maxSplits: maxSplits,</span><br><span class="line">      omittingEmptySubsequences: omittingEmptySubsequences,</span><br><span class="line">      whereSeparator: &#123; $<span class="number">0</span> == separator &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Sequence</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Returns the longest possible subsequences of the sequence, in order, that</span></span><br><span class="line">  <span class="comment">/// don&#x27;t contain elements satisfying the given predicate. Elements that are</span></span><br><span class="line">  <span class="comment">/// used to split the sequence are not returned as part of any subsequence.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// The following examples show the effects of the `maxSplits` and</span></span><br><span class="line">  <span class="comment">/// `omittingEmptySubsequences` parameters when splitting a string using a</span></span><br><span class="line">  <span class="comment">/// closure that matches spaces. The first use of `split` returns each word</span></span><br><span class="line">  <span class="comment">/// that was originally separated by one or more spaces.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">///     let line = &quot;BLANCHE:   I don&#x27;t want realism. I want magic!&quot;</span></span><br><span class="line">  <span class="comment">///     print(line.split(whereSeparator: &#123; $0 == &quot; &quot; &#125;)</span></span><br><span class="line">  <span class="comment">///               .map(String.init))</span></span><br><span class="line">  <span class="comment">///     // Prints &quot;[&quot;BLANCHE:&quot;, &quot;I&quot;, &quot;don\&#x27;t&quot;, &quot;want&quot;, &quot;realism.&quot;, &quot;I&quot;, &quot;want&quot;, &quot;magic!&quot;]&quot;</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// The second example passes `1` for the `maxSplits` parameter, so the</span></span><br><span class="line">  <span class="comment">/// original string is split just once, into two new strings.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">///     print(</span></span><br><span class="line">  <span class="comment">///        line.split(maxSplits: 1, whereSeparator: &#123; $0 == &quot; &quot; &#125;)</span></span><br><span class="line">  <span class="comment">///                       .map(String.init))</span></span><br><span class="line">  <span class="comment">///     // Prints &quot;[&quot;BLANCHE:&quot;, &quot;  I don\&#x27;t want realism. I want magic!&quot;]&quot;</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// The final example passes `true` for the `allowEmptySlices` parameter, so</span></span><br><span class="line">  <span class="comment">/// the returned array contains empty strings where spaces were repeated.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">///     print(</span></span><br><span class="line">  <span class="comment">///         line.split(</span></span><br><span class="line">  <span class="comment">///             omittingEmptySubsequences: false,</span></span><br><span class="line">  <span class="comment">///             whereSeparator: &#123; $0 == &quot; &quot; &#125;</span></span><br><span class="line">  <span class="comment">///         ).map(String.init))</span></span><br><span class="line">  <span class="comment">///     // Prints &quot;[&quot;BLANCHE:&quot;, &quot;&quot;, &quot;&quot;, &quot;I&quot;, &quot;don\&#x27;t&quot;, &quot;want&quot;, &quot;realism.&quot;, &quot;I&quot;, &quot;want&quot;, &quot;magic!&quot;]&quot;</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Parameters:</span></span><br><span class="line">  <span class="comment">///   - maxSplits: The maximum number of times to split the sequence, or one</span></span><br><span class="line">  <span class="comment">///     less than the number of subsequences to return. If `maxSplits + 1`</span></span><br><span class="line">  <span class="comment">///     subsequences are returned, the last one is a suffix of the original</span></span><br><span class="line">  <span class="comment">///     sequence containing the remaining elements. `maxSplits` must be</span></span><br><span class="line">  <span class="comment">///     greater than or equal to zero. The default value is `Int.max`.</span></span><br><span class="line">  <span class="comment">///   - omittingEmptySubsequences: If `false`, an empty subsequence is</span></span><br><span class="line">  <span class="comment">///     returned in the result for each pair of consecutive elements</span></span><br><span class="line">  <span class="comment">///     satisfying the `isSeparator` predicate and for each element at the</span></span><br><span class="line">  <span class="comment">///     start or end of the sequence satisfying the `isSeparator` predicate.</span></span><br><span class="line">  <span class="comment">///     If `true`, only nonempty subsequences are returned. The default</span></span><br><span class="line">  <span class="comment">///     value is `true`.</span></span><br><span class="line">  <span class="comment">///   - isSeparator: A closure that returns `true` if its argument should be</span></span><br><span class="line">  <span class="comment">///     used to split the sequence; otherwise, `false`.</span></span><br><span class="line">  <span class="comment">/// - Returns: An array of subsequences, split from this sequence&#x27;s elements.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Complexity: O(*n*), where *n* is the length of the sequence.</span></span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> __consuming <span class="function"><span class="keyword">func</span> <span class="title">split</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    maxSplits: Int = Int.<span class="built_in">max</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    omittingEmptySubsequences: Bool = <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    whereSeparator isSeparator: <span class="params">(Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Bool</span></span><br><span class="line">  ) <span class="keyword">rethrows</span> -&gt; [<span class="type">ArraySlice</span>&lt;<span class="type">Element</span>&gt;] &#123;</span><br><span class="line">    _precondition(maxSplits &gt;= <span class="number">0</span>, <span class="string">&quot;Must take zero or more splits&quot;</span>)</span><br><span class="line">    <span class="keyword">let</span> whole = <span class="type">Array</span>(<span class="keyword">self</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">try</span> whole.<span class="built_in">split</span>(</span><br><span class="line">                  maxSplits: maxSplits, </span><br><span class="line">                  omittingEmptySubsequences: omittingEmptySubsequences, </span><br><span class="line">                  whereSeparator: isSeparator)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Returns a subsequence, up to the given maximum length, containing the</span></span><br><span class="line">  <span class="comment">/// final elements of the sequence.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// The sequence must be finite. If the maximum length exceeds the number of</span></span><br><span class="line">  <span class="comment">/// elements in the sequence, the result contains all the elements in the</span></span><br><span class="line">  <span class="comment">/// sequence.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">///     let numbers = [1, 2, 3, 4, 5]</span></span><br><span class="line">  <span class="comment">///     print(numbers.suffix(2))</span></span><br><span class="line">  <span class="comment">///     // Prints &quot;[4, 5]&quot;</span></span><br><span class="line">  <span class="comment">///     print(numbers.suffix(10))</span></span><br><span class="line">  <span class="comment">///     // Prints &quot;[1, 2, 3, 4, 5]&quot;</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Parameter maxLength: The maximum number of elements to return. The</span></span><br><span class="line">  <span class="comment">///   value of `maxLength` must be greater than or equal to zero.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Complexity: O(*n*), where *n* is the length of the sequence.</span></span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> __consuming <span class="function"><span class="keyword">func</span> <span class="title">suffix</span><span class="params">(<span class="number">_</span> maxLength: Int)</span></span> -&gt; [<span class="type">Element</span>] &#123;</span><br><span class="line">    _precondition(maxLength &gt;= <span class="number">0</span>, <span class="string">&quot;Can&#x27;t take a suffix of negative length from a sequence&quot;</span>)</span><br><span class="line">    <span class="keyword">guard</span> maxLength != <span class="number">0</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">FIXME:</span> &lt;rdar://problem/21885650&gt; Create reusable RingBuffer&lt;T&gt;</span></span><br><span class="line">    <span class="comment">// Put incoming elements into a ring buffer to save space. Once all</span></span><br><span class="line">    <span class="comment">// elements are consumed, reorder the ring buffer into a copy and return it.</span></span><br><span class="line">    <span class="comment">// This saves memory for sequences particularly longer than `maxLength`.</span></span><br><span class="line">    <span class="keyword">var</span> ringBuffer = <span class="type">ContiguousArray</span>&lt;<span class="type">Element</span>&gt;()</span><br><span class="line">    ringBuffer.reserveCapacity(<span class="type">Swift</span>.<span class="built_in">min</span>(maxLength, underestimatedCount))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> <span class="keyword">self</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> ringBuffer.<span class="built_in">count</span> &lt; maxLength &#123;</span><br><span class="line">        ringBuffer.append(element)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ringBuffer[i] = element</span><br><span class="line">        i = (i + <span class="number">1</span>) % maxLength</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i != ringBuffer.startIndex &#123;</span><br><span class="line">      <span class="keyword">var</span> rotated = <span class="type">ContiguousArray</span>&lt;<span class="type">Element</span>&gt;()</span><br><span class="line">      rotated.reserveCapacity(ringBuffer.<span class="built_in">count</span>)</span><br><span class="line">      rotated += ringBuffer[i..&lt;ringBuffer.endIndex]</span><br><span class="line">      rotated += ringBuffer[<span class="number">0</span>..&lt;i]</span><br><span class="line">      <span class="keyword">return</span> <span class="type">Array</span>(rotated)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="type">Array</span>(ringBuffer)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Returns a sequence containing all but the given number of initial</span></span><br><span class="line">  <span class="comment">/// elements.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// If the number of elements to drop exceeds the number of elements in</span></span><br><span class="line">  <span class="comment">/// the sequence, the result is an empty sequence.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">///     let numbers = [1, 2, 3, 4, 5]</span></span><br><span class="line">  <span class="comment">///     print(numbers.dropFirst(2))</span></span><br><span class="line">  <span class="comment">///     // Prints &quot;[3, 4, 5]&quot;</span></span><br><span class="line">  <span class="comment">///     print(numbers.dropFirst(10))</span></span><br><span class="line">  <span class="comment">///     // Prints &quot;[]&quot;</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Parameter k: The number of elements to drop from the beginning of</span></span><br><span class="line">  <span class="comment">///   the sequence. `k` must be greater than or equal to zero.</span></span><br><span class="line">  <span class="comment">/// - Returns: A sequence starting after the specified number of</span></span><br><span class="line">  <span class="comment">///   elements.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Complexity: O(1), with O(*k*) deferred to each iteration of the result,</span></span><br><span class="line">  <span class="comment">///   where *k* is the number of elements to drop from the beginning of</span></span><br><span class="line">  <span class="comment">///   the sequence.</span></span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> __consuming <span class="function"><span class="keyword">func</span> <span class="title">dropFirst</span><span class="params">(<span class="number">_</span> k: Int = <span class="number">1</span>)</span></span> -&gt; <span class="type">DropFirstSequence</span>&lt;<span class="type">Self</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">DropFirstSequence</span>(<span class="keyword">self</span>, dropping: k)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Returns a sequence containing all but the given number of final</span></span><br><span class="line">  <span class="comment">/// elements.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// The sequence must be finite. If the number of elements to drop exceeds</span></span><br><span class="line">  <span class="comment">/// the number of elements in the sequence, the result is an empty</span></span><br><span class="line">  <span class="comment">/// sequence.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">///     let numbers = [1, 2, 3, 4, 5]</span></span><br><span class="line">  <span class="comment">///     print(numbers.dropLast(2))</span></span><br><span class="line">  <span class="comment">///     // Prints &quot;[1, 2, 3]&quot;</span></span><br><span class="line">  <span class="comment">///     print(numbers.dropLast(10))</span></span><br><span class="line">  <span class="comment">///     // Prints &quot;[]&quot;</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Parameter n: The number of elements to drop off the end of the</span></span><br><span class="line">  <span class="comment">///   sequence. `n` must be greater than or equal to zero.</span></span><br><span class="line">  <span class="comment">/// - Returns: A sequence leaving off the specified number of elements.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Complexity: O(*n*), where *n* is the length of the sequence.</span></span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> __consuming <span class="function"><span class="keyword">func</span> <span class="title">dropLast</span><span class="params">(<span class="number">_</span> k: Int = <span class="number">1</span>)</span></span> -&gt; [<span class="type">Element</span>] &#123;</span><br><span class="line">    _precondition(k &gt;= <span class="number">0</span>, <span class="string">&quot;Can&#x27;t drop a negative number of elements from a sequence&quot;</span>)</span><br><span class="line">    <span class="keyword">guard</span> k != <span class="number">0</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="type">Array</span>(<span class="keyword">self</span>) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">FIXME:</span> &lt;rdar://problem/21885650&gt; Create reusable RingBuffer&lt;T&gt;</span></span><br><span class="line">    <span class="comment">// Put incoming elements from this sequence in a holding tank, a ring buffer</span></span><br><span class="line">    <span class="comment">// of size &lt;= k. If more elements keep coming in, pull them out of the</span></span><br><span class="line">    <span class="comment">// holding tank into the result, an `Array`. This saves</span></span><br><span class="line">    <span class="comment">// `k` * sizeof(Element) of memory, because slices keep the entire</span></span><br><span class="line">    <span class="comment">// memory of an `Array` alive.</span></span><br><span class="line">    <span class="keyword">var</span> result = <span class="type">ContiguousArray</span>&lt;<span class="type">Element</span>&gt;()</span><br><span class="line">    <span class="keyword">var</span> ringBuffer = <span class="type">ContiguousArray</span>&lt;<span class="type">Element</span>&gt;()</span><br><span class="line">    <span class="keyword">var</span> i = ringBuffer.startIndex</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> <span class="keyword">self</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> ringBuffer.<span class="built_in">count</span> &lt; k &#123;</span><br><span class="line">        ringBuffer.append(element)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result.append(ringBuffer[i])</span><br><span class="line">        ringBuffer[i] = element</span><br><span class="line">        i = (i + <span class="number">1</span>) % k</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Array</span>(result)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Returns a sequence by skipping the initial, consecutive elements that</span></span><br><span class="line">  <span class="comment">/// satisfy the given predicate.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// The following example uses the `drop(while:)` method to skip over the</span></span><br><span class="line">  <span class="comment">/// positive numbers at the beginning of the `numbers` array. The result</span></span><br><span class="line">  <span class="comment">/// begins with the first element of `numbers` that does not satisfy</span></span><br><span class="line">  <span class="comment">/// `predicate`.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">///     let numbers = [3, 7, 4, -2, 9, -6, 10, 1]</span></span><br><span class="line">  <span class="comment">///     let startingWithNegative = numbers.drop(while: &#123; $0 &gt; 0 &#125;)</span></span><br><span class="line">  <span class="comment">///     // startingWithNegative == [-2, 9, -6, 10, 1]</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// If `predicate` matches every element in the sequence, the result is an</span></span><br><span class="line">  <span class="comment">/// empty sequence.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Parameter predicate: A closure that takes an element of the sequence as</span></span><br><span class="line">  <span class="comment">///   its argument and returns a Boolean value indicating whether the</span></span><br><span class="line">  <span class="comment">///   element should be included in the result.</span></span><br><span class="line">  <span class="comment">/// - Returns: A sequence starting after the initial, consecutive elements</span></span><br><span class="line">  <span class="comment">///   that satisfy `predicate`.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Complexity: O(*k*), where *k* is the number of elements to drop from</span></span><br><span class="line">  <span class="comment">///   the beginning of the sequence.</span></span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> __consuming <span class="function"><span class="keyword">func</span> <span class="title">drop</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">while</span> predicate: <span class="params">(Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Bool</span></span><br><span class="line">  ) <span class="keyword">rethrows</span> -&gt; <span class="type">DropWhileSequence</span>&lt;<span class="type">Self</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">try</span> <span class="type">DropWhileSequence</span>(<span class="keyword">self</span>, predicate: predicate)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Returns a sequence, up to the specified maximum length, containing the</span></span><br><span class="line">  <span class="comment">/// initial elements of the sequence.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// If the maximum length exceeds the number of elements in the sequence,</span></span><br><span class="line">  <span class="comment">/// the result contains all the elements in the sequence.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">///     let numbers = [1, 2, 3, 4, 5]</span></span><br><span class="line">  <span class="comment">///     print(numbers.prefix(2))</span></span><br><span class="line">  <span class="comment">///     // Prints &quot;[1, 2]&quot;</span></span><br><span class="line">  <span class="comment">///     print(numbers.prefix(10))</span></span><br><span class="line">  <span class="comment">///     // Prints &quot;[1, 2, 3, 4, 5]&quot;</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Parameter maxLength: The maximum number of elements to return. The</span></span><br><span class="line">  <span class="comment">///   value of `maxLength` must be greater than or equal to zero.</span></span><br><span class="line">  <span class="comment">/// - Returns: A sequence starting at the beginning of this sequence</span></span><br><span class="line">  <span class="comment">///   with at most `maxLength` elements.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Complexity: O(1)</span></span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> __consuming <span class="function"><span class="keyword">func</span> <span class="title">prefix</span><span class="params">(<span class="number">_</span> maxLength: Int)</span></span> -&gt; <span class="type">PrefixSequence</span>&lt;<span class="type">Self</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">PrefixSequence</span>(<span class="keyword">self</span>, maxLength: maxLength)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Returns a sequence containing the initial, consecutive elements that</span></span><br><span class="line">  <span class="comment">/// satisfy the given predicate.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// The following example uses the `prefix(while:)` method to find the</span></span><br><span class="line">  <span class="comment">/// positive numbers at the beginning of the `numbers` array. Every element</span></span><br><span class="line">  <span class="comment">/// of `numbers` up to, but not including, the first negative value is</span></span><br><span class="line">  <span class="comment">/// included in the result.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">///     let numbers = [3, 7, 4, -2, 9, -6, 10, 1]</span></span><br><span class="line">  <span class="comment">///     let positivePrefix = numbers.prefix(while: &#123; $0 &gt; 0 &#125;)</span></span><br><span class="line">  <span class="comment">///     // positivePrefix == [3, 7, 4]</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// If `predicate` matches every element in the sequence, the resulting</span></span><br><span class="line">  <span class="comment">/// sequence contains every element of the sequence.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Parameter predicate: A closure that takes an element of the sequence as</span></span><br><span class="line">  <span class="comment">///   its argument and returns a Boolean value indicating whether the</span></span><br><span class="line">  <span class="comment">///   element should be included in the result.</span></span><br><span class="line">  <span class="comment">/// - Returns: A sequence of the initial, consecutive elements that</span></span><br><span class="line">  <span class="comment">///   satisfy `predicate`.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Complexity: O(*k*), where *k* is the length of the result.</span></span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> __consuming <span class="function"><span class="keyword">func</span> <span class="title">prefix</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">while</span> predicate: <span class="params">(Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Bool</span></span><br><span class="line">  ) <span class="keyword">rethrows</span> -&gt; [<span class="type">Element</span>] &#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="type">ContiguousArray</span>&lt;<span class="type">Element</span>&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> <span class="keyword">self</span> &#123;</span><br><span class="line">      <span class="keyword">guard</span> <span class="keyword">try</span> predicate(element) <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">      result.append(element)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Array</span>(result)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// Copies `self` into the supplied buffer.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Precondition: The memory in `self` is uninitialized. The buffer must</span></span><br><span class="line">  <span class="comment">///   contain sufficient uninitialized memory to accommodate `source.underestimatedCount`.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Postcondition: The `Pointee`s at `buffer[startIndex..&lt;returned index]` are</span></span><br><span class="line">  <span class="comment">///   initialized.</span></span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> __consuming <span class="function"><span class="keyword">func</span> <span class="title">_copyContents</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    initializing buffer: UnsafeMutableBufferPointer&lt;Element&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span> -&gt; (<span class="type">Iterator</span>,<span class="type">UnsafeMutableBufferPointer</span>&lt;<span class="type">Element</span>&gt;.<span class="type">Index</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> it = <span class="keyword">self</span>.makeIterator()</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">var</span> ptr = buffer.baseAddress <span class="keyword">else</span> &#123; <span class="keyword">return</span> (it,buffer.startIndex) &#125;</span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> buffer.startIndex..&lt;buffer.<span class="built_in">count</span> &#123;</span><br><span class="line">      <span class="keyword">guard</span> <span class="keyword">let</span> x = it.next() <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (it, idx)</span><br><span class="line">      &#125;</span><br><span class="line">      ptr.initialize(to: x)</span><br><span class="line">      ptr += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (it,buffer.endIndex)</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">withContiguousStorageIfAvailable</span>&lt;R&gt;<span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="number">_</span> body: <span class="params">(UnsafeBufferPointer&lt;Element&gt;)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">R</span></span><br><span class="line">  ) <span class="keyword">rethrows</span> -&gt; <span class="type">R?</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FIXME(ABI)#182</span></span><br><span class="line"><span class="comment">// Pending &lt;rdar://problem/14011860&gt; and &lt;rdar://problem/14396120&gt;,</span></span><br><span class="line"><span class="comment">// pass an IteratorProtocol through IteratorSequence to give it &quot;Sequence-ness&quot;</span></span><br><span class="line"><span class="comment">/// A sequence built around an iterator of type `Base`.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Useful mostly to recover the ability to use `for`...`in`,</span></span><br><span class="line"><span class="comment">/// given just an iterator `i`:</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">///     for x in IteratorSequence(i) &#123; ... &#125;</span></span><br><span class="line">@frozen</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">IteratorSequence</span>&lt;<span class="title">Base</span>: <span class="title">IteratorProtocol</span>&gt; </span>&#123;</span><br><span class="line">  @usableFromInline</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> _base: <span class="type">Base</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Creates an instance whose iterator is a copy of `base`.</span></span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> base: <span class="type">Base</span>) &#123;</span><br><span class="line">    _base = base</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">IteratorSequence</span>: <span class="title">IteratorProtocol</span>, <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// Advances to the next element and returns it, or `nil` if no next element</span></span><br><span class="line">  <span class="comment">/// exists.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// Once `nil` has been returned, all subsequent calls return `nil`.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Precondition: `next()` has not been applied to a copy of `self`</span></span><br><span class="line">  <span class="comment">///   since the copy was made.</span></span><br><span class="line">  @inlinable</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">next</span><span class="params">()</span></span> -&gt; <span class="type">Base</span>.<span class="type">Element?</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> _base.next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* <span class="doctag">FIXME:</span> ideally for compatability we would declare</span></span><br><span class="line"><span class="comment">extension Sequence &#123;</span></span><br><span class="line"><span class="comment">  @available(swift, deprecated: 5, message: &quot;&quot;)</span></span><br><span class="line"><span class="comment">  public typealias SubSequence = AnySequence&lt;Element&gt;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift专题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(三)Swift集合源码</title>
      <link href="2020/04/18/(%E4%B8%89)Swift%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81/"/>
      <url>2020/04/18/(%E4%B8%89)Swift%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Swift-Collections"><a href="#Swift-Collections" class="headerlink" title="Swift Collections"></a>Swift Collections</h1><h2 id="使用篇"><a href="#使用篇" class="headerlink" title="使用篇"></a>使用篇</h2><h2 id="1、Array"><a href="#1、Array" class="headerlink" title="1、Array"></a><a href="https://www.hackingwithswift.com/articles/76/how-to-loop-over-arrays">1、Array</a></h2><h3 id="数组Array的两种for循环"><a href="#数组Array的两种for循环" class="headerlink" title="数组Array的两种for循环"></a>数组Array的两种for循环</h3><blockquote><p>只遍历value</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> array &#123;</span><br><span class="line">  <span class="built_in">print</span>(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>快速枚举数组，用元祖(index, value)接收</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (index, value) <span class="keyword">in</span> array.enumerated() &#123;</span><br><span class="line">  <span class="built_in">print</span>(index, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>array.enumerated() + map 快速枚举</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> newNums = nums.enumerated().<span class="built_in">map</span> &#123; (index, num) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> num * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;newNums:\(newNums)&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="数组的值倒叙reversed-enumerated"><a href="#数组的值倒叙reversed-enumerated" class="headerlink" title="数组的值倒叙reversed() + enumerated()"></a>数组的值倒叙reversed() + enumerated()</h3><blockquote><p>//可以用来快速的枚举数组中的内容，并用元组(index, value)接收 public func enumerated() -&gt; EnumeratedSequence&gt;</p><p>//可以倒叙数组内容 public func reversed() -&gt; ReversedRandomAccessCollection&gt;</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1、值倒叙</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> nums.reversed().enumerated() &#123;</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (index, item) <span class="keyword">in</span> nums.reversed().enumerated() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> (offset: 0, element: 1)</span></span><br><span class="line"><span class="comment"> (offset: 1, element: 2)</span></span><br><span class="line"><span class="comment"> (offset: 2, element: 3)</span></span><br><span class="line"><span class="comment"> (offset: 3, element: 4)</span></span><br><span class="line"><span class="comment"> (offset: 4, element: 5)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、索引+值都是倒叙</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> nums.enumerated().reversed() &#123;</span><br><span class="line"><span class="comment">//    print(&quot;\(i)&quot;)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">(offset: 4, element: 1)</span></span><br><span class="line"><span class="comment">(offset: 3, element: 2)</span></span><br><span class="line"><span class="comment">(offset: 2, element: 3)</span></span><br><span class="line"><span class="comment">(offset: 1, element: 4)</span></span><br><span class="line"><span class="comment">(offset: 0, element: 5)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="数组的索引逆序"><a href="#数组的索引逆序" class="headerlink" title="数组的索引逆序"></a>数组的索引逆序</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>...(nums.<span class="built_in">count</span> - <span class="number">1</span>)).reversed() &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组的索引逆序-1"><a href="#数组的索引逆序-1" class="headerlink" title="数组的索引逆序"></a>数组的索引逆序</h3><h4 id="1、forEach-遍历optional集合会自动过滤nil"><a href="#1、forEach-遍历optional集合会自动过滤nil" class="headerlink" title="1、forEach()遍历optional集合会自动过滤nil"></a>1、forEach()遍历optional集合会自动过滤nil</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> optionalString: [<span class="type">String</span>]? = <span class="literal">nil</span></span><br><span class="line"><span class="comment">//使用forEach强制解包option，会过滤</span></span><br><span class="line">optionalString?.forEach &#123; str <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;str is (str)&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///使用for-in强制解包optional，会crash</span></span><br><span class="line"><span class="keyword">for</span> str <span class="keyword">in</span> optionalString! &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;str is (str)&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、forEach-和enumerated-的区别"><a href="#2、forEach-和enumerated-的区别" class="headerlink" title="2、forEach()和enumerated()的区别?"></a>2、forEach()和enumerated()的区别?</h4><ul><li><strong>forEach的官方定义</strong></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">forEach</span><span class="params">(<span class="number">_</span> body: <span class="params">(Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Void</span>) <span class="keyword">rethrows</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> body(element)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>forEach的使用</strong></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ships.forEach &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\($0.value) is from \($0.key)&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、enumerated-还是zip"><a href="#3、enumerated-还是zip" class="headerlink" title="3、enumerated()还是zip()???"></a>3、enumerated()还是<a href="https://swift.gg/2017/05/05/you-probably-don't-want-enumerated/">zip()</a>???</h4><p>我见到 <code>enumerated()</code> 最常用的方式是对一个数组执行 enumerated，使用返回的 offset 来获取另一个数组对应的元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for (offset, model) in models.enumerated() &#123;</span><br><span class="line">let viewController &#x3D; viewControllers[offset]</span><br><span class="line">viewController.model &#x3D; model</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>虽然这段代码可以正常运作，但<strong>前提是 <code>models</code> 和 <code>viewControllers</code> 都是 Array 类型，使用整型来作为索引值类型，从 0 开始。另一个前提是这两个数组拥有相同的长度。如果<code>models</code> 的数组长度比 <code>viewControllers</code> 短的话，就会崩溃。</strong>我们还多了一个没有实际意义的多余的变量 <code>offset</code>。一个简洁的 Swift 实现方式应该是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for (model, viewController) in zip(models, viewControllers) &#123;</span><br><span class="line">viewController.model &#x3D; model</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>使用zip()加简洁，而且适用于所有 <code>Sequence</code> 类型，而且可以安全地处理不等长的数组。</strong></p><p>让我们看看另一个例子，这段代码给第一个 <code>imageView</code> 和它的容器以及每个 <code>imageView</code> 之间添加了一段 autolayout 的约束</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (offset, imageView) <span class="keyword">in</span> imageViews.enumerated() &#123;</span><br><span class="line"><span class="keyword">if</span> offset == <span class="number">0</span> &#123;</span><br><span class="line">imageView.leadingAnchor.constraint(equalTo: containerView.leadingAnchor).isActive = <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">let</span> imageToAnchor = imageView[offset - <span class="number">1</span>]</span><br><span class="line">imageView.leadingAnchor.constraint(equalTo: imageToAnchor.trailingAnchor).isActive = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段示例代码也有同样的问题，我们想要成对的元素，但使用 <code>enumerated()</code> 去获取索引以便后续操作的时候，我们就需要手动去处理索引，这并没有必要。<code>zip</code> 在这种情况下也适用。</p><p>首先，处理容器和第一个元素的约束：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">imageViews.first?.leadingAnchor.constraint(equalTo: containerView.leadingAnchor).isActive = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接着，我们来把元素拼成一对：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">left</span>, <span class="keyword">right</span>) <span class="keyword">in</span> <span class="built_in">zip</span>(imageViews, imageViews.<span class="built_in">dropFirst</span>()) &#123;</span><br><span class="line"><span class="keyword">left</span>.trailingAnchor.constraint(equalTo: <span class="keyword">right</span>.leadingAnchor).isActive = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>搞定，没有索引值，任何 Sequence 类型都适用，而且更加简洁。</p><h2 id="2、字典"><a href="#2、字典" class="headerlink" title="2、字典"></a>2、字典</h2><h3 id="Dictionary-to-JSON-string"><a href="#Dictionary-to-JSON-string" class="headerlink" title="Dictionary to JSON string"></a>Dictionary to JSON string</h3><p>The dictionary is converted to <code>Data</code> which contains an UTF8 encoded string inside.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dictionary = [<span class="string">&quot;nacho&quot;</span>: [<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>]]</span><br><span class="line"><span class="keyword">let</span> jsonData = <span class="keyword">try</span>? <span class="type">JSONSerialization</span>.data(withJSONObject: dictionary, options: [])</span><br><span class="line"><span class="keyword">let</span> jsonString = <span class="type">String</span>(data: jsonData!, encoding: .utf8)</span><br><span class="line"><span class="built_in">print</span>(jsonString)</span><br><span class="line">&#123;<span class="string">&quot;nacho&quot;</span>:[<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>]&#125;</span><br></pre></td></tr></table></figure><p>Also it is possible to use <a href="https://developer.apple.com/documentation/foundation/jsonserialization.writingoptions"><code>.prettyPrinted</code></a> which is nice for showing the result string to humans, but in reality I almost never use it.</p><h3 id="JSON-String-to-Dictionary"><a href="#JSON-String-to-Dictionary" class="headerlink" title="JSON String to Dictionary"></a>JSON String to Dictionary</h3><p>The JSON string should be converted to NSData (using UTF8 encoding), then we can create a dictionary from such data.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonString = <span class="string">&quot;&#123;\&quot;nacho\&quot;:[\&quot;1\&quot;,\&quot;2\&quot;,\&quot;3\&quot;]&#125;&quot;</span></span><br><span class="line"><span class="keyword">let</span> jsonData = jsonString.data(using: .utf8)!</span><br><span class="line"><span class="keyword">let</span> dictionary = <span class="keyword">try</span>? <span class="type">JSONSerialization</span>.jsonObject(with: jsonData, options: .mutableLeaves)</span><br><span class="line"><span class="built_in">print</span>(dictionary)</span><br><span class="line"><span class="type">Optional</span>([<span class="string">&quot;nacho&quot;</span>: [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>]])</span><br></pre></td></tr></table></figure><p>In <code>JSONReadingOptions</code> there is also <a href="https://developer.apple.com/documentation/foundation/jsonserialization.readingoptions"><code>.mutableLeaves</code>, <code>.allowFragments</code>, etc</a> but I don’t use them very often (Mutable leaves will create a mutable dictionary which might sound helpful but in reality you want to handle things as few as possible in dictionaries since its information is not always statically typed and programmers are able to add/remove key/values without the compiler knowing about it).</p><h3 id="Accessing-information-from-objects-created-with-JSONSerialization-jsonObject"><a href="#Accessing-information-from-objects-created-with-JSONSerialization-jsonObject" class="headerlink" title="Accessing information from objects created with JSONSerialization.jsonObject"></a>Accessing information from objects created with JSONSerialization.jsonObject</h3><p>Now, since JSONSerialization.jsonObject returns an object of type Any we need to cast it (according to our needs) to be able to access its information. For example:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> personsDictionary = dictionary <span class="keyword">as</span>? [<span class="type">String</span>: <span class="type">Any</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(personsDictionary)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> numbers = personsDictionary[<span class="string">&quot;nacho&quot;</span>] <span class="keyword">as</span>? [<span class="type">String</span>] &#123;</span><br><span class="line">        <span class="built_in">print</span>(numbers)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">[<span class="string">&quot;nacho&quot;</span>: [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>]]</span><br><span class="line">[<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift专题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(二)Swift函数式编程</title>
      <link href="2020/02/20/(%E4%BA%8C)Swift%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>2020/02/20/(%E4%BA%8C)Swift%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Functional-Programming-in-Swift"><a href="#Functional-Programming-in-Swift" class="headerlink" title="Functional Programming in Swift"></a>Functional Programming in Swift</h1><p>函数式编程介绍。版本：swift 4.2, iOS 12, Xcode 10</p><p>在本部分中，您将介绍FP中的一些关键概念。许多讨论FP的论文都将不变状态和缺乏副作用视为FP的最重要方面，因此您将从这里开始。</p><a id="more"></a><h2 id="不变性和副作用"><a href="#不变性和副作用" class="headerlink" title="不变性和副作用"></a>不变性和副作用</h2><p>无论您首先学习哪种编程语言，您可能要学习的最初概念之一就是变量代表数据或状态。如果您退一步考虑一下这个想法，变量似乎很奇怪。</p><p>术语“变量”表示随程序运行而变化的数量。从数学角度考虑数量问题，您已将时间作为软件行为的关键参数。通过更改变量，可以创建可变状态。</p><p>为了进行演示，请将以下代码添加到playground：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> thing = <span class="number">3</span></span><br><span class="line"><span class="comment">//some stuff</span></span><br><span class="line">thing = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">superHero</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;I&#x27;m batman&quot;</span>)</span><br><span class="line">  thing = <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;original state = \(thing)&quot;</span>)</span><br><span class="line">superHero()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;mutated state = \(thing)&quot;</span>)</span><br></pre></td></tr></table></figure><p>神圣的神秘变化！为什么现在是5？这种变化称为副作用。函数superHero（）更改了一个甚至没有定义自己的变量。</p><p>单独或在简单系统中，可变状态不一定是问题。将许多对象连接在一起时（例如在大型的面向对象的系统中）会出现问题。可变状态会使人难以理解变量具有什么值以及该值随时间的变化而产生头痛。</p><p>例如，在为多线程系统编写代码时，如果两个或多个线程<strong>同时访问同一变量</strong>，则它们可能会<strong>无序地修改或访问它</strong>。这会导致意外的行为。<strong>这种意外行为包括竞态条件，死锁和许多其他问题。</strong></p><p>试想一下，如果您可以编写状态永远不变的代码。并发系统中发生的所有问题都将消失。像这样工作的系统具有<strong>不变的状态</strong>，这意味着不允许状态在程序过程中进行更改。</p><p>使用不可变数据的主要好处是，使用不可变数据的代码单元没有副作用。代码中的函数不会更改其自身之外的元素，并且在发生函数调用时不会出现怪异的效果。您的程序可以正常运行，因为没有副作用，您可以轻松重现其预期的效果。</p><p>本教程从较高的层次介绍了FP，因此在实际情况下考虑这些概念会很有帮助。在这种情况下，假设您正在为游乐园构建应用程序，并且该游乐园的后端服务器通过REST API提供了行程数据。</p><h2 id="创建Model"><a href="#创建Model" class="headerlink" title="创建Model"></a>创建Model</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">RideCategory</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> family</span><br><span class="line">  <span class="keyword">case</span> kids</span><br><span class="line">  <span class="keyword">case</span> thrill</span><br><span class="line">  <span class="keyword">case</span> scary</span><br><span class="line">  <span class="keyword">case</span> relaxing</span><br><span class="line">  <span class="keyword">case</span> water</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">Minutes</span> = <span class="type">Double</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ride</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">  <span class="keyword">let</span> categories: <span class="type">Set</span>&lt;<span class="type">RideCategory</span>&gt;</span><br><span class="line">  <span class="keyword">let</span> waitTime: <span class="type">Minutes</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Create-some-data-using-that-model"><a href="#Create-some-data-using-that-model" class="headerlink" title="Create some data using that model"></a>Create some data using that model</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> parkRides = [</span><br><span class="line">          <span class="type">Ride</span>(name: <span class="string">&quot;R45&quot;</span>,</span><br><span class="line">               categories: [.family, .thrill, .water],</span><br><span class="line">               waitTime: <span class="number">45.0</span>),</span><br><span class="line">          <span class="type">Ride</span>(name: <span class="string">&quot;R10&quot;</span>, categories: [.family], waitTime: <span class="number">10.0</span>),</span><br><span class="line">          <span class="type">Ride</span>(name: <span class="string">&quot;R15&quot;</span>, categories: [.kids], waitTime: <span class="number">15.0</span>),</span><br><span class="line">          <span class="type">Ride</span>(name: <span class="string">&quot;R30&quot;</span>, categories: [.scary], waitTime: <span class="number">30.0</span>),</span><br><span class="line">          <span class="type">Ride</span>(name: <span class="string">&quot;R60&quot;</span>,</span><br><span class="line">               categories: [.family, .thrill],</span><br><span class="line">               waitTime: <span class="number">60.0</span>),</span><br><span class="line">          <span class="type">Ride</span>(name: <span class="string">&quot;R15-2&quot;</span>, categories: [.family, .kids], waitTime: <span class="number">15.0</span>),</span><br><span class="line">          <span class="type">Ride</span>(name: <span class="string">&quot;R25&quot;</span>, categories: [.family, .water], waitTime: <span class="number">25.0</span>),</span><br><span class="line">          <span class="type">Ride</span>(name: <span class="string">&quot;R0&quot;</span>,</span><br><span class="line">               categories: [.family, .relaxing],</span><br><span class="line">               waitTime: <span class="number">0.0</span>)</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><h2 id="Map-、Filter、-Reduce"><a href="#Map-、Filter、-Reduce" class="headerlink" title="Map 、Filter、 Reduce"></a>Map 、Filter、 Reduce</h2><p><strong>Most languages that support FP will have the functions filter, map &amp; reduce.</strong></p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><blockquote><p>Map是将输入Collection中的每个Element转换为新Element。</p><p>使用map遍历一个集合，并对集合中的每个元素应用相同的操作。</p><p> map函数返回一个数组，其中包含对每个元素的映射或转换函数的结果。</p></blockquote><h4 id="Map-on-array"><a href="#Map-on-array" class="headerlink" title="Map on array:"></a>Map on array:</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayOfInt = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>如果我们要对每个元素乘上10呢？我们以前可能要这样</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr: [<span class="type">Int</span>] = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> arrayOfInt &#123;</span><br><span class="line">    newArr.append(value * <span class="number">10</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(newArr)</span><br></pre></td></tr></table></figure><p>现在有map()后我们可以这样：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mapArr = arrayOfInt.<span class="built_in">map</span> &#123; $<span class="number">0</span> * <span class="number">10</span> &#125;</span><br><span class="line"><span class="built_in">print</span>(mapArr)</span><br></pre></td></tr></table></figure><blockquote><p>Working of map: The map function has a single argument which is a closure (a function) that it calls as it loops over the collection. This closure takes the element from the collection as an argument and returns a result. The map function returns these results in an array.</p></blockquote><h4 id="Map-on-Dictionary"><a href="#Map-on-Dictionary" class="headerlink" title="Map on Dictionary"></a>Map on Dictionary</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> book = [<span class="string">&quot;A&quot;</span>: <span class="number">100</span>, <span class="string">&quot;B&quot;</span>: <span class="number">80</span>, <span class="string">&quot;C&quot;</span>: <span class="number">90</span>]</span><br><span class="line"><span class="keyword">let</span> mapedBook = book.<span class="built_in">map</span> &#123; (key, value) <span class="keyword">in</span></span><br><span class="line">    key.capitalized</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(mapedBook) <span class="comment">//[&quot;C&quot;, &quot;B&quot;, &quot;A&quot;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Map-on-Set"><a href="#Map-on-Set" class="headerlink" title="Map on Set"></a>Map on Set</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lengthInmeter: <span class="type">Set</span> = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> km  = lengthInmeter.<span class="built_in">map</span> &#123; meter <span class="keyword">in</span> meter * <span class="number">1000</span> &#125;</span><br><span class="line"><span class="built_in">print</span>(km) <span class="comment">// [1000, 5000, 3000]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Map同时获取array-Index"><a href="#Map同时获取array-Index" class="headerlink" title="Map同时获取array.Index??"></a>Map同时获取array.Index??</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> newNums = nums.enumerated().<span class="built_in">map</span> &#123; (index, num) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> num * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;newNums:\(newNums)&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p>Filter函数的作用是过滤集合，返回符合条件的集合。</p><h4 id="Filter-on-Array"><a href="#Filter-on-Array" class="headerlink" title="Filter on Array"></a>Filter on Array</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> filterArray = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>]</span><br><span class="line"><span class="keyword">let</span> newFilterArray = filterArray.<span class="built_in">filter</span> &#123; num -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    num % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(newFilterArray)</span><br></pre></td></tr></table></figure><h4 id="Filter-on-Dictionary"><a href="#Filter-on-Dictionary" class="headerlink" title="Filter on Dictionary"></a>Filter on Dictionary</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> book = [<span class="string">&quot;A&quot;</span>: <span class="number">100</span>, <span class="string">&quot;B&quot;</span>: <span class="number">80</span>, <span class="string">&quot;C&quot;</span>: <span class="number">90</span>]</span><br><span class="line"><span class="keyword">let</span> bookFilter = book.<span class="built_in">filter</span> &#123; (key, value) <span class="keyword">in</span></span><br><span class="line">    value &gt; <span class="number">80</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(bookFilter)</span><br></pre></td></tr></table></figure><p><strong>简化</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> book = [<span class="string">&quot;A&quot;</span>: <span class="number">100</span>, <span class="string">&quot;B&quot;</span>: <span class="number">80</span>, <span class="string">&quot;C&quot;</span>: <span class="number">90</span>]</span><br><span class="line"><span class="keyword">let</span> bookFilter = book.<span class="built_in">filter</span> &#123;</span><br><span class="line">    $<span class="number">1</span> &gt; <span class="number">80</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>$0是key</p><p>$1是value</p></blockquote><h4 id="Filter-on-Set"><a href="#Filter-on-Set" class="headerlink" title="Filter on Set"></a>Filter on Set</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> setNums = [<span class="number">4.9</span>,<span class="number">5.5</span>,<span class="number">8.6</span>]</span><br><span class="line"><span class="keyword">let</span> newSet = setNums.<span class="built_in">filter</span> &#123;</span><br><span class="line">    $<span class="number">0</span> &gt; <span class="number">5.0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(newSet)</span><br></pre></td></tr></table></figure><p><strong>重要：返回类型是数组</strong></p><h3 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h3><blockquote><p>Use <code>reduce</code> to combine all items in a collection to create a single new value.</p></blockquote><blockquote><p>使用<em>reduce</em>可以合并集合中的所有元素来创建一个新的value</p></blockquote><p>Apple文档声明reduce()</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reduce</span>&lt;Result&gt;<span class="params">(<span class="number">_</span> initialResult: Result, <span class="number">_</span> nextPartialResult: <span class="params">(Result, Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Result</span>) <span class="keyword">rethrows</span> -&gt; <span class="type">Result</span></span><br></pre></td></tr></table></figure><p><strong>reduce</strong>函数有两个参数：</p><ul><li>第一个参数 <strong>initial value</strong>用来存储初始值或者结果（每次迭代器的结果）</li><li>第二个是带有两个参数的闭包，Result是初始值或迭代器的结果，Element是集合中的下一个元素。</li></ul><h4 id="Reduce-on-Array"><a href="#Reduce-on-Array" class="headerlink" title="Reduce on Array"></a>Reduce on Array</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> sum = numbers.<span class="built_in">reduce</span>(<span class="number">0</span>) &#123; x, y <span class="keyword">in</span></span><br><span class="line">    x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(sum)</span><br></pre></td></tr></table></figure><p>简化版本：使用$0代表result</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reducedSum = numbers.<span class="built_in">reduce</span>(<span class="number">0</span>) &#123; $<span class="number">0</span> + $<span class="number">1</span> &#125;</span><br><span class="line"><span class="built_in">print</span>(reducedSum)</span><br><span class="line"><span class="comment">///等价</span></span><br><span class="line"><span class="keyword">let</span> reducedSum = numbers.<span class="built_in">reduce</span>(<span class="number">0</span>, +)</span><br><span class="line"><span class="built_in">print</span>(reducedSum)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>乘法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> produceNum = numbers.<span class="built_in">reduce</span>(<span class="number">1</span>) &#123; x, y <span class="keyword">in</span></span><br><span class="line">    x * y</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(produceNum)</span><br><span class="line"><span class="comment">///等价</span></span><br><span class="line"><span class="keyword">let</span> produceNum = numbers.<span class="built_in">reduce</span>(<span class="number">1</span>, *)</span><br><span class="line"><span class="built_in">print</span>(produceNum)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Reduce-连接字符串"><a href="#Reduce-连接字符串" class="headerlink" title="Reduce + 连接字符串"></a>Reduce + 连接字符串</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> charactors = [<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;def&quot;</span>,<span class="string">&quot;hijk&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> newCharactor = charactors.<span class="built_in">reduce</span>(<span class="string">&quot;&quot;</span>, +)</span><br><span class="line"><span class="built_in">print</span>(newCharactor) <span class="comment">// abcdefhijk</span></span><br></pre></td></tr></table></figure><h4 id="Reduce-on-Dictionary"><a href="#Reduce-on-Dictionary" class="headerlink" title="Reduce on Dictionary"></a>Reduce on Dictionary</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> dict = [<span class="string">&quot;A&quot;</span>: <span class="number">20</span>, <span class="string">&quot;B&quot;</span>: <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reduce on value</span></span><br><span class="line"><span class="keyword">let</span> reducedNum = dict.<span class="built_in">reduce</span>(<span class="number">5</span>) &#123; result, dic <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> result + dic.value</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;reduc on value is \(reducedNum)&quot;</span>) </span><br><span class="line"><span class="comment">// reduc on value is 125</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Reduce on key</span></span><br><span class="line"><span class="keyword">let</span> reducedName = dict.<span class="built_in">reduce</span>(<span class="string">&quot;Charactor are &quot;</span>) &#123; (result, dic) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> result + dic.key + <span class="string">&quot; &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;reduce on key is &lt;\(reducedName)&gt;&quot;</span>) </span><br><span class="line"><span class="comment">//reduce on key is &lt;Charactor are A B &gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简化</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> reducedNameOnDic = dict.<span class="built_in">reduce</span>(<span class="string">&quot;Charater are &quot;</span>) &#123; $<span class="number">0</span> + $<span class="number">1</span>.key + <span class="string">&quot; &quot;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Reduce-on-Set"><a href="#Reduce-on-Set" class="headerlink" title="Reduce on Set"></a>Reduce on Set</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reduce on Set</span></span><br><span class="line"><span class="keyword">let</span> lengthMeters = [<span class="number">3.4</span>,<span class="number">1.6</span>]</span><br><span class="line"><span class="keyword">let</span> reducedMeters = lengthMeters.<span class="built_in">reduce</span>(<span class="number">0.0</span>) &#123;</span><br><span class="line">    $<span class="number">0</span> + $<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;reduced meters :\(reducedMeters)&quot;</span>) <span class="comment">// 5.0</span></span><br></pre></td></tr></table></figure><h2 id="FlatMap"><a href="#FlatMap" class="headerlink" title="FlatMap"></a>FlatMap</h2><p>Flatmap is used to flatten a collection of collections . But before flattening the collection, we can apply map to each elements.</p><blockquote><p><strong>Apple docs says</strong>: Returns an array containing the concatenated results of calling the given transformation with each element of this sequence.</p></blockquote><p>Flatmap用于展平集合的集合。 但是在展平集合之前，我们可以将map应用于每个集合元素。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> charaters = [<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;def&quot;</span>,<span class="string">&quot;ghi&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> newCharaters = charaters.flatMap &#123; $<span class="number">0</span> &#125;</span><br><span class="line"><span class="built_in">print</span>(newCharaters)</span><br><span class="line"><span class="comment">//[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> codes = [[<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;def&quot;</span>,<span class="string">&quot;ghi&quot;</span>], [<span class="string">&quot;jkl&quot;</span>,<span class="string">&quot;mno&quot;</span>,<span class="string">&quot;pqr&quot;</span>],[<span class="string">&quot;stu&quot;</span>,<span class="string">&quot;vwx&quot;</span>,<span class="string">&quot;yz&quot;</span>] ]</span><br><span class="line"><span class="keyword">let</span> newCodes = codes.flatMap &#123;$<span class="number">0</span>.<span class="built_in">map</span> &#123; $<span class="number">0</span> &#125; &#125;</span><br><span class="line"><span class="built_in">print</span>(newCodes)</span><br><span class="line"><span class="comment">// [&quot;abc&quot;, &quot;def&quot;, &quot;ghi&quot;, &quot;jkl&quot;, &quot;mno&quot;, &quot;pqr&quot;, &quot;stu&quot;, &quot;vwx&quot;, &quot;yz&quot;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="nil"><a href="#nil" class="headerlink" title="nil"></a>nil</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nilArray = [<span class="number">2</span>,<span class="number">3</span>,<span class="literal">nil</span>]</span><br><span class="line"><span class="built_in">print</span>(nilArray.flatMap &#123; $<span class="number">0</span> &#125;) <span class="comment">// [2,3]</span></span><br><span class="line"><span class="comment">// warning: &#x27;flatMap&#x27; is deprecated: Please use compactMap(_:) for the case where closure returns an optional value</span></span><br><span class="line"><span class="built_in">print</span>(nilArray.<span class="built_in">compactMap</span> &#123; $<span class="number">0</span> &#125;) <span class="comment">// [2,3]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift专题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LookinLoader安装使用</title>
      <link href="2020/01/20/LookinLoader%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
      <url>2020/01/20/LookinLoader%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Lookin查看自己的App"><a href="#Lookin查看自己的App" class="headerlink" title="Lookin查看自己的App"></a>Lookin查看自己的App</h2><ul><li><p>1、<a href="https://lookin.work/get">Lookin下载</a></p></li><li><p>2、pod添加：<code>pod &#39;LookinServer&#39;, :configurations =&gt; [&#39;Debug&#39;]</code></p></li><li><p>3、pod install</p></li><li><p>4、打开mac上安装的Lookin</p></li></ul><h2 id="配合LookinLoader查看第三方App"><a href="#配合LookinLoader查看第三方App" class="headerlink" title="配合LookinLoader查看第三方App"></a>配合LookinLoader查看第三方App</h2><blockquote><p>官方：正常情况下，你无法将 LookinServer 嵌入到别人的 iOS App 里，因此你也就无法使用 Lookin 查看别人的 App。但我们也注意到有些第三方开发者通过某些方式实现了向别人的 App 中注入 Framework 的需求，这可能已属于逆向破解范畴，你可在 Github 中搜索 <em><a href="https://github.com/search?q=lookinloader">LookinLoader</a></em> 自行研究，或向他们寻求帮助。</p></blockquote><h3 id="1、LookinLoader安装"><a href="#1、LookinLoader安装" class="headerlink" title="1、LookinLoader安装"></a>1、LookinLoader安装</h3><h4 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h4><p> <strong>在越狱手机中的「Cydia」-&gt;搜索「LookinLoader」-&gt;「安裝」</strong></p><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/20200406124849.PNG" style="zoom:33%;" /><h4 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h4><p><strong>进入设置-&gt;「Lookin」-&gt;「Enabled Applications」-&gt;启用想要查看的App</strong></p><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/20200406125024.PNG" style="zoom:33%;" /><h4 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h4><p><strong>数据线连接越狱手机到Mac-&gt; 打开要查看的APP -&gt;Mac上打开Lookin -&gt; 查看三方的App。</strong></p><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/20200406125351.png" style="zoom:50%;" /><h3 id="2、Lookin使用"><a href="#2、Lookin使用" class="headerlink" title="2、Lookin使用"></a>2、Lookin使用</h3><h4 id="2-1可以看到列表0"><a href="#2-1可以看到列表0" class="headerlink" title="2.1可以看到列表0"></a>2.1可以看到列表0</h4><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/20200406130759.png" style="zoom:50%;" /><h4 id="2-2可以看到列表6"><a href="#2-2可以看到列表6" class="headerlink" title="2.2可以看到列表6"></a>2.2可以看到列表6</h4><p><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/20200406130414.png"></p><p>代理方法：<code>UIScrollViewDelayedTouchesBeganGestureRecognizer</code></p><p>代理方法：<code>UIScrollViewPanGestureRecognizer</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dyld源码阅读</title>
      <link href="2020/01/15/Dyld%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
      <url>2020/01/15/Dyld%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Dyld源码阅读"><a href="#Dyld源码阅读" class="headerlink" title="Dyld源码阅读"></a>Dyld源码阅读</h1><ul><li>Version：<a href="https://opensource.apple.com/tarballs/dyld/"><strong>dyld-551.4</strong></a></li><li>Lauange：<strong>C++</strong></li><li>load()调用路径：3566行 <ul><li><code>load()-&gt;loadPhase0()-&gt;loadPhase1()-&gt;loadPhase2()-&gt;loadPhase4()-&gt;loadPhase5()打开或检查已经存在的动态库：dyld3::findInSharedCacheImage-&gt;loadPhase5load()-&gt;loadPhase5open()-&gt;loadPhase6()-&gt;加载3种Mach-O文件</code></li></ul></li></ul><h2 id="1、动态库路径"><a href="#1、动态库路径" class="headerlink" title="1、动态库路径"></a>1、动态库路径</h2><p><strong>iOS越狱手机</strong></p><ul><li><strong>在Mac\iOS中，是使用了<code>/usr/lib/dyld</code>程序来加载动态库</strong></li><li>UIKit路径：<code>/system/Library/Frameworks/UIKit.framework</code></li><li><strong>动态库共享缓存</strong>：<code>/System/Library/Caches/com.apple.dyld/dyld_shared_cache_arm64</code></li></ul><h2 id="0x00-load"><a href="#0x00-load" class="headerlink" title="0x00 load()"></a>0x00 load()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ImageLoader* <span class="title">load</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* path, <span class="keyword">const</span> LoadContext&amp; context, <span class="keyword">unsigned</span>&amp; cacheIndex)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// try all path permutations and check against existing loaded images</span></span><br><span class="line">ImageLoader* image = loadPhase0(path, orgPath, context, cacheIndex, <span class="literal">NULL</span>);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> ( image != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">CRSetCrashLogMessage2(<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">return</span> image;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// try all path permutations and try open() until first success</span></span><br><span class="line">image = loadPhase0(path, orgPath, context, cacheIndex, &amp;exceptions);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( image == <span class="literal">NULL</span>)</span><br><span class="line">image = loadPhase2cache(path, orgPath, context, cacheIndex, &amp;exceptions);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    CRSetCrashLogMessage2(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x01-loadPhase2"><a href="#0x01-loadPhase2" class="headerlink" title="0x01 loadPhase2()"></a>0x01 loadPhase2()</h2><h2 id="0x02-loadPhase5"><a href="#0x02-loadPhase5" class="headerlink" title="0x02 loadPhase5"></a>0x02 loadPhase5</h2><h4 id="loadPhase5load（）"><a href="#loadPhase5load（）" class="headerlink" title="loadPhase5load（）"></a>loadPhase5load（）</h4><h4 id="loadPhase5check（）"><a href="#loadPhase5check（）" class="headerlink" title="loadPhase5check（）"></a>loadPhase5check（）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// open or check existing</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ImageLoader* <span class="title">loadPhase5</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* path, <span class="keyword">const</span> <span class="keyword">char</span>* orgPath, <span class="keyword">const</span> LoadContext&amp; context, <span class="keyword">unsigned</span>&amp; cacheIndex, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">const</span> <span class="keyword">char</span>*&gt;* exceptions)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// check for specific dylib overrides</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;DylibOverride&gt;::iterator it = sDylibOverrides.begin(); it != sDylibOverrides.end(); ++it) &#123;</span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">strcmp</span>(it-&gt;installName, path) == <span class="number">0</span> ) &#123;</span><br><span class="line">path = it-&gt;<span class="keyword">override</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( exceptions != <span class="literal">NULL</span> ) </span><br><span class="line"><span class="keyword">return</span> loadPhase5load(path, orgPath, context, cacheIndex, exceptions);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> loadPhase5check(path, orgPath, context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x03-findInSharedCacheImage"><a href="#0x03-findInSharedCacheImage" class="headerlink" title="0x03 findInSharedCacheImage"></a>0x03 findInSharedCacheImage</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">findInSharedCacheImage</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* path, <span class="keyword">bool</span> searchByPath, <span class="keyword">const</span> struct stat* stat_buf, <span class="keyword">const</span> macho_header** mh, <span class="keyword">const</span> <span class="keyword">char</span>** pathInCache, <span class="keyword">long</span>* slide)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dyld3::SharedCacheFindDylibResults results;</span><br><span class="line"><span class="keyword">if</span> ( dyld3::findInSharedCacheImage(sSharedCacheLoadInfo, path, &amp;results) ) &#123;</span><br><span class="line">*mh = (macho_header*)results.mhInCache;</span><br><span class="line">*pathInCache = results.pathInCache;</span><br><span class="line">*slide     = results.slideInCache;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">inSharedCache</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> dyld3::pathIsInSharedCacheImage(sSharedCacheLoadInfo, path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">imageSorter</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* l, <span class="keyword">const</span> <span class="keyword">void</span>* r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> ImageLoader* left = *((ImageLoader**)l);</span><br><span class="line"><span class="keyword">const</span> ImageLoader* right= *((ImageLoader**)r);</span><br><span class="line"><span class="keyword">return</span> left-&gt;compare(right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>findInSharedCacheImage</li><li>inSharedCache</li></ul><h2 id="0x04-Clang-编译dsc-extractor-cpp"><a href="#0x04-Clang-编译dsc-extractor-cpp" class="headerlink" title="0x04 Clang++编译dsc_extractor.cpp"></a>0x04 Clang++编译dsc_extractor.cpp</h2><h4 id="生成可执行文件dsc-extractor"><a href="#生成可执行文件dsc-extractor" class="headerlink" title="生成可执行文件dsc_extractor :"></a>生成可执行文件dsc_extractor :</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$: clang++ -o dsc_extractor dsc_extractor.cpp </span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/20200401153405.png" style="zoom:50%;" /><h4 id="抽取动态共享缓存中的Mach-O"><a href="#抽取动态共享缓存中的Mach-O" class="headerlink" title="抽取动态共享缓存中的Mach-O"></a>抽取动态共享缓存中的Mach-O</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$: cd xxx&#x2F;com.apple.dyld</span><br><span class="line">$: .&#x2F;dsc_extractor dyld_shared_cache_arm64 arm64_file</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/截屏2020-04-01 下午3.35.35.png" style="zoom:50%;" /><p><strong>dsc_extractor.cpp内容如下:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test program</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*extractor_proc)</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* shared_cache_file_path, <span class="keyword">const</span> <span class="keyword">char</span>* extraction_root_path,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">void</span> (^progress)(<span class="keyword">unsigned</span> current, <span class="keyword">unsigned</span> total))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( argc != <span class="number">3</span> ) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;usage: dsc_extractor &lt;path-to-cache-file&gt; &lt;path-to-device-dir&gt;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//void* handle = dlopen(&quot;/Volumes/my/src/dyld/build/Debug/dsc_extractor.bundle&quot;, RTLD_LAZY);</span></span><br><span class="line"><span class="keyword">void</span>* handle = dlopen(<span class="string">&quot;/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/usr/lib/dsc_extractor.bundle&quot;</span>, RTLD_LAZY);</span><br><span class="line"><span class="keyword">if</span> ( handle == <span class="literal">NULL</span> ) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;dsc_extractor.bundle could not be loaded\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extractor_proc proc = (extractor_proc)dlsym(handle, <span class="string">&quot;dyld_shared_cache_extract_dylibs_progress&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> ( proc == <span class="literal">NULL</span> ) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;dsc_extractor.bundle did not have dyld_shared_cache_extract_dylibs_progress symbol\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> result = (*proc)(argv[<span class="number">1</span>], argv[<span class="number">2</span>], ^(<span class="keyword">unsigned</span> c, <span class="keyword">unsigned</span> total) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%d/%d\n&quot;</span>, c, total); &#125; );</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;dyld_shared_cache_extract_dylibs_progress() =&gt; %d\n&quot;</span>, result);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="dyld加载流程"><a href="#dyld加载流程" class="headerlink" title="dyld加载流程"></a>dyld加载流程</h4><ul><li>dyldStartup.s： <code>call __dyld_start -&gt;call dyldbootstrap::start</code> -&gt; dyldInitialization.cpp: <code>call start()-&gt;_main()</code>-&gt; </li></ul><h5 id="dyld的start-方法："><a href="#dyld的start-方法：" class="headerlink" title="dyld的start()方法："></a>dyld的start()方法：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uintptr_t</span> <span class="title">start</span><span class="params">(<span class="keyword">const</span> struct macho_header* appsMachHeader, <span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[], </span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">intptr_t</span> slide, <span class="keyword">const</span> struct macho_header* dyldsMachHeader,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">uintptr_t</span>* startGlue)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// if kernel had to slide dyld, we need to fix up load sensitive locations</span></span><br><span class="line"><span class="comment">// we have to do this before using any global variables</span></span><br><span class="line"><span class="keyword">if</span> ( slide != <span class="number">0</span> ) &#123;</span><br><span class="line">rebaseDyld(dyldsMachHeader, slide);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// allow dyld to use mach messaging</span></span><br><span class="line">mach_init();</span><br><span class="line"></span><br><span class="line"><span class="comment">// kernel sets up env pointer to be just past end of agv array</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>** envp = &amp;argv[argc+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// kernel sets up apple pointer to be just past end of envp array</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>** apple = envp;</span><br><span class="line"><span class="keyword">while</span>(*apple != <span class="literal">NULL</span>) &#123; ++apple; &#125;</span><br><span class="line">++apple;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set up random value for stack canary</span></span><br><span class="line">__guard_setup(apple);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DYLD_INITIALIZER_SUPPORT</span></span><br><span class="line"><span class="comment">// run all C++ initializers inside dyld</span></span><br><span class="line">runDyldInitializers(dyldsMachHeader, slide, argc, argv, envp, apple);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// now that we are done bootstrapping dyld, call dyld&#x27;s main</span></span><br><span class="line"><span class="keyword">uintptr_t</span> appsSlide = slideOfMainExecutable(appsMachHeader);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">return</span> dyld::_main(appsMachHeader, appsSlide, argc, argv, envp, apple, startGlue);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="dyld的main-方法"><a href="#dyld的main-方法" class="headerlink" title="dyld的main()方法"></a>dyld的main()方法</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uintptr_t</span></span><br><span class="line">_main(<span class="keyword">const</span> macho_header* mainExecutableMH, <span class="keyword">uintptr_t</span> mainExecutableSlide, </span><br><span class="line"><span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[], <span class="keyword">const</span> <span class="keyword">char</span>* envp[], <span class="keyword">const</span> <span class="keyword">char</span>* apple[], </span><br><span class="line"><span class="keyword">uintptr_t</span>* startGlue)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//1、保存可执行文件header，后面可以根据header访问其他信息</span></span><br><span class="line"><span class="keyword">uintptr_t</span> result = <span class="number">0</span>;</span><br><span class="line">sMainExecutableMachHeader = mainExecutableMH;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//2、设置上下文信息</span></span><br><span class="line">setContext(mainExecutableMH, argc, argv, envp, apple);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、获取可执行文件的路径</span></span><br><span class="line">sExecPath = _simple_getenv(apple, <span class="string">&quot;executable_path&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="0x05反汇编-Hopper-Disassembler"><a href="#0x05反汇编-Hopper-Disassembler" class="headerlink" title="0x05反汇编 Hopper Disassembler"></a>0x05反汇编 Hopper Disassembler</h5><ul><li>[Xclient下载Hopper Disassembler](<a href="https://xclie/">https://xclie</a> nt.info/s/hopper-disassembler.html#versions)</li></ul><h2 id="2、Mach-O文件"><a href="#2、Mach-O文件" class="headerlink" title="2、Mach-O文件"></a>2、Mach-O文件</h2><ul><li><a href="https://opensource.apple.com/tarballs/xnu/">Mac 内核xnu</a></li><li>工具：<a href="https://github.com/mythkiven/MachOView">MachOView</a></li><li>来源：C/OC/Swift -&gt; .O目标文件-&gt;Mach-O可执行文件</li><li><strong>查看Mac内核中的Mach-O</strong>: <code>xnu-6153.11.26-&gt;EXTERNAL_HEADERS-&gt;mach-o</code></li></ul><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/20200402dyld.png" style="zoom: 67%;" /><h4 id="2-1-常见Mach-O"><a href="#2-1-常见Mach-O" class="headerlink" title="2.1 常见Mach-O"></a>2.1 常见Mach-O</h4><h4 id="MH-EXECUTE-可执行文件"><a href="#MH-EXECUTE-可执行文件" class="headerlink" title="MH_EXECUTE-可执行文件"></a>MH_EXECUTE-可执行文件</h4><ul><li> <code>.app/xxx</code></li></ul><p><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/20200402090833.png"></p><h4 id="MH-OBJECT-目标文件或静态库"><a href="#MH-OBJECT-目标文件或静态库" class="headerlink" title="MH_OBJECT-目标文件或静态库"></a>MH_OBJECT-目标文件或静态库</h4><ul><li>目标文件(.o)</li><li>静态库文件(.a)-静态库其实就是多个.o的集合</li></ul><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/20200402091045.png" style="zoom: 67%;" /><h4 id="MH-DYLIB-动态库文件"><a href="#MH-DYLIB-动态库文件" class="headerlink" title="MH_DYLIB-动态库文件"></a>MH_DYLIB-动态库文件</h4><ul><li><code>.dylib</code></li><li><code>.framework/xxx</code></li></ul><p><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/20200402093545.png"></p><h4 id="MH-DYLIKER-动态链接编辑器"><a href="#MH-DYLIKER-动态链接编辑器" class="headerlink" title="MH_DYLIKER-动态链接编辑器"></a>MH_DYLIKER-动态链接编辑器</h4><ul><li><code>/usr/lib/dyld</code></li></ul><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/usr_lib_dyld_type.png" style="zoom:50%;" /><h4 id="MH-DSYM-存储着二进制文件符号信息"><a href="#MH-DSYM-存储着二进制文件符号信息" class="headerlink" title="MH_DSYM:存储着二进制文件符号信息"></a>MH_DSYM:存储着二进制文件符号信息</h4><ul><li><code>.dSYM/Contents/Resources/DWARF/XXX</code></li></ul><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/20200402091824.png" style="zoom:80%;" /><h4 id="11种mach-o格式"><a href="#11种mach-o格式" class="headerlink" title="11种mach-o格式"></a>11种mach-o格式</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>MH_OBJECT0x1<span class="comment">/* relocatable object file */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>MH_EXECUTE0x2<span class="comment">/* demand paged executable file */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>MH_FVMLIB0x3<span class="comment">/* fixed VM shared library file */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>MH_CORE0x4<span class="comment">/* core file */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>MH_PRELOAD0x5<span class="comment">/* preloaded executable file */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>MH_DYLIB0x6<span class="comment">/* dynamically bound shared library */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>MH_DYLINKER0x7<span class="comment">/* dynamic link editor */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>MH_BUNDLE0x8<span class="comment">/* dynamically bound bundle file */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>MH_DYLIB_STUB0x9<span class="comment">/* shared library stub for static */</span></span></span><br><span class="line"><span class="comment">/*  linking only, no section contents */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>MH_DSYM0xa<span class="comment">/* companion file with only debug */</span></span></span><br><span class="line"><span class="comment">/*  sections */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>MH_KEXT_BUNDLE0xb<span class="comment">/* x86_64 kexts */</span></span></span><br></pre></td></tr></table></figure><h4 id="Mach-o的作用"><a href="#Mach-o的作用" class="headerlink" title="Mach-o的作用"></a>Mach-o的作用</h4><ul><li><strong>The layout of the file depends on the filetype.  For all but the MH_OBJECT file type the segments are padded out and aligned on a segment alignment boundary for efficient demand pageing.</strong>  </li><li><strong>The MH_EXECUTE, MH_FVMLIB, MH_DYLIB,MH_DYLINKER and MH_BUNDLE file types also have the headers included as part of their first segment.</strong></li><li>Mach-O的布局取决于文件类型。除了MH_OBJECT以外的所有的文件类型将分段填充并在分段对齐时-对齐有效请求分页的边界。</li><li>MH_EXECUTE，MH_FVMLIB，MH_DYLIB，MH_DYLINKER和MH_BUNDLE这些文件也有headers作为它们第一个segment。</li></ul><ul><li><p><strong>The file type MH_OBJECT is a compact format intended as output of the assembler and input (and possibly output) of the link editor (the .oformat).  All sections are in one unnamed segment with no segment padding.</strong> </p></li><li><p><strong>This format is used as an executable format when the file is so small the segment padding greatly increases its size.</strong></p></li><li><p>文件类型MH_OBJECT是一种紧凑格式，旨在作为汇编器和链接编辑器（.o的输入）（可能是输出格式）。所有sections都在一个未命名的segment中，没有segment的填充。</p></li><li><p> 当文件太小时segment填充可以大大增加了它的size。此格式用作可执行格式。</p></li></ul><ul><li><p><strong>The file type MH_PRELOAD is an executable format intended for things that are not executed under the kernel (proms, stand alones, kernels, etc).</strong>  </p></li><li><p><strong>The format can be executed under the kernel but may demand paged it and not preload it before execution.</strong></p></li><li><p>文件类型MH_PRELOAD是一种可执行格式，用于非kernel内核下执行。（proms, stand alones, kernels, etc）</p></li><li><p>格式可以在内核下执行，但可能需要分页而不是在执行之前预加载它。</p></li></ul><ul><li><strong>A core file is in MH_CORE format and can be any in an arbritray legal Mach-O file. Constants for the filetype field of the mach_header</strong></li><li>核心文件为MH_CORE格式，可以是任意格式的Mach-O文件。mach_header的文件类型是常量</li></ul><h4 id="生成通用二进制文件："><a href="#生成通用二进制文件：" class="headerlink" title="生成通用二进制文件："></a>生成通用二进制文件：</h4><h5 id="Architectures-hpp"><a href="#Architectures-hpp" class="headerlink" title="Architectures.hpp"></a>Architectures.hpp</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Architectures</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">x86</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">typedef</span> Pointer32&lt;LittleEndian&gt;P;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">x86_64</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">typedef</span> Pointer64&lt;LittleEndian&gt;P;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">arm</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">typedef</span> Pointer32&lt;LittleEndian&gt;P;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">arm64</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">typedef</span> Pointer64&lt;LittleEndian&gt;P;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Universal-Binary"><a href="#Universal-Binary" class="headerlink" title="Universal Binary"></a>Universal Binary</h5><ul><li>通用二进制文件，包含多种不同架构的二进制文件，比单个架构的文件大，也叫<code>Fat Binary</code></li><li>由于执行过程中，只是调用一部分代码，所以运行起来也不需要额外的内存。</li></ul><h5 id="Xcode生成Universal-Binary"><a href="#Xcode生成Universal-Binary" class="headerlink" title="Xcode生成Universal Binary"></a>Xcode生成Universal Binary</h5><p>Standard architectures $(ARCHS_STANDARD)</p><h4 id="dyld-cache-format-h"><a href="#dyld-cache-format-h" class="headerlink" title="dyld_cache_format.h"></a>dyld_cache_format.h</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IPHONE_DYLD_SHARED_CACHE_DIR<span class="meta-string">&quot;/System/Library/Caches/com.apple.dyld/&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DYLD_SHARED_CACHE_BASE_NAME<span class="meta-string">&quot;dyld_shared_cache_&quot;</span></span></span><br></pre></td></tr></table></figure><h4 id="FileAbstraction-hpp"><a href="#FileAbstraction-hpp" class="headerlink" title="FileAbstraction.hpp"></a>FileAbstraction.hpp</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _E&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pointer32</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint32_t</span><span class="keyword">uint_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> _EE;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">uint64_t</span><span class="title">getP</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint_t</span>&amp; from)</span>INLINE </span>&#123; <span class="keyword">return</span> _E::get32(from); &#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span><span class="title">setP</span><span class="params">(<span class="keyword">uint_t</span>&amp; into, <span class="keyword">uint64_t</span> value)</span>INLINE </span>&#123; _E::set32(into, (<span class="keyword">uint32_t</span>)value); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Round to a P-size boundary</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> T <span class="title">round_up</span><span class="params">(T value)</span> </span>&#123; <span class="keyword">return</span> (value+<span class="number">3</span>) &amp; ~(T)<span class="number">3</span>; &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> T <span class="title">round_down</span><span class="params">(T value)</span> </span>&#123; <span class="keyword">return</span> value &amp; ~(T)<span class="number">3</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _E&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pointer64</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint64_t</span><span class="keyword">uint_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> _EE;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">uint64_t</span><span class="title">getP</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint_t</span>&amp; from)</span>INLINE </span>&#123; <span class="keyword">return</span> _E::get64(from); &#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span><span class="title">setP</span><span class="params">(<span class="keyword">uint_t</span>&amp; into, <span class="keyword">uint64_t</span> value)</span>INLINE </span>&#123; _E::set64(into, value); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Round to a P-size boundary</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> T <span class="title">round_up</span><span class="params">(T value)</span> </span>&#123; <span class="keyword">return</span> (value+<span class="number">7</span>) &amp; ~(T)<span class="number">7</span>; &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> T <span class="title">round_down</span><span class="params">(T value)</span> </span>&#123; <span class="keyword">return</span> value &amp; ~(T)<span class="number">7</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、dyld与Mach-O的关系"><a href="#3、dyld与Mach-O的关系" class="headerlink" title="3、dyld与Mach-O的关系"></a>3、dyld与Mach-O的关系</h2><ul><li>dyld属于MH_DYLDLINKER类型的Mach-O文件</li><li>dyld负责加载三种类型Mach-O文件<ul><li>可执行文件</li><li>动态库</li><li>Bundle</li></ul></li></ul><p><strong>mach-o loader：only MH_BUNDLE, MH_DYLIB, and some MH_EXECUTE can be dynamically loaded</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// try mach-o loader</span></span><br><span class="line"><span class="keyword">if</span> ( shortPage ) <span class="keyword">throw</span> <span class="string">&quot;file too short&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> ( isCompatibleMachO(firstPages, path) ) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// only MH_BUNDLE, MH_DYLIB, and some MH_EXECUTE can be dynamically loaded</span></span><br><span class="line"><span class="keyword">const</span> mach_header* mh = (mach_header*)firstPages;</span><br><span class="line"><span class="keyword">switch</span> ( mh-&gt;filetype ) &#123;</span><br><span class="line"><span class="keyword">case</span> MH_EXECUTE:</span><br><span class="line"><span class="keyword">case</span> MH_DYLIB:</span><br><span class="line"><span class="keyword">case</span> MH_BUNDLE:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">throw</span> <span class="string">&quot;mach-o, but wrong filetype&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> headerAndLoadCommandsSize = <span class="keyword">sizeof</span>(macho_header) + mh-&gt;sizeofcmds;</span><br><span class="line"><span class="keyword">if</span> ( headerAndLoadCommandsSize &gt; MAX_MACH_O_HEADER_AND_LOAD_COMMANDS_SIZE )</span><br><span class="line">throwf(<span class="string">&quot;malformed mach-o: load commands size (%u) &gt; %u&quot;</span>, headerAndLoadCommandsSize, MAX_MACH_O_HEADER_AND_LOAD_COMMANDS_SIZE);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( headerAndLoadCommandsSize &gt; fileLength )</span><br><span class="line">dyld::throwf(<span class="string">&quot;malformed mach-o: load commands size (%u) &gt; mach-o file size (%llu)&quot;</span>, headerAndLoadCommandsSize, fileLength);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( headerAndLoadCommandsSize &gt; <span class="number">4096</span> ) &#123;</span><br><span class="line"><span class="comment">// read more pages</span></span><br><span class="line"><span class="keyword">unsigned</span> readAmount = headerAndLoadCommandsSize - <span class="number">4096</span>;</span><br><span class="line"><span class="keyword">if</span> ( pread(fd, &amp;firstPages[<span class="number">4096</span>], readAmount, fileOffset+<span class="number">4096</span>) != readAmount )</span><br><span class="line">throwf(<span class="string">&quot;pread of extra load commands past 4KB failed: %d&quot;</span>, errno);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// instantiate an image</span></span><br><span class="line">ImageLoader* image = ImageLoaderMachO::instantiateFromFile(path, fd, firstPages, headerAndLoadCommandsSize, fileOffset, fileLength, stat_buf, gLinkContext);</span><br><span class="line"></span><br><span class="line"><span class="comment">// validate</span></span><br><span class="line"><span class="keyword">return</span> checkandAddImage(image, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、符号地址"><a href="#4、符号地址" class="headerlink" title="4、符号地址"></a>4、符号地址</h2><p>符号地址= 基地址 - 偏移地址</p><h4 id="获取基地址"><a href="#获取基地址" class="headerlink" title="获取基地址"></a>获取基地址</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取基地址</span></span><br><span class="line"><span class="function"><span class="keyword">uintptr_t</span> <span class="title">get_load_address</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">mach_header</span> *<span class="title">exe_header</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">uint32_t</span> i = <span class="number">0</span>; i &lt; _dyld_image_count(); i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">mach_header</span> *<span class="title">header</span> =</span> _dyld_get_image_header(i);</span><br><span class="line">        <span class="keyword">if</span> (header-&gt;filetype == MH_EXECUTE) &#123;</span><br><span class="line">            exe_header = header;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回值即为加载地址</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">uintptr_t</span>)exe_header;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取偏移地址"><a href="#获取偏移地址" class="headerlink" title="获取偏移地址"></a>获取偏移地址</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uintptr_t</span> <span class="title">get_slide_address</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uintptr_t</span> vmaddr_slide = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">uint32_t</span> i = <span class="number">0</span>; i &lt; _dyld_image_count(); i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">mach_header</span> *<span class="title">header</span> =</span> _dyld_get_image_header(i);</span><br><span class="line">        <span class="keyword">if</span> (header-&gt;filetype == MH_EXECUTE) &#123;</span><br><span class="line">            vmaddr_slide = _dyld_get_image_vmaddr_slide(i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">uintptr_t</span>)vmaddr_slide;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dSYM文件"><a href="#dSYM文件" class="headerlink" title="dSYM文件"></a>dSYM文件</h4><ul><li>编译时添加选项：DWARF with dSYM File，在编译打包完成之后就会生成调试符号文件（Mach-O文件）</li><li>文件查找：找到.xcarchive文件→show package contents→…一直到DWARF→工程二进制文件</li></ul><h4 id="atos命令"><a href="#atos命令" class="headerlink" title="atos命令"></a>atos命令</h4><p>有了dSYM文件，就可以使用atos命令查找到具体代码行出现奔溃信息的地方</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">atos [-o executable] [-l loadAddress] [-arch architecture] [address ...]</span><br><span class="line"></span><br><span class="line">#-arch 选择框架arm64/arm32/x86_64</span><br></pre></td></tr></table></figure><h2 id="4、Crash收集"><a href="#4、Crash收集" class="headerlink" title="4、Crash收集"></a>4、Crash收集</h2><h4 id="KSCrash"><a href="#KSCrash" class="headerlink" title="KSCrash"></a><a href="https://github.com/kstenerud/KSCrash">KSCrash</a></h4><h4 id="SentryCocoa"><a href="#SentryCocoa" class="headerlink" title="SentryCocoa"></a><a href="https://github.com/getsentry/sentry-cocoa">SentryCocoa</a></h4><ul><li><h5 id="SentryCrashDynamicLinker"><a href="#SentryCrashDynamicLinker" class="headerlink" title="SentryCrashDynamicLinker"></a><a href="https://github.com/getsentry/sentry-cocoa/blob/master/Sources/SentryCrash/Recording/Tools/SentryCrashDynamicLinker.c">SentryCrashDynamicLinker</a></h5></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS越狱初体验</title>
      <link href="2020/01/15/iOS%E8%B6%8A%E7%8B%B1%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>2020/01/15/iOS%E8%B6%8A%E7%8B%B1%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="iOS越狱初体验"><a href="#iOS越狱初体验" class="headerlink" title="iOS越狱初体验"></a>iOS越狱初体验</h1><h2 id="iOS越狱能做到什么？"><a href="#iOS越狱能做到什么？" class="headerlink" title="iOS越狱能做到什么？"></a>iOS越狱能做到什么？</h2><ul><li>查看 第三方APP UI 排版方式、布局实现技术</li><li>获取三方App内部资源 .assets/.plist/icon…</li><li>修改APP 功能重新打包 (EX: 去广告)</li><li>反编译推测原始工程代码内容</li><li>dump 出 .h 头文件 / keycahin / db</li></ul><h2 id="越狱环境"><a href="#越狱环境" class="headerlink" title="越狱环境"></a>越狱环境</h2><p><strong>macOS 版本：</strong>10.15  Catalina<br><strong>iOS</strong> <strong>版本：</strong>iPhone 5s (iOS 9.0.1/ *<em>完美越狱****</em>必要**)<br><strong>Cydia:</strong> Open SSH</p><h2 id="逆向工程大致流程："><a href="#逆向工程大致流程：" class="headerlink" title="逆向工程大致流程："></a>逆向工程大致流程：</h2><ol><li>解密并导出应用程序、class-dump导出头文件</li><li>从当面界面入手，获取当前界面布局和控制器VC</li><li>hook相关类，记录输出调用的顺序和参数</li><li>关键函数，查看调用堆栈，hook测试结果</li><li>静态分析+动态调试分析关键函数的实现逻辑</li><li>模拟或篡改函数调用逻辑</li><li>制作插件或移植到非越狱设备上</li></ol><h2 id="1、越狱环境搭建"><a href="#1、越狱环境搭建" class="headerlink" title="1、越狱环境搭建"></a>1、越狱环境搭建</h2><ul><li>完美越狱的5c手机iOS8-iOS8.4 or 完美越狱的5s系统iOS9-iOS9.1</li><li>Mac安装<ul><li>iFunBox:管理文件系统</li></ul></li><li>iPhone安装<ul><li>爱思助手</li><li>Cydia</li></ul></li><li>通过Cydia安装下面的源到越狱设备上<ul><li>Apple File Conduit 2：可以访问整个iOS文件系统</li><li>iFile: 可以自由访问iOS文件系统</li></ul></li></ul><h2 id="2、Mac远程登录到iPhone"><a href="#2、Mac远程登录到iPhone" class="headerlink" title="2、Mac远程登录到iPhone"></a>2、Mac远程登录到iPhone</h2><h5 id="使用SSH（Secure-Shell安全外壳协议）来远程登录iPhone"><a href="#使用SSH（Secure-Shell安全外壳协议）来远程登录iPhone" class="headerlink" title="使用SSH（Secure Shell安全外壳协议）来远程登录iPhone"></a>使用SSH（Secure Shell安全外壳协议）来远程登录iPhone</h5><ul><li>使用SSH将所有传输的数据加密，防止DNS欺骗和IP欺骗</li><li>使用OpenSSH协议让Mac远程登录到iPhone</li></ul><h5 id="iPhone上通过Cydia来安装OpenSSH工具"><a href="#iPhone上通过Cydia来安装OpenSSH工具" class="headerlink" title="iPhone上通过Cydia来安装OpenSSH工具"></a>iPhone上通过Cydia来安装OpenSSH工具</h5><ul><li>Cydia搜索OpenSSH</li><li>安装Openssh</li><li>Mac终端：<ul><li>ssh root@host</li><li>输入初始密码<strong>alpine</strong></li><li>退出登录：exit</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh root@192.168.0.110</span><br><span class="line">root@192.168.0.110<span class="string">&#x27;s password:</span></span><br></pre></td></tr></table></figure><h4 id="password-for-ssh-root-host"><a href="#password-for-ssh-root-host" class="headerlink" title="password for ssh root@host"></a>password for <code>ssh root@host</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -s</span><br><span class="line">$ passwd</span><br><span class="line">Changing password <span class="keyword">for</span> root.</span><br><span class="line">New password:</span><br><span class="line">Retype new password:</span><br></pre></td></tr></table></figure><h4 id="报错：ImportError-No-module-named-usbmux"><a href="#报错：ImportError-No-module-named-usbmux" class="headerlink" title="报错：ImportError: No module named usbmux"></a>报错：ImportError: No module named usbmux</h4><ul><li><p>重新下载 <a href="https://links.jianshu.com/go?to=p%5Bhttps://cgit.sukimashita.com/usbmuxd.git/snapshot/usbmuxd-1.0.8.tar.gz%5D(https://cgit.sukimashita.com/usbmuxd.git/snapshot/usbmuxd-1.0.8.tar.gz)">usbmuxd工具包</a></p></li><li><p>保留<code>python-client</code> 文件夹</p></li></ul><h5 id="变更服务器身份信息"><a href="#变更服务器身份信息" class="headerlink" title="变更服务器身份信息"></a>变更服务器身份信息</h5><ul><li>删除公钥信息：<code>ssh-keygen -R yourIPAddress</code></li><li>删除known_hosts文件：<code>vim ~/.ssh/known_hosts</code></li></ul><p><strong>SSH基于秘钥的客户端认证</strong></p><p><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/20200404151240.png"></p><p>在客户端生成一对秘钥：公钥+私钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$: ssh-keygen</span><br></pre></td></tr></table></figure><ul><li>一路敲回车键（Enter）即可</li><li>OpenSSH默认生成的是RSA密钥，可以通过-t参数指定密钥类型</li><li>生成的公钥：~/.ssh/id_rsa.pub</li><li>生成的私钥：~/.ssh/id_rsa</li></ul><p>将客户端的公钥追加到服务器的授权文件尾部:<code>~/.ssh/authorized_keys</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id root@yourIPAddress</span><br></pre></td></tr></table></figure><h5 id="shell脚本文件"><a href="#shell脚本文件" class="headerlink" title="shell脚本文件"></a>shell脚本文件</h5><ul><li><p>通过sh、bash、source命令执行sh脚本文件</p><ul><li>sh和bash会在当前shell环境启动一个子进程来执行文件，执行后返回到父进程的shell环境</li><li><strong>执行cd时，子进程会进入到cd的目录，但是父进程的环境并未改变-即目录没有改变</strong></li></ul></li><li><p>source</p><ul><li>在当前shell环境执行脚本文件</li><li>执行cd后自动跳转到cd的目录</li><li>source可以用”.”代替，比如”.test.sh”使用source来执行shell脚本test.sh</li></ul></li></ul><h4 id="基于秘钥登录"><a href="#基于秘钥登录" class="headerlink" title="基于秘钥登录"></a>基于秘钥登录</h4><ul><li><p>1、在客户端生成一对相关联的密钥，将客户端的公钥信息追加到服务器的授权文件尾部（~/.ssh/authorized_keys）: </p><ul><li>生成秘钥：<code> ssh-keygen</code></li><li>追加到服务器授权文件：<code>ssh-copy-id root@手机IP地址</code></li><li>复制客户端的公钥：<code>scp ~/.ssh/id_rsa.pub root@服务器主机地址:~</code></li><li>SSH登录服务器：ssh root@服务器主机地址</li></ul><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/20200404165413.png" style="zoom:50%;" /></li><li><p>2、执行脚本: <code>python ~/tcprelay.py -t 22:10086</code></p><ul><li><strong>利用usbmuxd编写的py脚本将Mac的10086端口连接到iPhone上的22端口上</strong>Mac登录到10086端口： <code>ssh -p 10086 root@localhost</code></li></ul></li><li><p>3、Mac登录到10086端口： <code>ssh -p 10086 root@localhost</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5s:~/.ssh root<span class="comment"># cat authorized_keys</span></span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDIoCG1j95eGXgui0R8JRMSe2AHGi3RV7L1SNU/06WK21pc4tqwgiUphPwnf+yQ1SlhV4KH6utZWDa4STugDdp+nuUpMF7HYC+4iGSqP6GCpgiV+3ehqHd5cYhPIPUWinISJNJkIYU8HBUTw1Ua9HqTxrrIhV+AbZhKymDDJ+1X3+dnhu0yNZ2W4HpFDwAT9OB4go2PTGROyneHEz72bvcTAqkDdbKjbKOPD61bzlbHJqBAb0wCeTPEYWNwxb+lRcvzFs61TwCuLXQJ+GCyAtKZYzU/I9DGgfhgWQ38xB04rGMPjqOeEDRI9T8j8r3q8wP+K0BJmTlaMhYfl70U1ZUDPbqgfD93IpL4h+Mb0nqvWwkcqaFB4NPgrwvJG5WYWmR1mgu37rzC2f9BDUDz4izwSyEQDk7PwaLuuBfJet6Ro/vdHXGwUhTXP01Tkg+Qj/qcN7aMvPMXHkWNS6v83urRHwFgSSqJ1QC6O3xZlHZeRfPFt7UhcqgAGEgs8K2aCAc= Seven@MLideMacBook-Pro.local</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">5s:~/.ssh root<span class="comment"># cd /etc/ssh</span></span><br><span class="line">5s:/etc/ssh root<span class="comment"># ls -l</span></span><br><span class="line">total 272</span><br><span class="line">-rw-r--r-- 1 root wheel 242153 May  4  2018 moduli</span><br><span class="line">-rw-r--r-- 1 root wheel   1526 May  4  2018 ssh_config</span><br><span class="line">-rw------- 1 root wheel    672 May  4  2018 ssh_host_dsa_key</span><br><span class="line">-rw-r--r-- 1 root wheel    590 May  4  2018 ssh_host_dsa_key.pub</span><br><span class="line">-rw------- 1 root wheel    965 May  4  2018 ssh_host_key</span><br><span class="line">-rw-r--r-- 1 root wheel    630 May  4  2018 ssh_host_key.pub</span><br><span class="line">-rw------- 1 root wheel   1679 May  4  2018 ssh_host_rsa_key</span><br><span class="line">-rw-r--r-- 1 root wheel    382 May  4  2018 ssh_host_rsa_key.pub</span><br><span class="line">-rw-r--r-- 1 root wheel   3227 May  4  2018 sshd_config</span><br><span class="line">5s:/etc/ssh root<span class="comment"># cat ssh_host_rsa_key.pub</span></span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMQHoD19uC7fQpPXMN6GWR0YcGC7BlmLis4uyuu6hk7bqDADfHlXvU5cJ6gxSkrwjzFrWPcVD5JfyrAWEw2VGMxgtMoBTOjCRciDR+yJioTbeL85r8UdT5CtVDjGkiC+07SGopHnYt1x+45lMIMzdzVbLhKTv+DIm+OIawavJSIOvhHLlf4kFrrj0vuxkDOpV8fSRdnHLKMayQ6dmgFRlYJJSCLx10VLpUhgLA6g3m3wIq5bDSoR75uEYVUYny+itCQxVXFfydKsKncBAlxE2vKKh5Ry/pQaWFBff3jEDgfFtmqGtj5y3MlLjdtqn4zLTE3FwqCAEen63+gR8z4wof</span><br><span class="line">5s:/etc/ssh root<span class="comment">#</span></span><br></pre></td></tr></table></figure><h4 id="基于USB登录"><a href="#基于USB登录" class="headerlink" title="基于USB登录"></a>基于USB登录</h4><ul><li><p>下载usbmuxd工具包（下载v1.0.8版本，主要用到里面的一个python脚本：tcprelay.py）<br><a href="https://cgit.sukimashita.com/usbmuxd.git/snapshot/usbmuxd-1.0.8.tar.gz">https://cgit.sukimashita.com/usbmuxd.git/snapshot/usbmuxd-1.0.8.tar.gz</a></p></li><li><p>1、Mac登录到10010端口:<code>python tcprelay.py -t 22:10010</code></p><p>2、将iPhone的22端口（SSH端口）映射到Mac本地的10010端口:<code>ssh root@localhost -p 10010</code></p></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ python ~/pathto/python-client/tcprelay.py -t 22:10010</span><br><span class="line"></span><br><span class="line">$ ssh root@localhost -p 10010</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、Cycript动态调试"><a href="#3、Cycript动态调试" class="headerlink" title="3、Cycript动态调试"></a>3、Cycript动态调试</h2><ul><li>它是Objective-C++、JavaScript、Java等语法的混合产物</li><li>用来修改和调试正在运行中的Mac/iOS 应用</li><li>官网：<a href="http://www.cycript.org/">http://www.cycript.org/</a></li><li>Cydia安装Cycript后，即可在iPhone上调试运行中的App</li></ul><p><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/20200404163924.png"></p><h3 id="1、Cycript安装问题"><a href="#1、Cycript安装问题" class="headerlink" title="1、Cycript安装问题"></a>1、Cycript安装问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cycript</span><br><span class="line">dyld: Library not loaded: /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/libruby.2.0.0.dylib</span><br><span class="line">  Referenced from: /Users/mli/cycript_0.9.594//Cycript.lib/cycript-apl</span><br><span class="line">  Reason: image not found</span><br><span class="line">[1]    8373 abort      cycript</span><br></pre></td></tr></table></figure><h4 id="方式1：替换libruby-2-6-dylib"><a href="#方式1：替换libruby-2-6-dylib" class="headerlink" title="方式1：替换libruby.2.6.dylib"></a>方式1：替换<strong>libruby.2.6.dylib</strong></h4><p><strong>解决方式一：由于我的MacOS是版本10.15.4  Catalina,自带ruby版本是2.6</strong></p><p>如果你用homebrew已经安装过高版本的Ruby，那么你可以进到/usr/local/Cellar/ruby/2.6.0/lib这个目录下，将<strong>libruby.2.6.dylib</strong>拷贝一份，然后改名为<strong>libruby.2.0.0.dylib</strong>。并将改名后的文件拷贝到Cycript.lib目录下即可。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~: $ source .bash_profile</span><br><span class="line">~: $ cycript</span><br><span class="line">cy#   </span><br><span class="line"></span><br><span class="line">出现cy#表示成功了</span><br><span class="line">control + D可以退出 Cycript。</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/20200405085400.png"></p><p>如果是使用iTerm2+oh my zsh组合，可以在.zshrc配置文件中导入<code>source .bash_profile</code>，这样每次打开就不用手动执行了！</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ open ~/.zshrc</span><br><span class="line">添加配置：source ~/.bash_profile</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="方式2-安装ruby2-0"><a href="#方式2-安装ruby2-0" class="headerlink" title="方式2:安装ruby2.0"></a>方式2:安装ruby2.0</h4><p><strong>方式二：测试该方式对于MacOS Catalina无效，中文博客都是这种方式，brew install <a href="mailto:&#114;&#117;&#98;&#121;&#64;&#x32;&#46;&#48;">&#114;&#117;&#98;&#121;&#64;&#x32;&#46;&#48;</a> 也无法在Catalina系统上通过，所以直接修改libruby.2.6.dylib为libruby.2.0.0.dylib是简单有效的方法</strong></p><h5 id="1、关闭Mac的SIP"><a href="#1、关闭Mac的SIP" class="headerlink" title="1、关闭Mac的SIP"></a>1、关闭Mac的SIP</h5><ul><li>电脑重启，听到咚的时候，按住<code>command+R</code>，进入恢复模式</li><li>打开终端，输入<code>csrutil disable</code>，重启</li></ul><h5 id="2、查看ruby版本安装ruby2-0"><a href="#2、查看ruby版本安装ruby2-0" class="headerlink" title="2、查看ruby版本安装ruby2.0"></a>2、查看ruby版本安装ruby2.0</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /System/Library/Frameworks/Ruby.framework/Versions/</span><br><span class="line">$ ls</span><br><span class="line">2.6     Current</span><br><span class="line">$ brew install ruby@2.0</span><br></pre></td></tr></table></figure><h5 id="3、我的ruby版本是2-6直接把本机的ruby版本的复制一份，改为2-0即可"><a href="#3、我的ruby版本是2-6直接把本机的ruby版本的复制一份，改为2-0即可" class="headerlink" title="3、我的ruby版本是2.6直接把本机的ruby版本的复制一份，改为2.0即可"></a>3、我的ruby版本是2.6直接把本机的ruby版本的复制一份，改为2.0即可</h5><blockquote><p>1、关闭系统的禁用新版SIP防护<br>    电脑重启按住command+R，进入恢复模式<br>    打开终端，输入csrutil disable，重启<br>    如果想打开SIP，重复上两步，命令改为csrutil enable</p><p>2、禁用SIP之后，在终端输入<code>sudo mount -uw /</code>，然后重启finder<br>之后就可以对文件夹进行复制了，复制之后，对文件夹和文件名称修改为2.0，就可以正常使用Cycript了</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/</span><br><span class="line">sudo ln -s /System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/libruby.2.6.0.dylib /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/libruby.2.0.0.dylib</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/20200405074435.png" style="zoom:67%;" /><h3 id="2、Cycript使用"><a href="#2、Cycript使用" class="headerlink" title="2、Cycript使用"></a>2、Cycript使用</h3><h4 id="进程名称-进程ID"><a href="#进程名称-进程ID" class="headerlink" title="进程名称/进程ID"></a>进程名称/进程ID</h4><p>终端输入命令行：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ps -A</span><br></pre></td></tr></table></figure><p>启动越狱iPhone上的App如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/var/mobile/Containers/Bundle/Application/AAB4F619-1565-4D60-98B7-9A5465674C0E/ElevenPlayer.app/ElevenPlayer</span><br><span class="line">/var/mobile/Containers/Bundle/Application/B15E42B6-EFF0-482A-A184-2E56E18BC096/Taobao4iPhone.app/Taobao4iPhone</span><br><span class="line">/var/mobile/Containers/Bundle/Application/6907C865-4845-4423-92BF-65D61F4B9816/DingTalk.app/DingTalk</span><br></pre></td></tr></table></figure><ul><li>ElevenPlayer</li><li>Taobao4iPhone</li><li>DingTalk</li></ul><h4 id="Cycript调试"><a href="#Cycript调试" class="headerlink" title="Cycript调试"></a>Cycript调试</h4><p>1、通过Cydia安装Cycript</p><p>2、终端输入：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cycript -p Taobao4iPhone</span><br></pre></td></tr></table></figure><h4 id="Cycript基本语法"><a href="#Cycript基本语法" class="headerlink" title="Cycript基本语法"></a>Cycript基本语法</h4><ul><li>UIApp: [UIApplication sharedApplication]</li><li>var 变量名 = 变量值</li><li>通过内存地址获取内存中的对象: #内存地址</li><li>已经加载的所有OC类：ObjectiveC.classes</li><li>获取某个对象所有的成员变量：*对象名</li><li>递归打印view的所有子view: <code>view.recursiveDescription().toString()</code>等同于Xcode中的<code>[view recursiveDescription]</code></li><li>筛选某种类型的对象: <code>choose(UIViewController) choose(UITableViewCell)</code></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>s:~ root# cycript -p <span class="number">1856</span></span><br><span class="line">cy# UIApp</span><br><span class="line">#&quot;&lt;UIApplication: 0x147e6db70&gt;&quot;</span><br><span class="line">cy# var win = #0x147e6db70.keyWindow</span><br><span class="line">#&quot;&lt;UIWindow: 0x1490eba30; frame = (0 0; 320 568); gestureRecognizers = &lt;NSArray: 0x1490ed500&gt;; layer = &lt;UIWindowLayer: 0x1490e3f50&gt;&gt;&quot;</span><br><span class="line">cy# UIApp.keyWindow.rootViewController</span><br><span class="line">#&quot;&lt;TBMainViewController: 0x14807b200&gt;&quot;</span><br><span class="line">cy# choose(UICollectionViewCell)</span><br><span class="line">....</span><br></pre></td></tr></table></figure><ul><li><code>UIApp.keyWindow.recursiveDescription().toString()</code>可以打印所有层级</li></ul><h3 id="3、使用mjcript-cy"><a href="#3、使用mjcript-cy" class="headerlink" title="3、使用mjcript.cy"></a>3、使用<a href="https://github.com/CoderMJLee/mjcript/blob/master/mjcript.cy">mjcript.cy</a></h3><p> 基于Cycript实现的一些实用函数，下载地址：<a href="https://github.com/CoderMJLee/mjcript">https://github.com/CoderMJLee/mjcript</a></p><ul><li><p>1、下载mjcript库</p></li><li><p>2、将<code>mjcript.cy</code>文件拖到<code>/usr/lib/cycript0.9</code></p></li><li><p>3、SSH连接iOS设备</p></li><li><p>4、使用Cycript监听APP，<strong>通过命令<code>@import mjcript</code> 导入</strong></p></li></ul><h4 id="以前获取当前控制器"><a href="#以前获取当前控制器" class="headerlink" title="以前获取当前控制器"></a>以前获取当前控制器</h4>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cy# UIApp.keyWindow.rootViewController.presentedViewController</span><br><span class="line">cy# #0x1483cb600.childViewControllers</span><br></pre></td></tr></table></figure><h4 id="mjcript获取当前控制器"><a href="#mjcript获取当前控制器" class="headerlink" title="mjcript获取当前控制器"></a>mjcript获取当前控制器</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cy# MJFrontVc()</span><br><span class="line">cy# MJVcSubviews(#0x12fe775e0)</span><br></pre></td></tr></table></figure><h4 id="获取实例方法和类方法"><a href="#获取实例方法和类方法" class="headerlink" title="获取实例方法和类方法"></a>获取实例方法和类方法</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cy# MJInstanceMethods(#0x12fe775e0)</span><br><span class="line">cy# MJClassMethods(#0x12fe775e0)</span><br></pre></td></tr></table></figure><h4 id="python获取unicode"><a href="#python获取unicode" class="headerlink" title="python获取unicode"></a>python获取unicode</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python</span><br><span class="line">&gt;&gt;&gt; unicode(&#x27;开始使用&#x27;,&#x27;UTF-8&#x27;)</span><br><span class="line">u&#x27;\u5f00\u59cb\u4f7f\u7528&#x27;</span><br></pre></td></tr></table></figure><h4 id="获取网易登录界面"><a href="#获取网易登录界面" class="headerlink" title="获取网易登录界面"></a>获取网易登录界面</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cy# MJFrontVc()</span><br><span class="line">#&quot;&lt;NTESNBLoginController: 0x12fe775e0&gt;&quot;</span><br><span class="line">cy# MJFrontVcSubViews(#0x12fe775e0)</span><br><span class="line">cy# [#0x12fe775e0.view addSubview:view]</span><br></pre></td></tr></table></figure><h4 id="获取login相关方法"><a href="#获取login相关方法" class="headerlink" title="获取login相关方法"></a>获取login相关方法</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cy# MJInstanceMethods(#0x12fe775e0,/login/)</span><br><span class="line">[&#123;selector:@selector(loginEngine),type:&amp;&quot;@16@0:8&quot;&#125;,&#123;selector:@selector(loginBtnDidClicked:),type:&amp;&quot;v24@0:8@16&quot;&#125;,&#123;selector:@selector(loginDelegate),type:&amp;&quot;@16@0:8&quot;&#125;,&#123;selector:@selector(loginBottomSafeAreaHeight),type:&amp;&quot;d16@0:8&quot;&#125;,&#123;selector:@selector(loginStyleDesc),type:&amp;&quot;@16@0:8&quot;&#125;]</span><br></pre></td></tr></table></figure><h4 id="获取login相关成员变量"><a href="#获取login相关成员变量" class="headerlink" title="获取login相关成员变量"></a>获取login相关成员变量</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cy# MJIvars(#0x12fe775e0,/login/)</span><br><span class="line">&#123;_loginEngine:#&quot;&lt;NTESNBLoginEngine: 0x12fd390e0&gt;&quot;,_loginDelegate:#&quot;&lt;NTESNBLoginService: 0x12f024f50&gt;&quot;,_loginStyleDesc:#&quot;&lt;UILabel: 0x12fe78000; frame = (25 155; 80 22.5); text = &#x27;\xe6\x89\x8b\xe6\x9c\xba\xe5\x8f\xb7\xe7\x99\xbb\xe5\xbd\x95&#x27;; userInteractionEnabled = NO; layer = &lt;_UILabelLayer: 0x12dff5b80&gt;&gt;&quot;&#125;</span><br></pre></td></tr></table></figure><h2 id="4、Reveal安装与使用"><a href="#4、Reveal安装与使用" class="headerlink" title="4、Reveal安装与使用"></a>4、Reveal安装与使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><p>当前的Cydia中<a href="https://www.jianshu.com/p/bc31de468e28">软件源-http://apt.so/codermjlee</a>已连接不上，直接下载Reveal2Loader_1.0-3的deb文件</p><ul><li><a href="https://pan.baidu.com/s/1xnU0cvdz4BxKr9Ua1jyyXA">网盘链接</a>:  提取码: gk6j</li></ul></li><li><p>下载后直接把deb文件放在手机的<code>Device/var/root</code>路径下</p></li><li><p>安装之前需要先Cydia中安装<code>Applist</code>和<code>RocketBootstrap</code></p></li><li><p>Cydia中安装ExtensionList</p></li></ul><h4 id="安装reveal2load报错extensionlist-is-not-installed"><a href="#安装reveal2load报错extensionlist-is-not-installed" class="headerlink" title="安装reveal2load报错extensionlist is not installed.:"></a>安装reveal2load报错extensionlist is not installed.:</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>s:~ root# dpkg -i Reveal2Loader_1.<span class="number">0</span>-<span class="number">3</span>_iphoneos-arm.deb</span><br><span class="line">(Reading database ... 3159 files and directories currently installed.)</span><br><span class="line">Preparing to unpack Reveal2Loader_1.0-3_iphoneos-arm.deb ...</span><br><span class="line">Unpacking reveal2loader (1.0-3) over (1.0-3) ...</span><br><span class="line">dpkg: dependency problems prevent configuration of reveal2loader:</span><br><span class="line"> reveal2loader depends on com.zidaneno5.extensionlist; however:</span><br><span class="line">  Package com.zidaneno5.extensionlist is not installed.</span><br><span class="line"></span><br><span class="line">dpkg: error processing package reveal2loader (--install):</span><br><span class="line"> dependency problems - leaving unconfigured</span><br><span class="line">Errors were encountered while processing:</span><br><span class="line"> reveal2loader</span><br></pre></td></tr></table></figure><p><strong>解决方法：</strong></p><ul><li><p>Cydia搜索并安装<code>ExtensionList 1.0-1</code></p></li><li><p>再次执行 <code>dpkg -i Reveal2Loader_1.0-3_iphoneos-arm.deb</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>s:~ root# dpkg -i Reveal2Loader_1.<span class="number">0</span>-<span class="number">3</span>_iphoneos-arm.deb</span><br><span class="line">(Reading database ... 3164 files and directories currently installed.)</span><br><span class="line">Preparing to unpack Reveal2Loader_1.0-3_iphoneos-arm.deb ...</span><br><span class="line">Unpacking reveal2loader (1.0-3) over (1.0-3) ...</span><br><span class="line">Setting up reveal2loader (1.0-3) ...</span><br></pre></td></tr></table></figure><ul><li>done</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/20200406072115.png"></p><h4 id="The-operation-couldn’t-be-completed"><a href="#The-operation-couldn’t-be-completed" class="headerlink" title="**The operation couldn’t be completed. **"></a>**The operation couldn’t be completed. **</h4><blockquote><p>The app is linked against an older version of the Reveal library. You may need to update the Reveal library in your app.</p></blockquote><ul><li><p>Reveal破解版不可用</p></li><li><p>如有破解版Reveal可参考：<a href="https://www.jianshu.com/p/f37ea9b9d2f3">https://www.jianshu.com/p/f37ea9b9d2f3</a></p></li></ul><h2 id="5、脱壳"><a href="#5、脱壳" class="headerlink" title="5、脱壳"></a>5、脱壳</h2><h4 id="5-1-通过ipa获取Mach-O"><a href="#5-1-通过ipa获取Mach-O" class="headerlink" title="5.1 通过ipa获取Mach-O"></a>5.1 通过ipa获取Mach-O</h4><ul><li><p>PP助手下载的ipa包是解密后的包</p></li><li><p><strong>Apple Configurator 2</strong>下载的ipa包是加密包</p></li></ul><h5 id="使用Apple-Configurator-2下载ipa"><a href="#使用Apple-Configurator-2下载ipa" class="headerlink" title="使用Apple Configurator 2下载ipa"></a>使用<strong>Apple Configurator 2</strong>下载ipa</h5><ul><li><p>1、<a href="https://juejin.im/post/5c6e87af51882523f02666a6">安装Apple Configurator 2</a></p></li><li><p>2、进入Finder：<code>~/Library/Group Containers/K36BKF7T3D.group.com.apple.configurator/Library/Caches/Assets/TemporaryItems/</code> 获取ipa，记得复制出来，弹框消失后IPA文件也会消失</p></li><li><p><strong>3、如果在解压ipa包时，出现“IPA已损坏 移除到垃圾篓”之类的提示，可以尝试把后缀名.ipa修改成.zip</strong></p></li><li><p>4、解压zip包-&gt;进入Payload-&gt; 右键显示包内容-&gt;获取可执行文件如下</p><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/uploadjokeMachofile.png" style="zoom:50%;" /></li><li><p>4中获取的可执行文件不能正常导出头文件的话，直接查找越狱设备的一下路径：</p><ul><li><p><code>/var/mobile/Containers/Bundle/Application/</code>可以获取当前越狱设备中安装的应用的.app文件，直接拷贝到Mac的Desktop上</p><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/20200408165039.png" style="zoom:50%;" /></li><li><p><code>ps -A</code>查看当前App也能看到上面这个路径</p></li></ul></li></ul><h4 id="5-2-Class-dump"><a href="#5-2-Class-dump" class="headerlink" title="5.2 Class-dump"></a>5.2 Class-dump</h4><p>1、下载地址：<a href="http://stevenygard.com/projects/class-dump/">http://stevenygard.com/projects/class-dump/</a></p><p>2、打开终端输入 <code>open /usr/local/bin</code></p><p>3、把dmg文件中的class-dump文件复制到<code> /usr/local/bin</code></p><p>4、更改权限：终端输入 <code>sudo chmod 777 /usr/local/bin/class-dump</code></p><p>5、显示class-dump的用法和版本: <code>class-dump --help</code></p><p>6、cd 到5.1获取的Mach-O文件所在目录</p><p><strong>用终端输入命令 <code>class-dump -H [MachO文件的路径] -o [输出文件夹路径]</code>,就可以得到所有的.h文件了</strong></p><p>自己编译的项目没有加密，能够解析出来。class-dump不能直接将AppStore上的app的头文件导出来，你只会导出CDStructures.h这个头文件，而这里边基本是没有信息的。相当于Apple在app上加了一层壳（加密了），需要把这层壳砸破。</p><p>class-dump -H test.decrypted -o test，但是只能导出CDStructures.h，这个文件，但是</p><p>于是就使用class-dump -arch armv64 -H test.decrypted -o test 来导出，竟然能导出所有的头文件了。</p><h4 id="5-2查看可执行文件是否加密？"><a href="#5-2查看可执行文件是否加密？" class="headerlink" title="5.2查看可执行文件是否加密？"></a>5.2查看可执行文件是否加密？</h4><h5 id="使用MachOView"><a href="#使用MachOView" class="headerlink" title="使用MachOView"></a>使用MachOView</h5><ul><li>Load Commands -&gt; LC_ENCRYPTION_INFO -&gt; Crypt ID的值</li><li>0代表未加密</li></ul><h5 id="使用otool"><a href="#使用otool" class="headerlink" title="使用otool"></a>使用otool</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">otool -l machoFile | grep cycript</span><br></pre></td></tr></table></figure><h4 id="5-3、Clutch脱壳"><a href="#5-3、Clutch脱壳" class="headerlink" title="5.3、Clutch脱壳"></a>5.3、Clutch脱壳</h4><h5 id="usr-bin-Clutch-Permission-denied"><a href="#usr-bin-Clutch-Permission-denied" class="headerlink" title="/usr/bin/Clutch Permission denied"></a>/usr/bin/Clutch Permission denied</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5s:~ root<span class="comment"># Clutch</span></span><br><span class="line">-sh: /usr/bin/Clutch: Permission denied</span><br></pre></td></tr></table></figure><p><strong>权限不够，输入命令如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">5s:~ root<span class="comment"># chmod +x /usr/bin/Clutch</span></span><br><span class="line">5s:~ root<span class="comment"># Clutch</span></span><br><span class="line">Usage: Clutch [OPTIONS]</span><br><span class="line">-b --binary-dump &lt;value&gt; Only dump binary files from specified bundleID</span><br><span class="line">-d --dump &lt;value&gt;        Dump specified bundleID into .ipa file</span><br><span class="line">-i --print-installed     Print installed applications</span><br><span class="line">   --clean               Clean /var/tmp/clutch directory</span><br><span class="line">   --version             Display version and <span class="built_in">exit</span></span><br><span class="line">-? --<span class="built_in">help</span>                Display this <span class="built_in">help</span> and <span class="built_in">exit</span></span><br><span class="line">-n --no-color            Print with colors disabled</span><br></pre></td></tr></table></figure><h5 id="Clutch-i-查看可以脱壳的App"><a href="#Clutch-i-查看可以脱壳的App" class="headerlink" title="Clutch -i 查看可以脱壳的App"></a>Clutch -i 查看可以脱壳的App</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">5s:~ root<span class="comment"># Clutch -i</span></span><br><span class="line">Installed apps:</span><br><span class="line">1:   知识星球 &lt;com.unnoo.quan&gt;</span><br><span class="line">2:   爱思加强版 &lt;com.pd.A4Player&gt;</span><br><span class="line">3:   饿了么 &lt;me.ele.ios.eleme&gt;</span><br><span class="line">4:   暴走漫画 &lt;goodluck.push.baozou&gt;</span><br><span class="line">5:   喜马拉雅「听书社区」电台有声小说相声评书 &lt;com.gemd.iting&gt;</span><br><span class="line">6:   微视 &lt;com.tencent.microvision&gt;</span><br><span class="line">7:   猿辅导-小学初中高中全科在线互动直播课 &lt;com.fenbi.tutor&gt;</span><br><span class="line">8:   今日头条 &lt;com.ss.iphone.article.News&gt;</span><br><span class="line">9:   手机淘宝 &lt;com.taobao.taobao4iphone&gt;</span><br><span class="line">10:  爱奇艺 &lt;com.qiyi.iphone&gt;</span><br><span class="line">11:  全民K歌 &lt;com.tencent.QQKSong&gt;</span><br><span class="line">12:  钉钉 &lt;com.laiwang.DingTalk&gt;</span><br><span class="line">13:  书旗小说 &lt;com.shuqicenter.reader&gt;</span><br><span class="line">14:  QQ &lt;com.tencent.mqq&gt;</span><br><span class="line">15:  快手极速版 &lt;com.kuaishou.nebula&gt;</span><br><span class="line">16:  腾讯新闻 &lt;com.tencent.info&gt;</span><br><span class="line">17:  京东 &lt;com.360buy.jdmobile&gt;</span><br><span class="line">18:  腾讯视频 &lt;com.tencent.live4iphone&gt;</span><br><span class="line">19:  微信读书 &lt;com.tencent.weread&gt;</span><br><span class="line">20:  布卡漫画 &lt;bukaios.ibuka.com&gt;</span><br><span class="line">21:  支付宝 &lt;com.alipay.iphoneclient&gt;</span><br><span class="line">22:  快手 &lt;com.jiangjia.gif&gt;</span><br><span class="line">23:  网易新闻 &lt;com.netease.news&gt;</span><br><span class="line">24:  抖音短视频 &lt;com.ss.iphone.ugc.Aweme&gt;</span><br></pre></td></tr></table></figure><h5 id="Cluth-d-获取ipa文件"><a href="#Cluth-d-获取ipa文件" class="headerlink" title="Cluth -d 获取ipa文件"></a>Cluth -d 获取ipa文件</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>s:~ root# Clutch -d <span class="number">4</span></span><br><span class="line">Zipping BaoManReader.app</span><br><span class="line">Swapping architectures..</span><br><span class="line">ASLR slide: 0xd0000</span><br><span class="line">Dumping &lt;BaoManReader&gt; (armv7)</span><br><span class="line">Patched cryptid (32bit segment)</span><br><span class="line">Writing new checksum</span><br><span class="line">ASLR slide: 0x100038000</span><br><span class="line">Dumping &lt;BaoManReader&gt; (arm64)</span><br><span class="line">Patched cryptid (64bit segment)</span><br><span class="line">Writing new checksum</span><br><span class="line">DONE: /private/var/mobile/Documents/Dumped/goodluck.push.baozou-iOS8.0-(Clutch-2.0.4).ipa</span><br><span class="line">Finished dumping goodluck.push.baozou in 29.4 seconds</span><br></pre></td></tr></table></figure><p><strong>脱壳后生成IPA文件</strong></p><p> <strong>IPA生成后的路径: <code>/var/mobile/Documents/Dumped/</code>拷贝到桌面上查看当前的加密状态</strong></p><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/20200408232750.png" style="zoom:50%;" /><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ otool -l BaoManReader_old | grep crypt</span><br><span class="line">     cryptoff 16384</span><br><span class="line">    cryptsize 10403840</span><br><span class="line">      cryptid 1</span><br><span class="line">     cryptoff 16384</span><br><span class="line">    cryptsize 11370496</span><br><span class="line">      cryptid 1</span><br><span class="line">存在加密id</span><br><span class="line">$ otool -l BaoManReader | grep crypt</span><br><span class="line">     cryptoff 16384</span><br><span class="line">    cryptsize 10403840</span><br><span class="line">      cryptid 0</span><br><span class="line">     cryptoff 16384</span><br><span class="line">    cryptsize 11370496</span><br><span class="line">      cryptid 0</span><br><span class="line">不存在加密的id</span><br></pre></td></tr></table></figure><h5 id="class-dump导出头文件headers"><a href="#class-dump导出头文件headers" class="headerlink" title="class-dump导出头文件headers"></a>class-dump导出头文件headers</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ class-dump -H BaoManReader -o Headers</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法实战</title>
      <link href="2019/06/22/2020%E7%AE%97%E6%B3%95%E5%AE%9E%E6%88%98100%E9%81%93/"/>
      <url>2019/06/22/2020%E7%AE%97%E6%B3%95%E5%AE%9E%E6%88%98100%E9%81%93/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么学算法？"><a href="#为什么学算法？" class="headerlink" title="为什么学算法？"></a>为什么学算法？</h1><h4 id="为什么要学习算法？"><a href="#为什么要学习算法？" class="headerlink" title="为什么要学习算法？"></a>为什么要学习算法？</h4><ul><li>算法是内功，决定你武功的高度</li><li>算法能让你更好更快理解一门语言系统的设计理念</li><li>算法能让你触类旁通</li><li>momo算法题：接雨水  反转链表II  旋转矩阵</li></ul><h1 id="主要算法"><a href="#主要算法" class="headerlink" title="主要算法"></a>主要算法</h1><ul><li>基础技巧：分治、二分、贪心</li><li>排序算法：快速排序、归并排序、计数排序</li><li>搜索算法：<a href="https://mp.weixin.qq.com/s/xrxU0SB9c-vLu4QHyODO7w">回溯算法</a>、递归、深度优先遍历，<a href="https://mp.weixin.qq.com/s/WH_XGm1-w5882PnenymZ7g">BFS</a>广度优先遍历，二叉搜索树等</li><li>图论：最短路径、最小生成树</li><li>动态规划：背包问题、最长子序列</li></ul><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><ul><li>数组与链表：单 / 双向链表</li><li>栈与队列</li><li>哈希表</li><li>堆：最大堆 ／ 最小堆</li><li>树与图：最近公共祖先、并查集</li><li>字符串：前缀树（字典树） ／ 后缀树</li></ul><h2 id="1、常见数据结构"><a href="#1、常见数据结构" class="headerlink" title="1、常见数据结构"></a>1、常见数据结构</h2><h3 id="数组-链表-栈-队列-树"><a href="#数组-链表-栈-队列-树" class="headerlink" title="数组 链表 栈 队列 树"></a>数组 链表 栈 队列 树</h3><ul><li>有效的字母异位词</li><li>每K个一组翻转链表</li><li><a href="https://mp.weixin.qq.com/s/RKEBDAS3ioKT9o1sBj95eQ">数组中第K个最大元素</a></li><li>合法的括号</li><li>每日温度</li><li><a href="https://mp.weixin.qq.com/s/ioKXTMZufDECBUwRRp3zaA">滑动窗口</a>最大值</li><li>二叉搜索树中第K小的元素</li></ul><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><hr><ul><li><ol start="0"><li>删除链表中的节点</li></ol></li><li><ol><li>单链表反转</li></ol></li><li><ol start="2"><li>环形链表 &amp; II</li></ol></li><li><ol start="3"><li>合并两个有序的链表</li></ol></li><li><ol start="4"><li>删除链表倒数第n个结点</li></ol></li><li><ol start="5"><li>求链表的中间结点</li></ol></li></ul><hr><ul><li><ol><li><ol start="2"><li>两数相加 Meidum</li></ol></li></ol></li><li><ol start="2"><li>删除链表的倒数第N个节点 Medium</li></ol></li><li><ol start="3"><li>两数相加 II Medium</li></ol></li><li><ol start="4"><li>删除链表中的节点 Easy</li></ol></li><li><ol start="5"><li>奇偶链表</li></ol></li><li><ol start="6"><li>反转链表 Easy</li></ol></li><li><ol start="7"><li>反转链表 II Medium</li></ol></li><li><ol start="8"><li> 两两交换链表中的节点 Medium<br>方法1：非递归<br>方法2：递归</li></ol></li><li><ol start="9"><li>相交链表 Easy</li></ol></li><li><ol start="10"><li>回文链表 Easy</li></ol></li><li><ol start="11"><li>合并两个有序链表 Easy</li></ol></li><li><ol start="12"><li>环形链表 Easy</li></ol></li><li>13）环形链表 II Medium<br>方法1：Hash<br>方法2：快慢指针（Floyd 算法）<br>方法3：快慢指针（普通法）</li></ul><h2 id="2、高级数据结构"><a href="#2、高级数据结构" class="headerlink" title="2、高级数据结构"></a>2、高级数据结构</h2><ul><li>优先队列：前K个高频单词</li><li><a href="https://mp.weixin.qq.com/s/wleZmUZh6TvCyiRyLGEGhw">二叉树</a><ul><li>[<a href="http://mp.weixin.qq.com/s?__biz=MzI3NzcwNjY3NQ==&mid=2247483823&idx=1&sn=6e46c12c5c89555f5de9018ab881d53c&chksm=eb636373dc14ea65a7f1c01513b889c0ab3335fd55ccdaa937098c60a3aa3c4bef4465ba58c7&scene=21#wechat_redirect">leetcode二叉树系列]1 二叉树的中序遍历</a></li><li>[<a href="http://mp.weixin.qq.com/s?__biz=MzI3NzcwNjY3NQ==&mid=2247483829&idx=1&sn=469f3e30c44ea4186e1bf286ce42ea93&chksm=eb636369dc14ea7f77412b537b8158836480c6494294d08dcd1de0e04944dad4bc53a9a69426&scene=21#wechat_redirect">leetcode二叉树系列]2 二叉树的层次遍历</a></li><li>[<a href="http://mp.weixin.qq.com/s?__biz=MzI3NzcwNjY3NQ==&mid=2247483857&idx=1&sn=4a4ab387783b3b42526b0d79ade66549&chksm=eb63630ddc14ea1b7368a60645732fe182f97a3d2fc385cb8eff1ec276f6e2a4388a4cc0a515&scene=21#wechat_redirect">leetcode二叉树系列]5 二叉树翻转</a></li></ul></li><li>图： 检测一个图是否为二部图</li><li>前缀树：单词查找II</li><li>线段树：计算后续较小元素的数量</li><li>树状数组：二位区域求和</li></ul><h2 id="3、排序"><a href="#3、排序" class="headerlink" title="3、排序"></a>3、排序</h2><ul><li>冒泡排序</li><li>插入排序</li><li>归并排序</li><li>快速排序</li><li>拓扑排序</li></ul><h2 id="4、递归与回溯"><a href="#4、递归与回溯" class="headerlink" title="4、递归与回溯"></a>4、递归与回溯</h2><ul><li>解码的方法</li><li>中心对称数</li><li>组合总数</li><li>N皇后</li></ul><h2 id="5、深度优先于广度优先搜索"><a href="#5、深度优先于广度优先搜索" class="headerlink" title="5、深度优先于广度优先搜索"></a>5、深度优先于广度优先搜索</h2><ul><li>深度优先于广度优先搜索递归实现</li><li>复杂度</li><li>LeetCode:寻找最短路径</li></ul><h2 id="6、动态规划"><a href="#6、动态规划" class="headerlink" title="6、动态规划"></a>6、动态规划</h2><ul><li>LeetCode:求最长的一个上升子序列</li><li>动态规划难点：递推公式</li><li>动态规划解题分类（一）：线性规划</li><li>LeetCode经典:不同路径</li><li>动态规划解题分类（二）：区间规划</li><li>LeetCode经典:最长的回文子序列</li><li>动态规划解题分类（三）：约束规划</li><li>LeetCode经典: 0-1背包问题</li></ul><h2 id="7、二分搜索与贪婪"><a href="#7、二分搜索与贪婪" class="headerlink" title="7、二分搜索与贪婪"></a>7、二分搜索与贪婪</h2><ul><li><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/">34. 在排序数组中查找元素的第一个和最后一个位置</a></li><li>从有序数组中找第一个大于K的数</li><li>搜索旋转排序数组</li><li>日志查询</li></ul><h2 id="8、高频真题"><a href="#8、高频真题" class="headerlink" title="8、高频真题"></a>8、高频真题</h2><ul><li>无重复字符的最长子串</li><li>求两个排序树组的中位数</li><li>合并K个有序链表</li><li>合并区间</li><li>无重叠区间</li><li>火星字典</li><li>基本计算器</li><li>正规表达式匹配</li><li>柱状图中最大的矩形</li><li>实现strStr()-KMP算法</li><li>回文对</li><li>至多包含K个不同字符的最长子串</li><li>收集雨水II</li></ul><h2 id="9、字节Top50"><a href="#9、字节Top50" class="headerlink" title="9、字节Top50"></a>9、字节Top50</h2><ul><li><ol><li>两数之和</li></ol></li><li><ol start="2"><li>两数相加</li></ol></li><li><ol start="3"><li>无重复字符的最长子串</li></ol></li><li><ol start="4"><li>最长回文子串</li></ol></li><li><ol start="5"><li>接雨水</li></ol></li><li><ol start="6"><li>反转链表</li></ol></li><li><ol start="7"><li>寻找两个有序数组的中位数</li></ol></li><li><ol start="8"><li>盛最多水的容器</li></ol></li><li><ol start="9"><li>两数之和</li></ol></li><li><ol start="10"><li>合并两个有序链表</li></ol></li><li><ol start="11"><li>最大子序和</li></ol></li><li><ol start="12"><li>LRU缓存机制</li></ol></li><li><ol start="13"><li>K 个一组翻转链表</li></ol></li><li><ol start="14"><li>买卖股票的最佳时机</li></ol></li><li><ol start="15"><li>分发糖果</li></ol></li><li><ol start="16"><li>搜索旋转排序数组</li></ol></li><li><ol start="17"><li>有效的括号</li></ol></li><li><ol start="18"><li>合并K个排序链表</li></ol></li><li><ol start="19"><li>合并区间</li></ol></li><li><ol start="20"><li>整数反转</li></ol></li><li><ol start="21"><li>字典序的第K小数字</li></ol></li><li><ol start="22"><li>回文数</li></ol></li><li><ol start="23"><li>数组中的第K个最大元素</li></ol></li><li><ol start="24"><li>全排列</li></ol></li><li><ol start="25"><li>删除链表的倒数第N个节点</li></ol></li><li><ol start="26"><li>下一个排列</li></ol></li><li><ol start="27"><li>编辑距离</li></ol></li><li><ol start="28"><li>岛屿数量</li></ol></li><li><ol start="29"><li>复原IP地址</li></ol></li><li><ol start="30"><li>爬楼梯</li></ol></li><li><ol start="31"><li>正则表达式匹配</li></ol></li><li><ol start="32"><li>相交链表</li></ol></li><li><ol start="33"><li>二叉树的中序遍历</li></ol></li><li><ol start="34"><li>二叉树的层次遍历</li></ol></li><li><ol start="35"><li>二叉树的锯齿形层次遍历</li></ol></li><li><ol start="36"><li><pre><code>对称二叉树</code></pre></li></ol></li><li><ol start="37"><li>二叉树的右视图</li></ol></li><li><ol start="38"><li>零钱兑换</li></ol></li><li><ol start="39"><li>螺旋矩阵</li></ol></li><li><ol start="40"><li>字符串转换整数 (atoi)</li></ol></li><li><ol start="41"><li>括号生成</li></ol></li><li><ol start="42"><li><pre><code>合并两个有序数组</code></pre></li></ol></li><li><ol start="43"><li><pre><code>重排链表</code></pre></li></ol></li><li><ol start="44"><li><pre><code>最长公共前缀</code></pre></li></ol></li><li><ol start="45"><li>二叉树的最大深度</li></ol></li><li><ol start="46"><li>第二高的薪水</li></ol></li><li><ol start="47"><li>最长有效括号</li></ol></li><li><ol start="48"><li>两两交换链表中的节点</li></ol></li><li><ol start="49"><li>单词搜索</li></ol></li><li><ol start="50"><li>买卖股票的最佳时机 II</li></ol></li></ul><h2 id="10、LeetCode-top100"><a href="#10、LeetCode-top100" class="headerlink" title="10、LeetCode top100"></a>10、LeetCode top100</h2><p><a href="https://leetcode-cn.com/problemset/hot-100/">top100</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法基础</title>
      <link href="2019/06/22/2020%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
      <url>2019/06/22/2020%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="算法基础"><a href="#算法基础" class="headerlink" title="算法基础"></a>算法基础</h1><h4 id="为什么要学习算法？"><a href="#为什么要学习算法？" class="headerlink" title="为什么要学习算法？"></a>为什么要学习算法？</h4><ul><li><p>算法是内功，决定你武功的高度</p></li><li><p>算法能让你更好更快理解一门语言系统的设计理念</p></li><li><p>算法能让你触类旁通</p></li></ul><h2 id="1-、数组"><a href="#1-、数组" class="headerlink" title="1 、数组"></a>1 、数组</h2><hr><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(<span class="number">_</span> nums1: <span class="keyword">inout</span> [Int], <span class="number">_</span> m: Int, <span class="number">_</span> nums2: [Int], <span class="number">_</span> n: Int)</span></span> &#123;</span><br><span class="line">     <span class="keyword">var</span> p1 = m - <span class="number">1</span>, p2 = n - <span class="number">1</span></span><br><span class="line">     <span class="keyword">var</span> cur = m + n - <span class="number">1</span></span><br><span class="line">     <span class="keyword">while</span> (p2 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (p1 &gt;= <span class="number">0</span> &amp;&amp; nums1[p1] &gt;= nums2[p2]) &#123;</span><br><span class="line">             nums1[cur] = nums1[p1]</span><br><span class="line">             cur -= <span class="number">1</span>; p1 -= <span class="number">1</span></span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             nums1[cur] = nums2[p2]</span><br><span class="line">             cur -= <span class="number">1</span>; p2 -= <span class="number">2</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h4 id="面试题-16-16-部分排序"><a href="#面试题-16-16-部分排序" class="headerlink" title="面试题 16.16. 部分排序"></a><a href="https://leetcode-cn.com/problems/sub-sort-lcci/">面试题 16.16. 部分排序</a></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">subSort</span><span class="params">(<span class="number">_</span> array: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="comment">//1 从左往右扫描，应该越来越大，出现比max小的，记录下来</span></span><br><span class="line">        <span class="comment">//2 从右往左扫描，应该越来越小，出现比min小的，记录下来</span></span><br><span class="line">        <span class="comment">//临界条件（array.count &lt; 2）</span></span><br><span class="line">        <span class="keyword">if</span> array.<span class="built_in">count</span> &lt; <span class="number">2</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> [-<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">max</span> = array[<span class="number">0</span>], <span class="type">R</span> = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;array.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> v = array[i]</span><br><span class="line">            <span class="keyword">if</span> v &gt;= <span class="built_in">max</span> &#123;</span><br><span class="line">                <span class="built_in">max</span> = v</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">R</span> = i</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  <span class="comment">//如果有序</span></span><br><span class="line">         <span class="keyword">if</span> <span class="type">R</span> == -<span class="number">1</span> &#123; <span class="keyword">return</span> [-<span class="number">1</span>, -<span class="number">1</span>] &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">min</span> = array[array.<span class="built_in">count</span> - <span class="number">1</span>], <span class="type">L</span> = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>...(array.<span class="built_in">count</span> - <span class="number">2</span>)).reversed() &#123;</span><br><span class="line">            <span class="keyword">let</span> v = array[i]</span><br><span class="line">            <span class="keyword">if</span> v &lt;= <span class="built_in">min</span> &#123;</span><br><span class="line">                <span class="built_in">min</span> = v</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">L</span> = i</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> [<span class="type">L</span>, <span class="type">R</span>]</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 75. 颜色分类</span></span><br><span class="line"><span class="comment"> 给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 注意:</span></span><br><span class="line"><span class="comment"> 不能使用代码库中的排序函数来解决这道题。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setColors</span><span class="params">(<span class="number">_</span> nums: <span class="keyword">inout</span> [Int])</span></span> &#123;</span><br><span class="line">    <span class="comment">//1、遇到0 和 left交换，left++ cur++</span></span><br><span class="line">    <span class="comment">//2、遇到1 cur++</span></span><br><span class="line">    <span class="comment">//3、遇到2 和 right交换，right-- cur++  :更正交换后right--但是cur不能++，因为right的位置需要重新判断</span></span><br><span class="line">    <span class="comment">//循环条件cur&lt;=right</span></span><br><span class="line">    <span class="keyword">var</span> cur = <span class="number">0</span>, <span class="keyword">left</span> = <span class="number">0</span>, <span class="keyword">right</span> = nums.<span class="built_in">count</span> - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> cur &lt;= <span class="keyword">right</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> curNum = nums[cur]</span><br><span class="line">        <span class="keyword">if</span> curNum == <span class="number">0</span> &#123;</span><br><span class="line">            swapNum(&amp;nums, cur, <span class="keyword">left</span>)</span><br><span class="line">            cur += <span class="number">1</span></span><br><span class="line">            <span class="keyword">left</span> += <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> curNum == <span class="number">1</span> &#123;</span><br><span class="line">            cur += <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            swapNum(&amp;nums, cur, <span class="keyword">right</span>)</span><br><span class="line">            <span class="comment">//注意：遇到2和right交换值以后，right--需要重新判断cur的值，所以cur不能++</span></span><br><span class="line">            <span class="comment">//cur += 1</span></span><br><span class="line">            <span class="keyword">right</span> -= <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swapNum</span><span class="params">(<span class="number">_</span> nums: <span class="keyword">inout</span> [Int], <span class="number">_</span> i: Int, <span class="number">_</span> j: Int)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> temp = nums[i]</span><br><span class="line">    nums[i] = nums[j]</span><br><span class="line">    nums[j] = temp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、链表"><a href="#2、链表" class="headerlink" title="2、链表"></a>2、<a href="https://leetcode-cn.com/tag/linked-list/">链表</a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"></span><br><span class="line">ListNode next;</span><br><span class="line"></span><br><span class="line">ListNode(<span class="keyword">int</span> x) &#123; val = x; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h4 id="1：-删除链表中的节点"><a href="#1：-删除链表中的节点" class="headerlink" title="1： 删除链表中的节点"></a>1： <a href="https://leetcode-cn.com/problems/delete-node-in-a-linked-list/">删除链表中的节点</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(ListNode node)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">node.val = node.next.val;</span><br><span class="line"></span><br><span class="line">node.next = node.next.next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2：反转链表"><a href="#2：反转链表" class="headerlink" title="2：反转链表"></a>2：<a href="https://leetcode-cn.com/problems/reverse-linked-list/">反转链表</a></h4><blockquote><p>题目描述：反转一个单链表。</p></blockquote><p>Solution1: 递归法</p><p><img src="http://q2yey8eca.bkt.clouddn.com/%E9%80%92%E5%BD%92%E7%BF%BB%E8%BD%AC.png" alt="链表翻转"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">      ListNode newHead = reverseList(head.next);</span><br><span class="line"></span><br><span class="line">      head.next.next = head;</span><br><span class="line"></span><br><span class="line">      head.next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> newHead;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Solotion2: 非递归-双指针（<a href="https://leetcode-cn.com/problems/reverse-linked-list/solution/fan-zhuan-lian-biao-shuang-zhi-zhen-di-gui-yao-mo-/%EF%BC%89">https://leetcode-cn.com/problems/reverse-linked-list/solution/fan-zhuan-lian-biao-shuang-zhi-zhen-di-gui-yao-mo-/）</a></p><blockquote><p> 正确示例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">ListNode newHead = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">ListNode temp = head.next;</span><br><span class="line"></span><br><span class="line">head.next = newHead;</span><br><span class="line"></span><br><span class="line">newHead = head;</span><br><span class="line"></span><br><span class="line">head = temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> newHead;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3：反转链表-II"><a href="#3：反转链表-II" class="headerlink" title="3：反转链表 II"></a>3：<a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/">反转链表 II</a></h4><blockquote><p>题目描述：反转从位置 m 到 n 的链表。请使用一趟扫描完成反转。</p></blockquote><blockquote><p>说明:</p></blockquote><p>1 ≤ m ≤ n ≤ 链表长度。</p><h4 id="4：环形链表"><a href="#4：环形链表" class="headerlink" title="4：环形链表"></a>4：<a href="https://leetcode-cn.com/problems/linked-list-cycle/">环形链表</a></h4><blockquote><p>第一步：找到快慢指针相遇的节点，如果找不到，证明没有环，返回null</p></blockquote><p>第二步：head节出发与slow节点出发，相遇的节点为环的入口节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123; <span class="keyword">return</span> <span class="keyword">false</span>; &#125;</span><br><span class="line"></span><br><span class="line">ListNode fast = head.next;</span><br><span class="line"></span><br><span class="line">ListNode slow = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">slow = slow.next;</span><br><span class="line"></span><br><span class="line">fast = fast.next.next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fast == slow) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> fast == slow;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5：环形链表II-寻找环的入口节点"><a href="#5：环形链表II-寻找环的入口节点" class="headerlink" title="5：环形链表II-寻找环的入口节点"></a>5：环形链表II-寻找环的入口节点</h4><blockquote><p>问题描述：给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p></blockquote><blockquote><p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。</p></blockquote><blockquote><p>说明：不允许修改给定的链表。</p></blockquote><p><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/solution/huan-xing-lian-biao-ii-by-leetcode/">官方解读Gif</a></p><p><img src="http://q2yey8eca.bkt.clouddn.com/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.gif" alt="环形链表入口"></p><h4 id="6：703-数据流中的第K大元素"><a href="#6：703-数据流中的第K大元素" class="headerlink" title="6：703. 数据流中的第K大元素"></a>6：<a href="https://leetcode-cn.com/problems/kth-largest-element-in-a-stream/solution/">703. 数据流中的第K大元素</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KthLargest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> PriorityQueue&lt;Integer&gt; queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> limit;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">KthLargest</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">limit = k;</span><br><span class="line"></span><br><span class="line">queue = <span class="keyword">new</span> PriorityQueue&lt;&gt;(k);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line"></span><br><span class="line">add(num);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (queue.size() &lt; limit) &#123;</span><br><span class="line"></span><br><span class="line">queue.add(val);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &gt; queue.peek()) &#123;</span><br><span class="line"></span><br><span class="line">queue.poll();</span><br><span class="line"></span><br><span class="line">queue.add(val);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> queue.peek();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h2 id="3、栈和队列"><a href="#3、栈和队列" class="headerlink" title="3、栈和队列"></a>3、栈和队列</h2><h4 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a><a href="https://leetcode-cn.com/problems/valid-parentheses/submissions/">20. 有效的括号</a></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValid</span><span class="params">(<span class="number">_</span> s: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stack: [<span class="type">String</span>] = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dic: [<span class="type">String</span>: <span class="type">String</span>] = [<span class="string">&quot;)&quot;</span>: <span class="string">&quot;(&quot;</span>, <span class="string">&quot;&#125;&quot;</span>: <span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;]&quot;</span>: <span class="string">&quot;[&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> s &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> key = <span class="type">String</span>(<span class="built_in">c</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !dic.keys.<span class="built_in">contains</span>(key) &#123;</span><br><span class="line"></span><br><span class="line">stack.append(key)</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> stack.<span class="built_in">count</span> == <span class="number">0</span> || dic[key] != stack.removeLast() &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> stack.<span class="built_in">count</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="232-用栈实现队列"><a href="#232-用栈实现队列" class="headerlink" title="232. 用栈实现队列"></a>232. <a href="https://leetcode-cn.com/problems/implement-queue-using-stacks/solution/">用栈实现队列</a></h4><h4 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225. 用队列实现栈"></a>225. <a href="https://leetcode-cn.com/problems/implement-stack-using-queues/solution/">用队列实现栈</a></h4><h2 id="4、优先队列"><a href="#4、优先队列" class="headerlink" title="4、优先队列"></a>4、优先队列</h2><ol><li><p>Heap (Binary, Binomial, Fibonacci)</p></li><li><p>Binary Search Tree</p></li></ol><p><img src="https://imgkr.cn-bj.ufileos.com/c3688989-5aaa-49cd-ba04-eb46bf8d2cbf.png" alt="Mini Heap"></p><p><img src="https://imgkr.cn-bj.ufileos.com/4e377821-42a4-4517-8179-234b3d68e0f9.png" alt="Max Heap"></p><p>Heap Wiki</p><p>• <a href="https://en.wikipedia.org/wiki/Heap_(data_structure)">https://en.wikipedia.org/wiki/Heap_(data_structure)</a></p><h4 id="239、滑动窗口最大值"><a href="#239、滑动窗口最大值" class="headerlink" title="239、滑动窗口最大值"></a>239、<a href="https://leetcode-cn.com/problems/sliding-window-maximum/">滑动窗口最大值</a></h4><h2 id="5、哈希表-与双指针法"><a href="#5、哈希表-与双指针法" class="headerlink" title="5、哈希表 与双指针法"></a>5、哈希表 与双指针法</h2><h4 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a><a href="https://leetcode-cn.com/problems/two-sum/">1. 两数之和</a></h4><p>1.1<a href="https://leetcode-cn.com/problems/two-sum/solution/liang-shu-zhi-he-by-leetcode-2/">暴力循环</a></p><p><a href="https://leetcode-cn.com/problems/two-sum/solution/jie-suan-fa-1-liang-shu-zhi-he-by-guanpengchn/">1.2一次哈希思路</a><br>标签：哈希映射</p><ul><li>这道题本身如果通过暴力遍历的话也是很容易解决的，时间复杂度在 O(n2)</li><li>由于哈希查找的时间复杂度为 O(1)，所以可以利用哈希容器 map 降低时间复杂度</li><li>遍历数组 nums，i 为当前下标，每个值都判断map中是否存在 target-nums[i] 的 key 值</li><li>如果存在则找到了两个值，如果不存在则将当前的 (nums[i],i) 存入 map 中，继续遍历直到找到为止</li><li>如果最终都没有结果则抛出异常</li><li>时间复杂度：O(n)</li></ul><h4 id="15-三数之和-硅谷面试"><a href="#15-三数之和-硅谷面试" class="headerlink" title="15. 三数之和  (硅谷面试)"></a>15. <a href="https://leetcode-cn.com/problems/3sum/">三数之和</a>  (硅谷面试)</h4><p>给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。</p><blockquote><p>注意：答案中不可以包含重复的三元组。</p></blockquote><p>解题思路：</p><ul><li>1、可以三重loops循环时间复杂度是O(<em>n3</em>)</li><li>2、可以两层循环得到a+b,然后在Set集合中查找符合-(a+b)的值是否存在，时间复杂度是O(<em>n</em>2)</li><li>3、先排序 后查找：时间复杂度为O(<em>n</em>2)，先排序后得到元素a, 元素b从数组下标1开始，元素c从数组下标array.length开始，检查（a + b + c）的值：<ul><li>如果（a + b + c）&gt; 0, c–</li><li>如果 （a + b + c）&lt; 0, b++</li><li>如果（a + b + c） == 0， 得到结果</li><li>整个过程时间复杂度是O(N * N)</li></ul></li></ul><p><a href="https://leetcode-cn.com/problems/3sum/solution/hua-jie-suan-fa-15-san-shu-zhi-he-by-guanpengchn/">解题思路3</a> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || len &lt; <span class="number">3</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        Arrays.sort(nums); <span class="comment">// 排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">// 如果当前数字大于0，则三数之和一定大于0，所以结束循环</span></span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>; <span class="comment">// 去重</span></span><br><span class="line">            <span class="keyword">int</span> L = i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> R = len-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(L &lt; R)&#123;</span><br><span class="line">                <span class="keyword">int</span> sum = nums[i] + nums[L] + nums[R];</span><br><span class="line">                <span class="keyword">if</span>(sum == <span class="number">0</span>)&#123;</span><br><span class="line">                    ans.add(Arrays.asList(nums[i],nums[L],nums[R]));</span><br><span class="line">                    <span class="keyword">while</span> (L&lt;R &amp;&amp; nums[L] == nums[L+<span class="number">1</span>]) L++; <span class="comment">// 去重</span></span><br><span class="line">                    <span class="keyword">while</span> (L&lt;R &amp;&amp; nums[R] == nums[R-<span class="number">1</span>]) R--; <span class="comment">// 去重</span></span><br><span class="line">                    L++;</span><br><span class="line">                    R--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) L++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) R--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">作者：guanpengchn</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/3sum/solution/hua-jie-suan-fa-15-san-shu-zhi-he-by-guanpengchn/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="求最小公倍数LCM"><a href="#求最小公倍数LCM" class="headerlink" title="求最小公倍数LCM"></a>求最小公倍数LCM</h4><p>GCD：最大公约数(Greatest Common Divisor)。指两个或多个整数共有约数中最大的一个。</p><p>LCM：最小公倍数(Least Common Multiple)。两个或多个整数公有的倍数叫做它们的公倍数，其中除0以外最小的一个公倍数就叫做这几个整数的最小公倍数。</p><p>最小公倍数与最大公约数的关系：** </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LCM(A,B)×GCD(A,B)&#x3D;A×B</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中LCM是最小公倍数，GCD是最大公约数。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MARK:求最小公倍数 </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lcm</span><span class="params">(<span class="number">_</span> a:Int,<span class="number">_</span> b:Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="comment">//求最大公约数    </span></span><br><span class="line">  <span class="keyword">let</span> num:<span class="type">Int</span> = gcd(a,b)</span><br><span class="line">  <span class="keyword">return</span> a * b / num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以求最小公倍数的问题可以转化为求最大公约数。</p><h4 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18. 四数之和"></a><a href="https://leetcode-cn.com/problems/4sum/">18. 四数之和</a></h4><h4 id="拓展：K数之和"><a href="#拓展：K数之和" class="headerlink" title="拓展：K数之和"></a>拓展：<a href="https://leetcode-cn.com/problems/4sum/solution/kshu-zhi-he-de-tong-yong-mo-ban-by-mrxiong/">K数之和</a></h4><h4 id="242、有效的字母异位词"><a href="#242、有效的字母异位词" class="headerlink" title="242、有效的字母异位词"></a><a href="https://leetcode-cn.com/problems/valid-anagram/">242、有效的字母异位词</a></h4><h2 id="6、二叉树"><a href="#6、二叉树" class="headerlink" title="6、二叉树"></a>6、二叉树</h2><h4 id="10道常见题目"><a href="#10道常见题目" class="headerlink" title="10道常见题目"></a>10道常见题目</h4><ul><li><p><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">二叉树的前序遍历：（递归+迭代）</a></p></li><li><p><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">二叉树的中序遍历：（递归+迭代）</a></p></li><li><p><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/">二叉树的后序遍历：（递归+迭代）</a></p></li><li><p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/">二叉树的层次遍历：（迭代）</a></p></li><li><p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/">二叉树的层次遍历II</a></p></li><li><p><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/">二叉树的最大深度：（递归+迭代）</a></p></li><li><p><a href="https://leetcode-cn.com/problems/maximum-width-of-binary-tree/">二叉树最大宽度</a></p></li><li><p><a href="https://leetcode-cn.com/problems/symmetric-tree/">对称二叉树</a></p></li><li><p><a href="https://leetcode-cn.com/problems/invert-binary-tree">翻转一颗二叉树</a></p></li></ul><ul><li><p><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/">从中序与后序遍历序列构造二叉树</a></p></li><li><p><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">从前序与中序遍历序列构造二叉树</a></p></li><li><p><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/">从前序和后序遍历构造二叉树</a></p></li><li><p><a href="https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/">二叉树展开为链表:  （迭代+递归 )</a></p></li><li><p>思考：已知前序、中序遍历结果求后序遍历</p></li><li><p>思考：已知中序、后序遍历结果求前序遍历</p></li><li><p><a href="https://juejin.im/post/5c46b19ee51d45653e3c9ae3#heading-13">Objective-C版本</a></p></li></ul><h2 id="DFS与BFS概念"><a href="#DFS与BFS概念" class="headerlink" title="DFS与BFS概念"></a>DFS与BFS概念</h2><ul><li><p>DFS 深度优先搜索：以深度为优先级，从根节点开始一直到达叶子结点，再返回根到达另一个分支。可以细分为先序遍历，中序遍历和后序遍历。</p></li><li><p>BFS 广度优先搜索：按照高度顺序一层一层地访问，高层的结点会比低层的结点先被访问到。相当于层次遍历。</p></li></ul><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><h4 id="1、前序遍历"><a href="#1、前序遍历" class="headerlink" title="1、前序遍历"></a>1、前序遍历</h4><p>前序遍历递归法：左子树-根节点-右子树</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">preorderTraversal</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span>[]&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> res: [<span class="type">Int</span>] = []</span><br><span class="line">    res.append(root.val)</span><br><span class="line">    res += preorderTraversal(root.<span class="keyword">left</span>)</span><br><span class="line">    res += preorderTraversal(root.<span class="keyword">right</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2、中序遍历"><a href="#2、中序遍历" class="headerlink" title="2、中序遍历"></a>2、中序遍历</h4><p>中序遍历递归法：左子树-根节点-右子树</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inorderTraversal</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span>  &#123; </span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> res: [<span class="type">Int</span>] = []</span><br><span class="line">        res += inorderTraversal(root.<span class="keyword">left</span>)</span><br><span class="line">        res.append(root.val)</span><br><span class="line">        res += inorderTraversal(root.<span class="keyword">right</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3、后序遍历"><a href="#3、后序遍历" class="headerlink" title="3、后序遍历"></a>3、后序遍历</h4><p>后序遍历递归法：左子树-右子树-根节点</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">postorderTraversal</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line">    <span class="keyword">var</span> result: [<span class="type">Int</span>] = []</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">left</span> = root.<span class="keyword">left</span> &#123;</span><br><span class="line">        result += postorderTraversal(<span class="keyword">left</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">right</span> = root.<span class="keyword">right</span> &#123;</span><br><span class="line">        result += postorderTraversal(<span class="keyword">right</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    result.append(root.val)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-1、二叉树的层次遍历"><a href="#4-1、二叉树的层次遍历" class="headerlink" title="4.1、二叉树的层次遍历"></a>4.1、<a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/">二叉树的层次遍历</a></h4><p><img src="https://img-blog.csdn.net/20180226001828381" alt="该图是借用的网上的，侵权删"></p><p>图片来自网络，侵权删</p><p>实现思路：使用队列<br>1.将根节点入队<br>2.循环执行以下操作，直到队列为空</p><blockquote><ul><li>将队头节点A出队，进行访问</li><li>将A的左子节点入队</li><li>将A的右子节点入队</li></ul></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">levelOrder</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">      <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> []&#125;</span><br><span class="line">      <span class="keyword">var</span> result: [[<span class="type">Int</span>]] = []</span><br><span class="line">      <span class="keyword">var</span> queue: [<span class="type">TreeNode</span>] = []</span><br><span class="line">      queue.append(root)</span><br><span class="line">      <span class="keyword">while</span> !queue.isEmpty &#123;</span><br><span class="line">          <span class="comment">//创建存储当前level的数组</span></span><br><span class="line">          <span class="keyword">var</span> level: [<span class="type">Int</span>] = []</span><br><span class="line">          <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;queue.<span class="built_in">count</span> &#123;</span><br><span class="line">              <span class="comment">//remove队列头结点，并且把该头结点的left和right加入到队列中，循环到队列为空</span></span><br><span class="line">              <span class="keyword">let</span> node = queue.removeFirst()</span><br><span class="line">              level.append(node.val)</span><br><span class="line">              <span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">left</span> = node.<span class="keyword">left</span> &#123; queue.append(<span class="keyword">left</span>) &#125;</span><br><span class="line">              <span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">right</span> = node.<span class="keyword">right</span> &#123; queue.append(<span class="keyword">right</span>)&#125;</span><br><span class="line">          &#125;</span><br><span class="line">          result.append(level)</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-2、二叉树的层次遍历-II"><a href="#4-2、二叉树的层次遍历-II" class="headerlink" title="4.2、二叉树的层次遍历 II"></a>4.2、<a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/">二叉树的层次遍历 II</a></h4><p>从下到上依次返回每一层的结果，解决方案依然是使用队列的先进先出，node入队列的通知，node的左子树、右子树依次入队列，然后用一个temp数组来保存每一层的数值，插入到结果results数组下标位置为0的位置。</p><p>代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">levelOrderBottom</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line">    <span class="keyword">var</span> results: [[<span class="type">Int</span>]] = []</span><br><span class="line">    <span class="keyword">var</span> queue: [<span class="type">TreeNode</span>] = [root]</span><br><span class="line">    <span class="keyword">while</span> !queue.isEmpty &#123;</span><br><span class="line">        <span class="keyword">var</span> levelItems: [<span class="type">Int</span>] = []</span><br><span class="line">        <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;queue.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> node = queue.removeFirst()</span><br><span class="line">            levelItems.append(node.val)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">left</span> = node.<span class="keyword">left</span> &#123; queue.append(<span class="keyword">left</span>) &#125;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">right</span> = node.<span class="keyword">right</span> &#123; queue.append(<span class="keyword">right</span>) &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        results.insert(levelItems, at: <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>自底向上返回层次遍历的值与普通的层次遍历的唯一区别在于每一层的结果levelItems是插入到数组下标为0的位置上，利用swift中数组插入方法insert(levelItems,at: 0)即可。</strong></p><h4 id="4-2、迭代法解决前中后序"><a href="#4-2、迭代法解决前中后序" class="headerlink" title="4.2、迭代法解决前中后序"></a>4.2、迭代法解决前中后序</h4><p><strong>递归和非递归的区别，无非是一个人为保存现场，一个代码底层自动保存现场。</strong></p><h4 id="前序遍历迭代法"><a href="#前序遍历迭代法" class="headerlink" title="前序遍历迭代法"></a>前序遍历迭代法</h4><ul><li>利用栈实现<br>1.将root入栈<br>2.循环执行以下操作，直到栈为空<ul><li>弹出栈顶节点top，进行访问</li><li>将top.right入栈</li><li>将top.left入栈</li></ul></li></ul><h4 id="中序遍历迭代法"><a href="#中序遍历迭代法" class="headerlink" title="中序遍历迭代法"></a>中序遍历迭代法</h4><p>利用栈实现<br>1.设置node=root<br>2.循环执行以下操作<br>✓如果node!=null<br>✓将node入栈<br>✓设置node=node.left<br>✓如果node==null<br>✓如果栈为空，结束遍历<br>✓如果栈不为空，弹出栈顶元素并赋值给node</p><p>​     ➢对node进行访问<br>​    ➢设置node=node.right</p><h4 id="后序遍历迭代法"><a href="#后序遍历迭代法" class="headerlink" title="后序遍历迭代法"></a>后序遍历迭代法</h4><p>◼利用栈实现<br>1.将root入栈<br>2.循环执行以下操作，直到栈为空</p><ul><li><p>如果栈顶节点是叶子节点或者上一次访问的节点是栈顶节点的子节点</p><p>✓弹出栈顶节点，进行访问</p><p>否则<br>✓将栈顶节点的right、left按顺序入栈</p></li></ul><hr><h4 id="5、-二叉树的最大深度"><a href="#5、-二叉树的最大深度" class="headerlink" title="5、 二叉树的最大深度"></a><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/">5、 二叉树的最大深度</a></h4><p>首先要明白什么是最大深度：二叉树最大深度是指根节点到最远的叶子节点最长路径上的节点数目</p><p>解法一：要求二叉树的最大深度按照递归思想也就是求max(leftHeight, rightHeight) + 1</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、递归法：max(leftHeight, rightHeight) + 1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxDepth</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> root = root &#123;</span><br><span class="line">        <span class="keyword">var</span> leftHeight = <span class="number">0</span>, rightHeight = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">left</span> = root.<span class="keyword">left</span> &#123; leftHeight = maxDepth(<span class="keyword">left</span>) &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">right</span> = root.<span class="keyword">right</span> &#123; rightHeight = maxDepth(<span class="keyword">right</span>) &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(leftHeight, rightHeight) + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解放二：使用队列，分层遍历DFS，记录层数即可</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2、利用队列-和分层遍历类似</span></span><br><span class="line"><span class="comment">//只不过分层遍历是头结点出队列时，将头队列的值保存起来，这里求最大深度是depth += 1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxDepth</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line"><span class="keyword">var</span> depth = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> queue: [<span class="type">TreeNode</span>] = [root]</span><br><span class="line"><span class="keyword">while</span> !queue.isEmpty &#123;</span><br><span class="line">    depth += <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> size = queue.<span class="built_in">count</span></span><br><span class="line">    <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;size &#123;</span><br><span class="line">        <span class="keyword">let</span> node = queue.removeFirst()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">left</span> = node.<span class="keyword">left</span> &#123; queue.append(<span class="keyword">left</span>) &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">right</span> = node.<span class="keyword">right</span> &#123; queue.append(<span class="keyword">right</span>) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> depth</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6、-二叉树最大宽度"><a href="#6、-二叉树最大宽度" class="headerlink" title="6、 二叉树最大宽度"></a><a href="https://leetcode-cn.com/problems/maximum-width-of-binary-tree/">6、 二叉树最大宽度</a></h4><p>解题思路：求二叉树最大宽度，可以使用分层遍历</p><ul><li><p>使用队列queue来记录每一层入队的结点current</p></li><li><p>使用数组list来记录当前层所有结点的索引index </p><ul><li> 将current的左节点入队列同时将其左孩子结点的索引 2 * index放到list中记录</li><li> 同理current的右孩子结点right入队列queue的同时将右结点索引2 * index + 1放到list数组中记录，这样每一层的索引都被list数组记录</li></ul></li><li><p>最后用maxLen记录当前层最大深度= list.last! - list.first! + 1</p></li></ul><p>代码实现：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">widthOfBinaryTree</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="number">0</span>&#125;</span><br><span class="line">        <span class="keyword">var</span> queue: [<span class="type">TreeNode</span>] = [root]</span><br><span class="line">        <span class="keyword">var</span> list: [<span class="type">Int</span>] = [<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">var</span> maxLen = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> !queue.isEmpty &#123;</span><br><span class="line">            <span class="keyword">let</span> size = queue.<span class="built_in">count</span></span><br><span class="line">            <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;size &#123;</span><br><span class="line">                <span class="keyword">let</span> node = queue.removeFirst()</span><br><span class="line">                <span class="keyword">let</span> index = list.removeFirst()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">left</span> = node.<span class="keyword">left</span> &#123; </span><br><span class="line">                    queue.append(<span class="keyword">left</span>)</span><br><span class="line">                    list.append(<span class="number">2</span> &amp;* index)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">right</span> = node.<span class="keyword">right</span> &#123;</span><br><span class="line">                    queue.append(<span class="keyword">right</span>)</span><br><span class="line">                    list.append(<span class="number">2</span> &amp;* index &amp;+ <span class="number">1</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> list.<span class="built_in">count</span> &gt;= <span class="number">2</span> &#123; <span class="comment">//注意临界条件是大于等于2，因为count为1宽度也是1</span></span><br><span class="line">                maxLen = <span class="built_in">max</span>(maxLen, list.last! &amp;- list.first! &amp;+ <span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLen</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：mingriweiji-github</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/maximum-width-of-binary-tree/solution/fen-ceng-bian-li-shi-yong-dui-lie-qlai-ji-lu-mei-y/</span></span><br><span class="line">来源：力扣（<span class="type">LeetCode</span>）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码实现：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> queue: [(<span class="type">TreeNode</span>, <span class="type">Int</span>)] = []</span><br><span class="line">    queue.append((root, <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">var</span> maxLen = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> !queue.isEmpty &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="built_in">count</span> = queue.<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span> ..&lt; <span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> curr = queue.removeFirst() </span><br><span class="line">            <span class="keyword">let</span> index = curr.<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">left</span> = curr.<span class="number">0</span>.<span class="keyword">left</span> &#123;</span><br><span class="line">                queue.append((<span class="keyword">left</span>, index &amp;* <span class="number">2</span>))</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">right</span> = curr.<span class="number">0</span>.<span class="keyword">right</span> &#123;</span><br><span class="line">                queue.append((<span class="keyword">right</span>, index &amp;* <span class="number">2</span> + <span class="number">1</span>))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> !queue.isEmpty &#123;</span><br><span class="line">            maxLen = <span class="built_in">max</span>(maxLen, queue.last!.<span class="number">1</span> &amp;- queue.first!.<span class="number">1</span> &amp;+ <span class="number">1</span>)                </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> maxLen</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="7、-验证二叉搜索树"><a href="#7、-验证二叉搜索树" class="headerlink" title="7、 验证二叉搜索树"></a><a href="https://leetcode-cn.com/problems/validate-binary-search-tree/">7、 验证二叉搜索树</a></h4><p>1、递归法</p><p>递归法解题的关键在于：<strong>maxLeft &lt; root.val &lt; minRight</strong></p><ul><li>1、临界条件:root==null </li><li>2、递归左子树，找到最大值max和根节点root.val进行比较，如果左子树的max大于等于根节点的值，返回false</li><li>3、递归右子树，找到右子树的最小值min和根节点root.val比较，如果右子树的min小于等于根节点，返回false</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(TreeNode root, Integer min, Integer max)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (min != <span class="keyword">null</span> &amp;&amp; min &gt; root.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">if</span> (max != <span class="keyword">null</span> &amp;&amp; max &lt; root.val) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> helper(root.left,min,root.val) &amp;&amp; helper(root.right,root.val,max);</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> helper(root,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的help()方法不能通过测试用例[1,1]这种重复元素的数组，判断条件错误，修改如下：</p><p>Java版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(TreeNode root, Integer min, Integer max)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (min != <span class="keyword">null</span> &amp;&amp; min &gt;= root.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (max != <span class="keyword">null</span> &amp;&amp; max &lt;= root.val) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helper(root.left,root.val,max) &amp;&amp; helper(root.right,min,root.val);</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>swift版本:注意可选项解包，和判断条件是left.max &gt;= root.val, right.min &lt;= root.val</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValidBST</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">      <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line">      <span class="keyword">return</span> helper(root,<span class="literal">nil</span>,<span class="literal">nil</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">helper</span><span class="params">(<span class="number">_</span> root: TreeNode?, <span class="number">_</span> <span class="built_in">min</span>: Int?, <span class="number">_</span> <span class="built_in">max</span>: Int?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">      <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//左节点需要小于根节点值</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">let</span> <span class="built_in">min</span> = <span class="built_in">min</span>,</span><br><span class="line">      <span class="built_in">min</span> &lt;= root.val &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">//右节点需要大于根节点</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">let</span> <span class="built_in">max</span> = <span class="built_in">max</span>,</span><br><span class="line">      <span class="built_in">max</span> &gt;= root.val &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> helper(root.<span class="keyword">left</span>, root.val,<span class="built_in">max</span>) &amp;&amp; helper(root.<span class="keyword">right</span>, <span class="built_in">min</span>, root.val)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8、对称二叉树"><a href="#8、对称二叉树" class="headerlink" title="8、对称二叉树"></a>8、<a href="https://leetcode-cn.com/problems/symmetric-tree/">对称二叉树</a></h4><p>解题思路：给定一个二叉树，看它是否镜像对称关键是1、左右子树的值相等 2、左子树的left和右子树的right是镜像对称，利用递归思想容易解决。</p><p>24ms代码实现如下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSymmetric</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> isMirror(root,root)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isMirror</span><span class="params">(<span class="number">_</span> p: TreeNode?, <span class="number">_</span> q: TreeNode?)</span></span> -&gt; <span class="type">Bool</span>&#123;</span><br><span class="line">    <span class="comment">//注意临界条件判断，先判断p、q均为空的情况</span></span><br><span class="line">    <span class="keyword">if</span> p == <span class="literal">nil</span> &amp;&amp; q == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> p == <span class="literal">nil</span> || q == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;         </span><br><span class="line">    <span class="keyword">return</span> (p!.val == q!.val) &amp;&amp; isMirror(p!.<span class="keyword">left</span>, q!.<span class="keyword">right</span>) &amp;&amp; isMirror(p!.<span class="keyword">right</span>, q!.<span class="keyword">left</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>20ms代码实现如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSymmetric</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">     <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line">     <span class="keyword">return</span> isMirror(root.<span class="keyword">left</span>, root.<span class="keyword">right</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">isMirror</span><span class="params">(<span class="number">_</span> p: TreeNode?, <span class="number">_</span> q: TreeNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> p == <span class="literal">nil</span>, q == <span class="literal">nil</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> <span class="keyword">let</span> p = p, <span class="keyword">let</span> q = q, p.val == q.val &#123;</span><br><span class="line">         <span class="keyword">return</span> isMirror(p.<span class="keyword">left</span>, q.<span class="keyword">right</span>) &amp;&amp; isMirror(p.<span class="keyword">right</span>, q.<span class="keyword">left</span>)</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二遍：</p><p>执行用时 :16 ms, 在所有 swift 提交中击败了94.96%的用户</p><p>内存消耗 :19.9 MB, 在所有 swift 提交中击败了5.00%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSymmetric</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line">    <span class="keyword">return</span> isMirror(root.<span class="keyword">left</span>, root.<span class="keyword">right</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isMirror</span><span class="params">(<span class="number">_</span> p: TreeNode?, <span class="number">_</span> q: TreeNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> p == <span class="literal">nil</span> &amp;&amp; q == <span class="literal">nil</span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> p = p,<span class="keyword">let</span> q = q, p.val == q.val &#123;</span><br><span class="line">        <span class="keyword">return</span> isMirror(p.<span class="keyword">left</span>, q.<span class="keyword">right</span>) &amp;&amp; isMirror(p.<span class="keyword">right</span>, q.<span class="keyword">left</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="9、翻转一颗二叉树"><a href="#9、翻转一颗二叉树" class="headerlink" title="9、翻转一颗二叉树"></a><a href="https://leetcode-cn.com/problems/invert-binary-tree">9、翻转一颗二叉树</a></h4><p>迭代就要遍历二叉树，利用分层遍历用队列交换每个结点的左右子树。</p><p>8ms迭代法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">invertTree</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">TreeNode?</span> &#123;</span><br><span class="line">        <span class="comment">//迭代法翻转二叉树,交换每一个结点的左右子树，我们用队列储存没有交换过的左右子树的结点，拿到current结点后，交换左右结点，然后再将该节点的左右结点加入到队列中。直到队列为空截止。</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">var</span> queue: [<span class="type">TreeNode</span>] = [root]</span><br><span class="line">        <span class="keyword">while</span> !queue.isEmpty &#123;</span><br><span class="line">            <span class="keyword">var</span> node = queue.removeFirst()</span><br><span class="line">            <span class="keyword">let</span> temp = node.<span class="keyword">left</span></span><br><span class="line">            node.<span class="keyword">left</span> = node.<span class="keyword">right</span></span><br><span class="line">            node.<span class="keyword">right</span> = temp</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">left</span> = node.<span class="keyword">left</span> &#123; queue.append(<span class="keyword">left</span>) &#125;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">right</span> = node.<span class="keyword">right</span> &#123; queue.append(<span class="keyword">right</span>) &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>16ms递归法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">invertTree</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">TreeNode?</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">let</span> temp = root.<span class="keyword">left</span></span><br><span class="line">        root.<span class="keyword">left</span> = root.<span class="keyword">right</span></span><br><span class="line">        root.<span class="keyword">right</span> = temp</span><br><span class="line">        </span><br><span class="line">        invertTree(root.<span class="keyword">left</span>)</span><br><span class="line">        invertTree(root.<span class="keyword">right</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>8ms递归法：同上面的区别是没有解包，解包耗时8ms?</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">invertTree</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">TreeNode?</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">    <span class="keyword">let</span> temp = root?.<span class="keyword">left</span></span><br><span class="line">    root?.<span class="keyword">left</span> = root?.<span class="keyword">right</span></span><br><span class="line">    root?.<span class="keyword">right</span> = temp</span><br><span class="line"></span><br><span class="line">    invertTree(root?.<span class="keyword">left</span>)</span><br><span class="line">    invertTree(root?.<span class="keyword">right</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二遍：分层遍历后不要把当前节点放入队列中，我们要的是翻转二叉树，不需要记录当前节点node</p><img src="http://q2yey8eca.bkt.clouddn.com/%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91.png" style="zoom:60%;" /><h2 id="7、二叉树搜索树"><a href="#7、二叉树搜索树" class="headerlink" title="7、二叉树搜索树"></a>7、二叉树搜索树</h2><h3 id="10道常见题目-1"><a href="#10道常见题目-1" class="headerlink" title="10道常见题目"></a>10道常见题目</h3><ul><li><h4 id="验证二叉搜索树"><a href="#验证二叉搜索树" class="headerlink" title=" 验证二叉搜索树"></a><a href="https://leetcode-cn.com/problems/validate-binary-search-tree/"> 验证二叉搜索树</a></h4></li><li><h4 id="二叉搜索树中的插入操作"><a href="#二叉搜索树中的插入操作" class="headerlink" title="二叉搜索树中的插入操作"></a><a href="https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/">二叉搜索树中的插入操作</a></h4></li><li><h4 id="二叉搜索树中的搜索"><a href="#二叉搜索树中的搜索" class="headerlink" title="二叉搜索树中的搜索"></a><a href="https://leetcode-cn.com/problems/search-in-a-binary-search-tree/">二叉搜索树中的搜索</a></h4></li><li><h4 id="删除二叉搜索树中的节点"><a href="#删除二叉搜索树中的节点" class="headerlink" title="删除二叉搜索树中的节点"></a><a href="https://leetcode-cn.com/problems/delete-node-in-a-bst/">删除二叉搜索树中的节点</a></h4></li><li><h4 id="二叉搜索树的最小绝对差"><a href="#二叉搜索树的最小绝对差" class="headerlink" title="二叉搜索树的最小绝对差"></a><a href="https://leetcode-cn.com/problems/minimum-absolute-difference-in-bst/">二叉搜索树的最小绝对差</a></h4></li><li><h4 id="二叉搜索树结点最小距离"><a href="#二叉搜索树结点最小距离" class="headerlink" title="二叉搜索树结点最小距离"></a><a href="https://leetcode-cn.com/problems/minimum-distance-between-bst-nodes/">二叉搜索树结点最小距离</a></h4></li><li><h4 id="将有序数组转换为二叉搜索树"><a href="#将有序数组转换为二叉搜索树" class="headerlink" title="将有序数组转换为二叉搜索树 *"></a><a href="https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/">将有序数组转换为二叉搜索树</a> *</h4></li><li><h4 id="二叉搜索树的范围和"><a href="#二叉搜索树的范围和" class="headerlink" title="二叉搜索树的范围和 *"></a><a href="https://leetcode-cn.com/problems/range-sum-of-bst/">二叉搜索树的范围和</a> *</h4></li><li><h4 id="二叉搜索树的最近公共祖先"><a href="#二叉搜索树的最近公共祖先" class="headerlink" title="二叉搜索树的最近公共祖先 *"></a><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/">二叉搜索树的最近公共祖先</a> *</h4></li><li><h4 id="二叉搜索树中第K小的元素"><a href="#二叉搜索树中第K小的元素" class="headerlink" title="二叉搜索树中第K小的元素 **"></a><a href="https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/">二叉搜索树中第K小的元素</a> **</h4></li><li><h4 id="二叉搜索树迭代器"><a href="#二叉搜索树迭代器" class="headerlink" title="二叉搜索树迭代器 **"></a><a href="https://leetcode-cn.com/problems/binary-search-tree-iterator/">二叉搜索树迭代器</a> **</h4></li><li><h4 id="恢复二叉搜索树"><a href="#恢复二叉搜索树" class="headerlink" title="恢复二叉搜索树"></a><a href="https://leetcode-cn.com/problems/recover-binary-search-tree/">恢复二叉搜索树</a></h4></li><li><h4 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a><a href="https://leetcode-cn.com/problems/balanced-binary-tree/">平衡二叉树</a></h4></li></ul><h2 id="8、合并"><a href="#8、合并" class="headerlink" title="8、合并"></a>8、合并</h2><h4 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21. 合并两个有序链表"></a><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">21. 合并两个有序链表</a></h4><p>递归法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(<span class="number">_</span> l1: ListNode?, <span class="number">_</span> l2: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> l1 == <span class="literal">nil</span> &#123; <span class="keyword">return</span> l2 &#125;</span><br><span class="line">    <span class="keyword">if</span> l2 == <span class="literal">nil</span> &#123; <span class="keyword">return</span> l1 &#125;</span><br><span class="line">    <span class="keyword">if</span> l1!.val &lt; l2!.val &#123;</span><br><span class="line">        l1?.next = mergeTwoLists(l1?.next, l2)</span><br><span class="line">        <span class="keyword">return</span> l1</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        l2?.next = mergeTwoLists(l1, l2?.next)</span><br><span class="line">        <span class="keyword">return</span> l2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>迭代法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(<span class="number">_</span> l1: ListNode?, <span class="number">_</span> l2: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> l1 = l1</span><br><span class="line">    <span class="keyword">var</span> l2 = l2</span><br><span class="line">    <span class="keyword">let</span> head = <span class="type">ListNode</span>(-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">var</span> cur = head</span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="literal">nil</span> &amp;&amp; l2 != <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="comment">//cur.next 记录当前的head</span></span><br><span class="line">        <span class="keyword">if</span> l1!.val &lt;= l2!.val &#123;</span><br><span class="line">            cur.next = l1</span><br><span class="line">            l1 = l1?.next</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cur.next = l2</span><br><span class="line">            l2 = l2?.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//cur后移</span></span><br><span class="line">        cur = cur.next!</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理链表为空</span></span><br><span class="line">    cur.next = l1 == <span class="literal">nil</span> ? l2 : l1</span><br><span class="line">    <span class="keyword">return</span> head.next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构思想</title>
      <link href="2019/06/22/2020%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>2019/06/22/2020%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h3 id="第一篇数据结构"><a href="#第一篇数据结构" class="headerlink" title="第一篇数据结构"></a>第一篇数据结构</h3><h4 id="数组和链表"><a href="#数组和链表" class="headerlink" title="数组和链表"></a>数组和链表</h4><hr><p><img src="https://static001.geekbang.org/resource/image/4f/68/4f63e92598ec2551069a0eef69db7168.jpg" alt="数组和链表对比"></p><h4 id="思考题：-1-如何分别用链表和数组实现LRU缓冲淘汰策略？"><a href="#思考题：-1-如何分别用链表和数组实现LRU缓冲淘汰策略？" class="headerlink" title="思考题： 1.如何分别用链表和数组实现LRU缓冲淘汰策略？"></a>思考题： 1.如何分别用链表和数组实现LRU缓冲淘汰策略？</h4><p><strong>1）什么是缓存？</strong></p><ul><li>缓存是一种提高数据读取性能的技术，在硬件设计、软件开发中都有着非广泛的应用，比如常见的CPU缓存、数据库缓存、浏览器缓存等等。</li></ul><blockquote><p>什么是C CPU在从内存读取数据的时候，会先把读取到的数据加载到CPU的缓存中。而CPU每次从内存读取数据并不是只读取那个特定要访问的地址，而是读取一个数据块(这个大小我不太确定。。)并保存到CPU缓存中，然后下次访问内存数据的时候就会先从CPU缓存开始查找，如果找到就不需要再从内存中取。这样就实现了比内存访问速度更快的机制，也就是CPU缓存存在的意义:为了弥补内存访问速度过慢与CPU执行速度快之间的差异而引入。</p></blockquote><p><strong>2）为什么使用缓存？即缓存的特点</strong></p><ul><li>缓存的大小是有限的，当缓存被用满时，哪些数据应该被清理出去，哪些数据应该被保留？就需要用到缓存淘汰策略。</li></ul><p><strong>3）什么是缓存淘汰策略？</strong></p><ul><li>指的是当缓存被用满时清理数据的优先顺序。</li></ul><p><strong>4）有哪些缓存淘汰策略？</strong></p><ul><li>先进先出策略FIFO（First In，First Out）</li><li>最少使用策略LFU（Least Frenquently Used）</li><li>最近最少使用策略LRU（Least Recently Used）。</li></ul><p><strong>5）链表实现LRU缓存淘汰策略</strong></p><p>我们维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。当有一个新的数据被访问时，我们从链表头开始顺序遍历链表。</p><ul><li><ol><li>如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，然后再插入到链表的头部。</li></ol></li><li><ol start="2"><li>如果此数据没有在缓存链表中，又可以分为两种情况：</li></ol></li><li>如果此时缓存未满，则将此结点直接插入到链表的头部；</li><li>如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部。</li></ul><p><strong>6）数组实现LRU缓存淘汰策略</strong></p><p><strong>方式一</strong></p><ul><li>首位置保存最新访问数据，末尾位置优先清理</li><li>当访问的数据未存在于缓存的数组中时，直接将数据插入数组第一个元素位置，此时数组所有元素需要向后移动1个位置，时间复杂度为O(n)；</li><li>当访问的数据存在于缓存的数组中时，查找到数据并将其插入数组的第一个位置，此时亦需移动数组元素，时间复杂度为O(n)。</li><li>缓存用满时，则清理掉末尾的数据，时间复杂度为O(1)。</li></ul><p><strong>方式二</strong></p><ul><li><p>首位置优先清理，末尾位置保存最新访问数据</p></li><li><p>当访问的数据未存在于缓存的数组中时，直接将数据添加进数组作为当前最有一个元素时间复杂度为O(1)；</p></li><li><p>当访问的数据存在于缓存的数组中时，查找到数据并将其插入当前数组最后一个元素的位置，此时亦需移动数组元素，时间复杂度为O(n)。</p></li><li><p>缓存用满时，则清理掉数组首位置的元素，且剩余数组元素需整体前移一位，时间复杂度为O(n)。（优化：清理的时候可以考虑一次性清理一定数量，从而降低清理次数，提高性能。）</p></li></ul><h4 id="2-如何通过单链表实现“判断某个字符串是否为回文字符串”？"><a href="#2-如何通过单链表实现“判断某个字符串是否为回文字符串”？" class="headerlink" title="2.如何通过单链表实现“判断某个字符串是否为回文字符串”？"></a>2.如何通过单链表实现“判断某个字符串是否为回文字符串”？</h4><h4 id="方法一：半栈法"><a href="#方法一：半栈法" class="headerlink" title="方法一：半栈法"></a>方法一：半栈法</h4><ul><li>１．用快慢两个指针遍历，同时用栈copy慢指针指向的data。</li><li>２．完成后，慢指针指向中间节点，耗时为N/2.</li><li>３．最后用pop栈中的data和慢指针指向的data比较，耗时也是N/2.</li><li>所以时间复杂度为：Ｏ(N)，空间复杂度因栈额外存储了一半的data，故为O(N/2)</li></ul><h4 id="方法二：全栈法"><a href="#方法二：全栈法" class="headerlink" title="方法二：全栈法"></a>方法二：全栈法</h4><ul><li>1）前提：字符串以单个字符的形式存储在单链表中。</li><li>2）遍历链表，判断字符个数是否为奇数，若为偶数，则不是。</li><li>3）将链表中的字符倒序存储一份在另一个链表中。</li><li>4）同步遍历2个链表，比较对应的字符是否相等，若相等，则是回文字串，否则，不是。</li></ul><h4 id="方法三：硬干法"><a href="#方法三：硬干法" class="headerlink" title="方法三：硬干法"></a>方法三：硬干法</h4><ul><li><ol><li>一个指针从头取data，另一个指针遍历到底取data，比较二者</li></ol></li><li>２．删除尾部节点，重复１．</li><li>时间复杂度高达　O(N^2)，空间复杂度却最低Ｏ(1)</li></ul><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ul><li><p><a href="https://mp.weixin.qq.com/s/0nubI8XPcUJYAaEk-Eomrg">动画| 什么是二分搜索树？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/h_mO28pmE_uNbHA5GVmWPA">动画| 二叉树有几种存储方式？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/tFJqwKa-adXW0kXGxldisg">动画| 二叉树在实际生活中的应用？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/XqxOp5jXqDg6fez6GphLCA">红黑树</a></p></li></ul><h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><ul><li><p><a href="https://mp.weixin.qq.com/s/DFLD41tFVtlXVYgg2QJcsQ">什么是递归？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/G7hlvXeW_qNDPOwnIFteug">什么是分支？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/Q0w59YQmZN7tWxSXPR1vrA">Hash算法原理及应用</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/Rh0O3ifxOtmHocr4NNNSYw">动画 | 什么是快速排序？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/WOpU112IcvRed078mQ8ovA">动画：面试官问我插入排序和冒泡排序哪个更牛逼？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/-9mD9LC4OrN5dl5DQSHyNA">动画: 快速排序 | 如何求第 K 大元素？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/nXo4A-_NX_JKmTAbbTYVRg">动画| 什么是堆排序？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/u397yZKJzuyTuzQDCcE7mw">动画| 什么是希尔排序</a></p></li></ul><h2 id="算法题目推荐"><a href="#算法题目推荐" class="headerlink" title="算法题目推荐"></a>算法题目推荐</h2><ul><li><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy">初级算法</a></li><li><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-medium/">中级算法</a></li><li><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-hard/">高级算法</a></li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红黑树前世今生</title>
      <link href="2019/06/08/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/"/>
      <url>2019/06/08/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="红黑树前世今生"><a href="#红黑树前世今生" class="headerlink" title="红黑树前世今生"></a>红黑树前世今生</h1><p>关键词：二叉搜索树、前驱节点、后继节点、B树、红黑树</p><h2 id="什么是B树"><a href="#什么是B树" class="headerlink" title="什么是B树"></a>什么是B树</h2><h3 id="前世"><a href="#前世" class="headerlink" title="前世"></a>前世</h3><p>B树是一种相对于来说特殊二叉搜索树，多用于数据库和文件搜索系统中。</p><h3 id="n阶B树的性质"><a href="#n阶B树的性质" class="headerlink" title="n阶B树的性质"></a>n阶B树的性质</h3><blockquote><p>B树是一种平衡的多路搜索树，拥有平衡二叉树的一些特性，与平衡二叉树的最大区别在于每个节点不再是只能存储一个元素，而且每个节点可以拥有多个子节点而像二叉平衡树只能拥有两个。</p></blockquote><ol><li>B树每个节点最多可以存储超过2个元素，可以拥有超过2个子节点</li><li>B树每个子节点的子树高度一致</li><li>B树和二叉搜索树一样，左子树&lt;根节点&lt;右子树</li><li>根节点元素个数:   1≤ X ≤ n - 1</li><li>非根节点元素个数:  n/2 - 1 ≤ x ≤ n - 1 (n/2 向上取整)</li><li>如果有子节点，子节点个数 y = x + 1,</li><li>根节点 2 ≤ y ≤ n<br><strong>非根节点 n / 2 ≤ y ≤ n</strong> (n/2 向上取整)</li></ol><blockquote><p>数据库中一般使用的是200-300阶B树</p><p>4阶B树元素个数为(2-3-4)，所以4阶B树也叫2-4树或者2-3-4树</p><p>5阶B树元素个数为 3-4-5 所以5阶B树叫（3，5）树</p><p>6阶B树元素个数3-4-5-6，所以6阶B树叫（3，6）树</p><p>7阶B树元素个数为4-5-6-7，所以7阶B树叫（4，7）树</p></blockquote><h3 id="B树-VS-二叉搜索树"><a href="#B树-VS-二叉搜索树" class="headerlink" title="B树 VS 二叉搜索树"></a>B树 VS 二叉搜索树</h3><ol><li>B树与二叉搜索树逻辑上等价</li><li>n阶B树最多需要log2 N代合并</li><li>多代节点合并可以获得超节点<ul><li>2代合并最多拥有4个子节点</li><li>3代合并最多拥有8个子节点</li><li>n代合并最多拥有2^n个子节点（至少是2^n阶B树）</li></ul></li></ol><h3 id="B树的添加与上溢"><a href="#B树的添加与上溢" class="headerlink" title="B树的添加与上溢"></a>B树的添加与上溢</h3><p><strong>上溢出（overflow）:添加元素到子节点后，该节点元素个数大于N时，我们称之为上溢出</strong></p><p>B树的元素添加的位置一定是叶子节点</p><p>B树添加导致上溢</p><p>B树上溢最极端的情况是一直分裂到根节点</p><h3 id="B树的删除与下溢"><a href="#B树的删除与下溢" class="headerlink" title="B树的删除与下溢"></a>B树的删除与下溢</h3><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><ul><li><p>删除叶子节点的话直接删除</p><p><img src="B%E6%A0%91%E7%BA%A2%E9%BB%91%E6%A0%91%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F.assets/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-12-15%20%E4%B8%8A%E5%8D%889.49.17.png" alt="屏幕快照 2019-12-15 上午9.49.17"></p></li><li><p>删除的非叶子节点的话：1、先找到前驱或后继节点元素，覆盖需要删除的值，2、把前驱或后继元素删除（说明：一个树的前驱在左子树的最后边，后驱在右子树的最左边。）</p></li></ul><p><img src="B%E6%A0%91%E7%BA%A2%E9%BB%91%E6%A0%91%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F.assets/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-12-15%20%E4%B8%8A%E5%8D%889.48.06.png" alt="屏幕快照 2019-12-15 上午9.48.06"></p><ul><li>非叶子节点前驱或后继元素，必然是在叶子节点中，所以真正删除的元素都是叶子节点</li></ul><p><img src="B%E6%A0%91%E7%BA%A2%E9%BB%91%E6%A0%91%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F.assets/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-12-15%20%E4%B8%8A%E5%8D%889.50.50.png" alt="屏幕快照 2019-12-15 上午9.50.50"></p><p><strong>下溢出（underflow）：叶子节点被删除一个元素后，元素个数可能会低于最低限制 （n/2 - 1 向上取整）</strong></p><p><strong>下溢出的解决方案是旋转</strong>，总体元素是哪个方向失衡往哪个方向转，子树大小顺序不能乱</p><h2 id="4阶B树"><a href="#4阶B树" class="headerlink" title="4阶B树"></a>4阶B树</h2><ul><li>4阶B树所有节点都能储存的元素个数x: 1 ≤ x ≤ 3</li><li>4阶B树非叶子节点的子节点个数：2 ≤ y ≤ 4</li></ul><h2 id="为什么需要红黑树"><a href="#为什么需要红黑树" class="headerlink" title="为什么需要红黑树?"></a>为什么需要红黑树?</h2><p>红黑树是在二叉搜索树的基础上对AVL树的改进，二叉搜索树顾名思义是对搜索算法的一种优化，能够大大减少我们元素对比的次数。红黑树在Java中的应用如HashSet(底层是数组单链表和红黑树)、数据库搜索也有应用。</p><h2 id="什么是红黑树？"><a href="#什么是红黑树？" class="headerlink" title="什么是红黑树？"></a>什么是红黑树？</h2><p><strong>红黑树是一种自平衡的二叉搜索树也叫平衡二叉B树</strong></p><h3 id="红黑树5个性质"><a href="#红黑树5个性质" class="headerlink" title="红黑树5个性质"></a>红黑树5个性质</h3><ol><li>节点分为红色与黑色</li><li>根节点是黑色</li><li>叶子节点是黑色</li><li><strong>不能有两个连续的红色节点</strong></li><li>从任意节点到叶子节点上所有路径的<strong>黑色节点数目必须相等</strong></li></ol><h3 id="红黑树等价变换"><a href="#红黑树等价变换" class="headerlink" title="红黑树等价变换"></a>红黑树等价变换</h3><p>红黑树等价于4阶B树</p><h3 id="红黑树添加失衡如何解决？"><a href="#红黑树添加失衡如何解决？" class="headerlink" title="红黑树添加失衡如何解决？"></a>红黑树添加失衡如何解决？</h3><h4 id="添加失衡"><a href="#添加失衡" class="headerlink" title="添加失衡"></a>添加失衡</h4><ul><li>Parrent节点为黑色时不需要处理</li><li>Parrent节点为红色（Double Red）</li><li>Uncle节点不是red:  <strong>LL/RR    LR/RL</strong></li><li>Uncle节点是red:  </li></ul><h3 id="红黑树删除节点失衡如何解决？"><a href="#红黑树删除节点失衡如何解决？" class="headerlink" title="红黑树删除节点失衡如何解决？"></a>红黑树删除节点失衡如何解决？</h3><h2 id="红黑树-VS-AVL树"><a href="#红黑树-VS-AVL树" class="headerlink" title="红黑树 VS AVL树"></a>红黑树 VS AVL树</h2><h3 id="搜索性能"><a href="#搜索性能" class="headerlink" title="搜索性能"></a>搜索性能</h3><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h3><p>Java8中的hashMap是使用数组+链表实现的，在解决哈希碰撞时使用了红黑树。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树今生</title>
      <link href="2019/06/06/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/"/>
      <url>2019/06/06/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树今生"><a href="#二叉树今生" class="headerlink" title="二叉树今生"></a>二叉树今生</h1><p>为什么会有二叉树这种数据结构？</p><p>思考一个问题：如果一个集合中有42亿个元素，让你从这42亿个元素中搜索某一个元素，你需要多少次操作？</p><p><strong>如果使用数组链表的话最多可能需要42亿次比较，而如果使用二叉树我们只需要32次比较即可，这就是二叉树存在的价值。Java中的HashSet使用的就是二叉树</strong></p><h2 id="前驱与后继"><a href="#前驱与后继" class="headerlink" title="前驱与后继"></a>前驱与后继</h2><h3 id="前驱节点"><a href="#前驱节点" class="headerlink" title="前驱节点"></a>前驱节点</h3><ol><li><p>若一个节点有左子树，那么该节点的前驱节点是其左子树中val值最大的节点（也就是左子树中所谓的rightMostNode）</p></li><li><p>若一个节点没有左子树，那么判断该节点和其父节点的关系 </p><p>2.1 若该节点是其父节点的右边孩子，那么该节点的前驱结点即为其父节点。 </p><p>2.2 若该节点是其父节点的左边孩子，那么需要沿着其父亲节点一直向树的顶端寻找，直到找到一个节点P，P节点是其父节点Q的右边孩子（可参考例子2的前驱结点是1），那么Q就是该节点的后继节点</p></li></ol><h3 id="后继节点"><a href="#后继节点" class="headerlink" title="后继节点"></a>后继节点</h3><ol><li>若一个节点有右子树，那么该节点的后继节点是其右子树中val值最小的节点（也就是右子树中所谓的leftMostNode）</li><li>若一个节点没有右子树，那么判断该节点和其父节点的关系<br>2.1 若该节点是其父节点的左边孩子，那么该节点的后继结点即为其父节点<br>2.2 若该节点是其父节点的右边孩子，那么需要沿着其父亲节点一直向树的顶端寻找，直到找到一个节点P，P节点是其父节点Q的左边孩子（可参考例子2的前驱结点是1），那么Q就是该节点的后继节点</li></ol><p>如何判断两个二叉树是否相同？</p><p><strong>递归法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> bool <span class="title">IsSameTree</span><span class="params">(TreeNode root1, TreeNode root2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root1 == <span class="keyword">null</span> &amp;&amp; root2 == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((root1 == <span class="keyword">null</span> &amp;&amp; root2 != <span class="keyword">null</span>) || (root1 != <span class="keyword">null</span> &amp;&amp; root2 == <span class="keyword">null</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (root1.val != root2.val) &#123;<span class="comment">//判断每个节点的值是否相等，如果去除此判断，则判断两个二叉树是否结构相等</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> IsSameTree(root1.left, root2.left) &amp;&amp; IsSameTree(root1.right, root2.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>非递归法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">bool  BTreeCompare（BTreeNode_t *pRoot1, BTreeNode_t *pRoot2)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">if</span>( pRoot1 == NULL &amp;&amp; pRoot2 == NULL )  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    queue &lt;BTreeNode_t *&gt; que1;  </span><br><span class="line">    queue &lt;BTreeNode_t *&gt; que2;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    que1.push(pRoot1);  </span><br><span class="line">    que2.push(pRoot2);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span> curLevelNodeTotal1 = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">int</span> curLevelNodeTotal2 = <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    bool flag = <span class="keyword">true</span>; <span class="comment">//作为比较不一致时跳出标识  </span></span><br><span class="line">    <span class="keyword">while</span>( ( !que1.empty()) &amp;&amp; ( !que2.empty())) <span class="comment">//当两个队列均不为空时，才进行比较  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        curLevelNodeTotal1 = que1.size();  <span class="comment">//获取树1的当前层节点总数  </span></span><br><span class="line">        curLevelNodeTotal2 = que2.size(); <span class="comment">//获取树2的当前层节点总数  </span></span><br><span class="line">        <span class="keyword">if</span>( curLevelNodeTotal1 != curLevelNodeTotal2)&#123;  </span><br><span class="line">            flag = <span class="keyword">false</span>;<span class="comment">//当前层节点总数都不一致，不需要比较了，直接跳出  </span></span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">int</span> cnt1 = <span class="number">0</span>;<span class="comment">//遍历本层节点时的计数器  </span></span><br><span class="line">        <span class="keyword">int</span> cnt2 = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">while</span>( cnt1 &lt; curLevelNodeTotal1  &amp;&amp; cnt2 &lt; curLevelNodeTotal2)&#123;  </span><br><span class="line">            ++cnt1;  </span><br><span class="line">            ++cnt2;  </span><br><span class="line">            pRoot1 = que1.front();  </span><br><span class="line">            que1.pop();  </span><br><span class="line">            pRoot2 = que2.front();  </span><br><span class="line">            que2.pop();  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">//比较当前节点中数据是否一致  </span></span><br><span class="line">            <span class="keyword">if</span>( pRoot1-&gt;m_pElemt != pRoot2-&gt;m_pElemt )&#123;  </span><br><span class="line">                flag = <span class="keyword">false</span>;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="comment">//判断pRoot1和pRoot2左右节点结构是否相同  </span></span><br><span class="line">            <span class="keyword">if</span>( ( pRoot1-&gt;m_pLeft != NULL &amp;&amp; pRoot2-&gt;m_pLeft == NULL )    ||  </span><br><span class="line">                ( pRoot1-&gt;m_pLeft == NULL &amp;&amp; pRoot2-&gt;m_pLeft != NULL )    ||  </span><br><span class="line">                ( pRoot1-&gt;m_pRight != NULL &amp;&amp; pRoot2-&gt;m_pRight == NULL )    ||  </span><br><span class="line">                ( pRoot1-&gt;m_pRight == NULL &amp;&amp; pRoot2-&gt;m_pRight != NULL )  </span><br><span class="line">            )&#123;  </span><br><span class="line">                flag = <span class="keyword">false</span>;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">   </span><br><span class="line">            <span class="comment">//将左右节点入队  </span></span><br><span class="line">            <span class="keyword">if</span>( pRoot1-&gt;m_pLeft != NULL )  </span><br><span class="line">                que1.push( pRoot1-&gt;m_pLeft);  </span><br><span class="line">            <span class="keyword">if</span>( pRoot1-&gt;m_pRight != NULL )  </span><br><span class="line">                que1.push( pRoot1-&gt;m_pRight);  </span><br><span class="line">            <span class="keyword">if</span>( pRoot2-&gt;m_pLeft != NULL )  </span><br><span class="line">                que2.push( pRoot2-&gt;m_pLeft);  </span><br><span class="line">            <span class="keyword">if</span>( pRoot2-&gt;m_pRight != NULL )  </span><br><span class="line">                que2.push( pRoot2-&gt;m_pRight);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span>( flag == <span class="keyword">false</span> )  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//如果比较标志为false，则不相同  </span></span><br><span class="line">    <span class="keyword">if</span>( flag == <span class="keyword">false</span> )&#123;  </span><br><span class="line">        <span class="keyword">while</span>( !que1.empty() )  </span><br><span class="line">            que1.pop();  </span><br><span class="line">        <span class="keyword">while</span>( !que2.empty())  </span><br><span class="line">            que2.pop();  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS汇编基础</title>
      <link href="2018/12/02/iOS%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/"/>
      <url>2018/12/02/iOS%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="iOS汇编基础"><a href="#iOS汇编基础" class="headerlink" title="iOS汇编基础"></a>iOS汇编基础</h1><h2 id="x86-64汇编"><a href="#x86-64汇编" class="headerlink" title="x86_64汇编"></a>x86_64汇编</h2><p>X84中原有8个32位通用寄存器%eax，%ebx，%ecx，%edx，%esi，%edi，%ebp，%esp,</p><p>X86_64中分别被扩展为64位，并且多了8个寄存器。因此X86_64的寄存器如下：</p><ul><li>rax, eax, ax, ah, al;</li><li>rbx, ebx, bx, bh, bl;</li><li>rcx, ecx, cx, ch, cl;</li><li>rdx, edx, dx, dh, dl;</li><li>rsi, esi, si;</li><li>rdi, edi, di;</li><li>rbp, ebp;</li><li>rsp, esp;</li><li>r8-r15;</li></ul><p>GCC中对这些寄存器的调用规则如下：</p><ul><li><strong>%rax 作为函数返回值使用。</strong></li><li><strong>%rsp 栈指针寄存器，指向栈顶</strong></li><li><strong>%rdi，%rsi，%rdx，%rcx，%r8，%r9 用作函数参数，依次对应第1参数，第2参数。。。</strong></li><li><strong>%rbx，%rbp，%r12，%r13，%14，%15 用作数据存储，遵循被调用者使用规则，简单说就是随便用，调用子函数之前要备份它，以防他被修改</strong></li><li><strong>%r10，%r11 用作数据存储，遵循调用者使用规则，简单说就是使用之前要先保存原值</strong></li></ul><img src="https://images0.cnblogs.com/blog2015/678192/201505/312049552351566.png" alt="img" style="zoom:50%;" /><h2 id="ARM处理器架构"><a href="#ARM处理器架构" class="headerlink" title="ARM处理器架构"></a>ARM处理器架构</h2><h3 id="ARM"><a href="#ARM" class="headerlink" title="ARM"></a>ARM</h3><p>现在的智能手机</p><h3 id="ARM指令集"><a href="#ARM指令集" class="headerlink" title="ARM指令集"></a>ARM指令集</h3><ul><li>armv7｜armv7s｜arm64都是ARM处理器的指令集<ul><li><strong>v7</strong><br>iPhone3GS、iPhone4、iPhone4S</li><li><strong>v7s</strong><br>iPhone5、iPhone5C</li><li><strong>arm64</strong><br><strong>iPhone5S</strong>、iPhone6、iPhone6 Plus、iPhone6S、iPhone6S Plus<br>iPhoneSE、iPhone7、iPhone7 Plus、iPhone8、iPhone8 Plus、iPhoneX<br>iPad5、iPad Air、iPad Air2、iPad Pro、iPad Pro2<br>iPad mini with Retina display、iPad mini3、iPad mini4<br>iPod Touch6</li></ul></li><li>i386｜x86_64 是Mac处理器的指令集</li></ul><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">模拟器32位处理器测试需要i386架构，</span><br><span class="line">模拟器64位处理器测试需要x86_64架构，</span><br><span class="line"></span><br><span class="line">真机32位处理器需要armv7,或者armv7s架构，</span><br><span class="line">真机64位处理器需要arm64架构。</span><br></pre></td></tr></table></figure></blockquote><h3 id="编译错误"><a href="#编译错误" class="headerlink" title="编译错误"></a>编译错误</h3><p><strong>真机编译错误: No architectures to compile for (ONLY_ACTIVE_ARCH=YES, active arch=x86_64, VALID_ARCHS=i386)</strong></p><p><strong>模拟器上编译错误：No architectures to compile for (ONLY_ACTIVE_ARCH=YES, active arch=armv7s, VALID_ARCHS=armv7 armv6)</strong></p><h2 id="iOS汇编教程"><a href="#iOS汇编教程" class="headerlink" title="iOS汇编教程"></a>iOS汇编教程</h2><blockquote><p>来自公主号：高级页面仔</p></blockquote><ul><li><a href="https://mp.weixin.qq.com/s/tbOfzoiUIoRueSRIboI2zw">1、ARM64汇编基础</a></li><li><a href="https://mp.weixin.qq.com/s/Xw15C2Xw_MgCcw0sOkdmHA">2、在Xcode工程中嵌入汇编代码</a></li><li><a href="https://mp.weixin.qq.com/s/TR2j-W4-0H8lKgGgnU3jww">3、汇编中的 Section 与数据存取</a></li><li><a href="https://mp.weixin.qq.com/s/CtIbfUgxTj-DfXASKboaSQ">通过dylib实现iOS运行时Native代码注入</a></li><li><a href="https://mp.weixin.qq.com/s/T4sfBPpT_o2MjKfcqUSlPQ">基于 Mach-O 符号重排减少缺页中断次数来提升 iOS App 启动速度的可行性分析</a></li><li><a href="https://mp.weixin.qq.com/s/yKPY1Vd7JUA8SYUNCZl7kg">4、基于 LLDB 动态调试快速分析系统函数</a></li><li><a href="https://mp.weixin.qq.com/s/LIbmvDM-AsIYukFMJ0A9XA">5、Objc Block 的内存布局和汇编表示</a></li><li><a href="https://mp.weixin.qq.com/s/eP9lwVCjDKLGUudUiFuxDg">6、CPU 指令重排与内存屏障</a></li><li><a href="https://mp.weixin.qq.com/s/KxnfCU5vBJz88-J366paUw">7、ARM Exclusive - 互斥锁与读写一致性的底层实现原理</a></li><li><a href="https://mp.weixin.qq.com/s/qf5-UughNpJYn0P7g9ZkFA">8、Relocation - 静态库链接时是如何保证对变量的相对寻址依然正确的？</a></li><li><a href="https://mp.weixin.qq.com/s/SE5vpD733SQw9_yc1JN_TQ">9、在 ARC 下对非 ObjC 类型的指针进行操作的编译器陷阱</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS图像优化技巧</title>
      <link href="2018/12/01/iOS%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
      <url>2018/12/01/iOS%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="iOS图像优化技巧"><a href="#iOS图像优化技巧" class="headerlink" title="iOS图像优化技巧"></a><a href="https://swift.gg/2019/11/01/image-resizing/">iOS图像优化技巧</a></h1><ul><li><p>1、如何处理大尺寸图片？</p></li><li><p>2、如何处理瀑布流图片占用大量内存的问题？</p></li><li><p>3、如何处理多张图片上传和下载问题？</p></li></ul><h1 id="1、处理大尺寸图片"><a href="#1、处理大尺寸图片" class="headerlink" title="1、处理大尺寸图片"></a>1、处理大尺寸图片</h1><p>那么，什么时候对图像进行渲染优化才有意义呢？</p><p><strong>当它明显大于</strong> <strong><code>UIImageView</code></strong> <strong>显示尺寸的时候</strong></p><p>想要完整渲染这张宽高为 12,000 px 的图片，需要高达 20 MB 的空间。对于当今的硬件来说，你可能不会在意这么少兆字节的占用。但那只是它压缩后的尺寸。要展示它，<code>UIImageView</code> 首先需要把 JPEG 数据解码成位图（bitmap），如果要在一个 <code>UIImageView</code> 上按原样设置这张全尺寸图片，你的应用内存占用将会激增到<strong>几百兆</strong>，对用户明显没有什么好处（毕竟，屏幕能显示的像素有限）。但只要在设置 <code>UIImageView</code> 的 <code>image</code> 属性之前，将图像渲染的尺寸调整成 <code>UIImageView</code> 的大小，你用到的内存就会少一个数量级：</p><table><thead><tr><th align="left"></th><th align="left">内存消耗 <em>(MB)</em></th></tr></thead><tbody><tr><td align="left">无下采样</td><td align="left">220.2</td></tr><tr><td align="left">下采样</td><td align="left">23.7</td></tr></tbody></table><p>这个技巧就是众所周知的<em>下采样（downsampling）</em>，在这些情况下，它可以有效地优化你应用的性能表现。如果你想了解更多关于下采样的知识或者其它图形图像的最佳实践，请参照 <a href="https://developer.apple.com/videos/play/wwdc2018/219/">来自 WWDC 2018 的精彩课程</a>。</p><p>而现在，很少有应用程序会尝试一次性加载这么大的图像了，但是也跟我从设计师那里拿到的图片资源不会差<em>太</em>多。<em>（认真的吗？一张颜色渐变的</em> <em>PNG</em> <em>图片要</em> <em>3</em> <em>MB?）</em> 考虑到这一点，让我们来看看有什么不同的方法，可以让你用来对图像进行优化或者下采样。</p><blockquote><p>不用说，这里所有从 URL 加载的示例图像都是针对<strong>本地</strong>文件。记住，在应用的主线程同步使用网络请求图像<strong>绝不</strong>是什么好主意。</p></blockquote><h2 id="图像渲染优化技巧"><a href="#图像渲染优化技巧" class="headerlink" title="图像渲染优化技巧"></a>图像渲染优化技巧</h2><p>优化图像渲染的方法有很多种，每种都有不同的功能和性能特性。我们在本文看到的这些例子，架构层次跨度上从底层的 Core Graphics、vImage、Image I/O 到上层的 Core Image 和 UIKit 都有。</p><ol><li><a href="https://swift.gg/2019/11/01/image-resizing/#technique-1-drawing-to-a-uigraphicsimagerenderer">绘制到 UIGraphicsImageRenderer 上</a></li><li><a href="https://swift.gg/2019/11/01/image-resizing/#technique-2-drawing-to-a-core-graphics-context">绘制到 Core Graphics Context 上</a></li><li><a href="https://swift.gg/2019/11/01/image-resizing/#technique-3-creating-a-thumbnail-with-image-io">使用 Image I/O 创建缩略图像</a></li><li><a href="https://swift.gg/2019/11/01/image-resizing/#technique-4-lanczos-resampling-with-core-image">使用 Core Image 进行 Lanczos 重采样</a></li><li><a href="https://swift.gg/2019/11/01/image-resizing/#technique-5-image-scaling-with-vimage">使用 vImage 优化图片渲染</a></li></ol><p>下面的这些数字是多次迭代加载、优化、渲染之前那张 <a href="https://visibleearth.nasa.gov/view.php?id=78314">超大地球图片</a> 的平均时间：</p><table><thead><tr><th align="left"></th><th align="left">耗时 <em>(seconds)</em></th></tr></thead><tbody><tr><td align="left">技巧 #1: <code>UIKit</code></td><td align="left">0.1420</td></tr><tr><td align="left">技巧 #2: <code>Core Graphics</code> 1</td><td align="left">0.1722</td></tr><tr><td align="left">技巧 #3: <code>Image I/O</code></td><td align="left">0.1616</td></tr><tr><td align="left">技巧 #4: <code>Core Image</code> 2</td><td align="left">2.4983</td></tr><tr><td align="left">技巧 #5: <code>vImage</code></td><td align="left">2.3126</td></tr></tbody></table><p>1<br>设置不同的 <code>CGInterpolationQuality</code> 值出来的结果是一致的，在性能上的差异可以忽略不计。</p><p>2<br>若在 <code>CIContext</code> 创建时设置 <code>kCIContextUseSoftwareRenderer</code> 的值为 <code>true</code>，会导致耗时相比基础结果慢一个数量级。</p><h2 id="使用CGContextDrawImage"><a href="#使用CGContextDrawImage" class="headerlink" title="使用CGContextDrawImage()"></a>使用CGContextDrawImage()</h2><h2 id="异步解码图片"><a href="#异步解码图片" class="headerlink" title="异步解码图片"></a>异步解码图片</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</span><br><span class="line">    <span class="comment">// 1、获取CGImage</span></span><br><span class="line">    <span class="built_in">CGImageRef</span> cgImage = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@&quot;img&quot;</span>].CGImage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// alphaInfo</span></span><br><span class="line">    <span class="built_in">CGImageAlphaInfo</span> alphaInfo = <span class="built_in">CGImageGetAlphaInfo</span>(cgImage) &amp; kCGBitmapAlphaInfoMask;</span><br><span class="line">    <span class="built_in">BOOL</span> hasAlpha = <span class="literal">NO</span>;</span><br><span class="line">    <span class="keyword">if</span> (alphaInfo == kCGImageAlphaPremultipliedLast ||</span><br><span class="line">        alphaInfo == kCGImageAlphaPremultipliedFirst ||</span><br><span class="line">        alphaInfo == kCGImageAlphaLast ||</span><br><span class="line">        alphaInfo == kCGImageAlphaFirst) &#123;</span><br><span class="line">        hasAlpha = <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// bitmapInfo</span></span><br><span class="line">    <span class="built_in">CGBitmapInfo</span> bitmapInfo = kCGBitmapByteOrder32Host;</span><br><span class="line">    bitmapInfo |= hasAlpha ? kCGImageAlphaPremultipliedFirst : kCGImageAlphaNoneSkipFirst;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// size</span></span><br><span class="line">    size_t width = <span class="built_in">CGImageGetWidth</span>(cgImage);</span><br><span class="line">    size_t height = <span class="built_in">CGImageGetHeight</span>(cgImage);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、获取context</span></span><br><span class="line">    <span class="built_in">CGContextRef</span> context = <span class="built_in">CGBitmapContextCreate</span>(<span class="literal">NULL</span>, width, height, <span class="number">8</span>, <span class="number">0</span>, <span class="built_in">CGColorSpaceCreateDeviceRGB</span>(), bitmapInfo);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、 draw</span></span><br><span class="line">    <span class="built_in">CGContextDrawImage</span>(context, <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, width, height), cgImage);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get CGImage</span></span><br><span class="line">    cgImage = <span class="built_in">CGBitmapContextCreateImage</span>(context);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// into UIImage</span></span><br><span class="line">    <span class="built_in">UIImage</span> *newImage = [<span class="built_in">UIImage</span> imageWithCGImage:cgImage];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// release</span></span><br><span class="line">    <span class="built_in">CGContextRelease</span>(context);</span><br><span class="line">    <span class="built_in">CGImageRelease</span>(cgImage);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// back to the main thread</span></span><br><span class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="keyword">self</span>.imageView.image = newImage;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="技巧-1-绘制到-UIGraphicsImageRenderer-上"><a href="#技巧-1-绘制到-UIGraphicsImageRenderer-上" class="headerlink" title="技巧 #1: 绘制到 UIGraphicsImageRenderer 上"></a>技巧 #1: 绘制到 UIGraphicsImageRenderer 上</h3><p>图像渲染优化的最上层 API 位于 UIKit 框架中。给定一个 <code>UIImage</code>，你可以绘制到 <code>UIGraphicsImageRenderer</code> 的上下文（context）中以渲染缩小版本的图像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import UIKit</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 技巧 #1</span><br><span class="line">func resizedImage(at url: URL, for size: CGSize) -&gt; UIImage? &#123;</span><br><span class="line">    guard let image &#x3D; UIImage(contentsOfFile: url.path) else &#123;</span><br><span class="line">        return nil</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    let renderer &#x3D; UIGraphicsImageRenderer(size: size)</span><br><span class="line">    return renderer.image &#123; (context) in</span><br><span class="line">        image.draw(in: CGRect(origin: .zero, size: size))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://developer.apple.com/documentation/uikit/uigraphicsimagerenderer"><code>UIGraphicsImageRenderer</code></a> 是一项相对较新的技术，在 iOS 10 中被引入，用以取代旧版本的 <code>UIGraphicsBeginImageContextWithOptions</code> / <code>UIGraphicsEndImageContext</code> API。你通过指定以 <code>point</code> 计量的 <code>size</code> 创建了一个 <code>UIGraphicsImageRenderer</code>。**<code>image</code> 方法带有一个闭包参数，返回的是一个经过闭包处理后的位图。最终，原始图像便会在缩小到指定的范围内绘制。**</p><h3 id="技巧-2：绘制到-Core-Graphics-Context-中"><a href="#技巧-2：绘制到-Core-Graphics-Context-中" class="headerlink" title="技巧 #2：绘制到 Core Graphics Context 中"></a>技巧 #2：绘制到 Core Graphics Context 中</h3><p>Core Graphics / Quartz 2D 提供了一系列底层 API 让我们可以进行更多高级的配置。</p><p>给定一个 <code>CGImage</code> 作为暂时的位图上下文，使用 <code>draw(_:in:)</code> 方法来绘制缩放后的图像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import UIKit</span><br><span class="line">import CoreGraphics</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 技巧 #2</span><br><span class="line">func resizedImage(at url: URL, for size: CGSize) -&gt; UIImage? &#123;</span><br><span class="line">    guard let imageSource &#x3D; CGImageSourceCreateWithURL(url as NSURL, nil),</span><br><span class="line">        let image &#x3D; CGImageSourceCreateImageAtIndex(imageSource, 0, nil)</span><br><span class="line">    else &#123;</span><br><span class="line">        return nil</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    let context &#x3D; CGContext(data: nil,</span><br><span class="line">                            width: Int(size.width),</span><br><span class="line">                            height: Int(size.height),</span><br><span class="line">                            bitsPerComponent: image.bitsPerComponent,</span><br><span class="line">                            bytesPerRow: image.bytesPerRow,</span><br><span class="line">                            space: image.colorSpace ?? CGColorSpace(name: CGColorSpace.sRGB)!,</span><br><span class="line">                            bitmapInfo: image.bitmapInfo.rawValue)</span><br><span class="line">    context?.interpolationQuality &#x3D; .high</span><br><span class="line">    context?.draw(image, in: CGRect(origin: .zero, size: size))</span><br><span class="line"></span><br><span class="line">    guard let scaledImage &#x3D; context?.makeImage() else &#123; return nil &#125;</span><br><span class="line"></span><br><span class="line">    return UIImage(cgImage: scaledImage)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 <code>CGContext</code> 初始化方法接收了几个参数来构造一个上下文，包括了必要的宽高参数，还有在给出的色域范围内每个颜色通道所需要的内存大小。在这个例子中，这些参数都是通过 <code>CGImage</code> 这个对象获取的。下一步，设置 <code>interpolationQuality</code> 属性为 <code>.high</code> 指示上下文在保证一定的精度上填充像素。<code>draw(_:in:)</code> 方法则是在给定的宽高和位置绘制图像，可以让图片在特定的边距下裁剪，也可以适用于一些像是人脸识别之类的图像特性。最后 <code>makeImage()</code> 从上下文获取信息并且渲染到一个 <code>CGImage</code> 值上（之后会用来构造 <code>UIImage</code> 对象）。</p><h3 id="技巧-3：使用-Image-I-O-创建缩略图像"><a href="#技巧-3：使用-Image-I-O-创建缩略图像" class="headerlink" title="技巧 #3：使用 Image I/O 创建缩略图像"></a>技巧 #3：使用 Image I/O 创建缩略图像</h3><p>处理大分辨率图片时，往往容易出现OOM，<strong>原因是-[UIImage drawInRect:]在绘制时，先解码图片，再生成原始分辨率大小的bitmap，这是很耗内存的。</strong></p><p>解决方法是使用更低层的ImageIO接口，避免中间bitmap产生：</p><p>Image I/O 是一个强大（却鲜有人知）的图像处理框架。</p><p><strong>它可以读写许多不同图像格式，访问图像的元数据，还有执行常规的图像处理操作。这个框架通过先进的缓存机制，提供了平台上最快的图片编码器和解码器，甚至可以增量加载图片。</strong></p><p>这个重要的 <code>CGImageSourceCreateThumbnailAtIndex</code> 提供了一个带有许多不同配置选项的 API，比起在 Core Graphics 中等价的处理操作要简洁得多：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import ImageIO</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 技巧 #3</span><br><span class="line">func resizedImage(at url: URL, for size: CGSize) -&gt; UIImage? &#123;</span><br><span class="line">    let options: [CFString: Any] &#x3D; [</span><br><span class="line">        kCGImageSourceCreateThumbnailFromImageIfAbsent: true,</span><br><span class="line">        kCGImageSourceCreateThumbnailWithTransform: true,</span><br><span class="line">        kCGImageSourceShouldCacheImmediately: true,</span><br><span class="line">        kCGImageSourceThumbnailMaxPixelSize: max(size.width, size.height)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    guard let imageSource &#x3D; CGImageSourceCreateWithURL(url as NSURL, nil),</span><br><span class="line">        let image &#x3D; CGImageSourceCreateThumbnailAtIndex(imageSource, 0, options as CFDictionary)</span><br><span class="line">    else &#123;</span><br><span class="line">        return nil</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return UIImage(cgImage: image)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给定一个 <code>CGImageSource</code> 和一系列配置选项，<code>CGImageSourceCreateThumbnailAtIndex(_:_:_:)</code> 函数创建了一个图像的缩略图。优化尺寸大小的操作是通过 <code>kCGImageSourceThumbnailMaxPixelSize</code> 完成的，它根据图像原始宽高比指定的最大尺寸来缩放图像。通过设定 <code>kCGImageSourceCreateThumbnailFromImageIfAbsent</code> 或 <code>kCGImageSourceCreateThumbnailFromImageAlways</code> 选项，Image I/O 可以自动缓存优化后的结果以便后续调用。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>UIKit</strong>, <strong>Core</strong> <strong>Graphics</strong>, 和 <strong>Image</strong> <strong>I/O</strong> 都能很好地用于大部分图片的优化操作。</li><li>如果（在 iOS 平台，至少）要选择一个的话，<code>UIGraphicsImageRenderer</code> 是你最佳的选择。</li><li><strong>Core</strong> <strong>Image</strong> 在图像优化渲染操作方面性能表现优越。实际上，根据 Apple 官方 <a href="https://developer.apple.com/library/mac/documentation/graphicsimaging/Conceptual/CoreImaging/ci_performance/ci_performance.html#//apple_ref/doc/uid/TP30001185-CH10-SW1"><em>Core</em> <em>Image</em> <em>编程规范中的性能最佳实践单元</em></a>，你应该使用 Core Graphics 或 Image I/O 对图像进行裁剪和下采样，而不是用 Core Image。</li><li>除非你已经在使用 **<code>vImage</code>**，否则在大多数情况下用到底层的 Accelerate API 所需的额外工作可能是不合理的。</li></ul><blockquote><p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg/">http://swift.gg</a>。</p></blockquote><h1 id="2、同时处理大量图片"><a href="#2、同时处理大量图片" class="headerlink" title="2、同时处理大量图片"></a>2、同时处理大量图片</h1><h3 id="UIScrollView滚动停止监测"><a href="#UIScrollView滚动停止监测" class="headerlink" title="UIScrollView滚动停止监测"></a><a href="https://www.codeleading.com/article/6664657606/">UIScrollView滚动停止监测</a></h3><p>通过调查发现 <code>UIScrollView</code> 停止滚动的类型分为三种：</p><ol><li>快速滚动，自然停止</li><li>快速滚动，手指按压突然停止</li><li>慢速上下滑动停止</li></ol><p>第1种类型，比较简单，在 <code>UIScrollView</code> 的代理中就可以监听到。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)scrollViewWillBeginDecelerating:(<span class="built_in">UIScrollView</span> *)scrollView;</span><br></pre></td></tr></table></figure><p>而第2种类型和第3种类型，就没有方法让我们可以直接监听到了。但是只要是滑动了，就一定会触发 <code>UIScrollView</code> 的下面代理，然后通过 <code>UIScrollView</code> 部分属性的改变，我们就可以监听到滚动停止了，后面会详细介绍方法。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)scrollViewDidEndDecelerating:(<span class="built_in">UIScrollView</span> *)scrollView;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)scrollViewDidEndDragging:(<span class="built_in">UIScrollView</span> *)scrollView willDecelerate:(<span class="built_in">BOOL</span>)decelerate;</span><br></pre></td></tr></table></figure><h3 id="监听UIScrollView停止滚动"><a href="#监听UIScrollView停止滚动" class="headerlink" title="监听UIScrollView停止滚动"></a>监听UIScrollView停止滚动</h3><p>通过翻阅文档，我们可以看到 <code>UIScrollView</code> 有三个属性: <strong>tracking、dragging、decelerating。</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// returns YES if user has touched. may not yet have started dragging</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>,<span class="keyword">getter</span>=isTracking) <span class="built_in">BOOL</span> tracking;</span><br><span class="line"></span><br><span class="line"><span class="comment">// returns YES if user has started scrolling. this may require some time and or distance to move to initiate dragging</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>,<span class="keyword">getter</span>=isDragging) <span class="built_in">BOOL</span> dragging;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// returns YES if user isn&#x27;t dragging (touch up) but scroll view is still moving</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>,<span class="keyword">getter</span>=isDecelerating) <span class="built_in">BOOL</span> decelerating;</span><br></pre></td></tr></table></figure><p>在滚动和滚动结束时，这三个属性的值都不相同。我们利用这三个属性，完成对 <code>UIScrollView</code> 停止滚动的监听。</p><p><strong>停止类型1：scrollViewDidEndDecelerating</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)scrollViewDidEndDecelerating:(<span class="built_in">UIScrollView</span> *)scrollView;</span><br><span class="line">tracking:<span class="number">0</span>,dragging:<span class="number">0</span>,decelerating:<span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>停止类型2：scrollViewDidEndDragging &amp; scrollViewDidEndDecelerating</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate;</span><br><span class="line">tracking:1,dragging:0,decelerating:1</span><br><span class="line"></span><br><span class="line">- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView;</span><br><span class="line">tracking:0,dragging:0,decelerating:0</span><br></pre></td></tr></table></figure><p><strong>停止类型3：scrollViewDidEndDragging</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate;</span><br><span class="line">tracking:1,dragging:0,decelerating:0</span><br></pre></td></tr></table></figure><p>通过上面的代码，可以发现，我们只需要对 <code>UIScrollView</code> 的这三个属性进行相应的组合，就可以监听到 <code>UIScrollView</code> 停止滚动的事件了。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)scrollViewDidEndDecelerating:(<span class="built_in">UIScrollView</span> *)scrollView &#123;</span><br><span class="line">    [<span class="keyword">self</span> stoppedScrolling];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)scrollViewDidEndDragging:(<span class="built_in">UIScrollView</span> *)scrollView willDecelerate:(<span class="built_in">BOOL</span>)decelerate &#123;</span><br><span class="line">    <span class="keyword">if</span> (!decelerate) &#123;</span><br><span class="line">        [<span class="keyword">self</span> stoppedScrolling];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)stoppedScrolling &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@&quot;停止滚动了！！！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)scrollViewDidScroll:(<span class="built_in">UIScrollView</span> *)sender</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="built_in">NSObject</span> cancelPreviousPerformRequestsWithTarget:<span class="keyword">self</span>];</span><br><span class="line">    [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(scrollViewDidEndScrollingAnimation:) withObject:<span class="literal">nil</span> afterDelay:<span class="number">0.1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)scrollViewDidEndScrollingAnimation:(<span class="built_in">UIScrollView</span> *)scrollView</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="built_in">NSObject</span> cancelPreviousPerformRequestsWithTarget:<span class="keyword">self</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3、处理多图上传下载问题？"><a href="#3、处理多图上传下载问题？" class="headerlink" title="3、处理多图上传下载问题？"></a>3、处理多图上传下载问题？</h1><h1 id="UI刷新问题"><a href="#UI刷新问题" class="headerlink" title="UI刷新问题"></a>UI刷新问题</h1><h4 id="layout的相关方法"><a href="#layout的相关方法" class="headerlink" title="layout的相关方法:"></a>layout的相关方法:</h4><ul><li>layoutSubviews</li><li>layoutIfNeeded</li><li>setNeedsLayout</li><li>setNeedsDisplay</li><li>drawRect</li><li>sizeThatFits</li><li>sizeToFit</li></ul><h4 id="layoutSubviews"><a href="#layoutSubviews" class="headerlink" title="layoutSubviews"></a>layoutSubviews</h4><p>这个方法，默认没有做任何事情，需要子类进行重写 。 系统在很多时候会去调用这个方法：</p><p>1.初始化不会触发layoutSubviews，但是如果设置了不为CGRectZero的frame的时候就会触发。<br>2.addSubview会触发layoutSubviews<br>3.设置view的Frame会触发layoutSubviews，当然前提是frame的值设置前后发生了变化<br>4.滚动一个UIScrollView会触发layoutSubviews<br>5.旋转Screen会触发父UIView上的layoutSubviews事件<br>6.改变一个UIView大小的时候也会触发父UIView上的layoutSubviews事件</p><blockquote><p> You should override this method only if the autoresizing behaviors of the subviews do not offer the behavior you want.layoutSubviews,</p><p> 当我们在某个类的内部调整子视图位置时，需要调用。</p><p> 反过来的意思就是说：<strong>如果你想要在外部设置subviews的位置，就不要重写</strong>。</p></blockquote><h4 id="setNeedsLayout"><a href="#setNeedsLayout" class="headerlink" title="setNeedsLayout"></a>setNeedsLayout</h4><ul><li>标记为需要重新布局，不立即刷新，但layoutSubviews一定会被调用</li><li>配合layoutIfNeeded立即更新</li></ul><h4 id="layoutIfNeeded"><a href="#layoutIfNeeded" class="headerlink" title="layoutIfNeeded"></a>layoutIfNeeded</h4><ul><li><strong>如果有需要刷新的标记，立即调用layoutSubviews进行布局</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 图像 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用指南</title>
      <link href="2018/06/02/Hexo%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>2018/06/02/Hexo%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="1、Hexo安装指南"><a href="#1、Hexo安装指南" class="headerlink" title="1、Hexo安装指南"></a>1、Hexo安装指南</h1><h2 id="1-1安装Node-js"><a href="#1-1安装Node-js" class="headerlink" title="1.1安装Node.js"></a>1.1安装Node.js</h2><p>首先下载稳定版<a href="http://nodejs.cn/download/">Node.js</a>。</p><p>安装选项全部默认，一路点击<code>Next</code>。</p><p>最后安装好之后，windows按<code>Win+R</code>打开命令提示符,mac打开命令行工具，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。</p><h2 id="1-2添加国内镜像源"><a href="#1-2添加国内镜像源" class="headerlink" title="1.2添加国内镜像源"></a>1.2添加国内镜像源</h2><p>如果没有梯子的话，可以使用阿里的国内镜像进行加速。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="1-3安装Git"><a href="#1-3安装Git" class="headerlink" title="1.3安装Git"></a>1.3安装Git</h2><p>为了把本地的网页文件上传到github上面去，我们需要用到分布式版本控制工具————Git[<a href="https://git-scm.com/download/win">下载地址]</a>。</p><p>安装选项还是全部默认，只不过最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开git了。</p><p>安装完成后在命令提示符中输入<code>git --version</code>验证是否安装成功。</p><h2 id="1-4-注册Github账号"><a href="#1-4-注册Github账号" class="headerlink" title="1.4 注册Github账号"></a>1.4 注册Github账号</h2><p>接下来就去注册一个github账号，用来存放我们的网站。大多数小伙伴应该都有了吧，作为一个合格的程序猿（媛）还是要有一个的。</p><p>打开<a href="https://github.com/%EF%BC%8C%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%A6%82%E4%B8%8B%E6%89%80%E7%A4%BA%EF%BC%9A">https://github.com/，新建一个项目，如下所示：</a><br><img src="https://godweiyang.com/2018/04/13/hexo-blog/1.jpg" alt="img"><br>然后如下图所示，输入自己的项目名字，后面一定要加<code>.github.io</code>后缀，README初始化也要勾上。<strong>名称一定要和你的github名字完全一样，比如你github名字叫<code>abc</code>，那么仓库名字一定要是<code>abc.github.io</code>。</strong><br><img src="https://godweiyang.com/2018/04/13/hexo-blog/2.jpg" alt="img"><br>然后项目就建成了，点击<code>Settings</code>，向下拉到最后有个<code>GitHub Pages</code>，点击<code>Choose a theme</code>选择一个主题。然后等一会儿，再回到<code>GitHub Pages</code>，会变成下面这样：<br><img src="https://godweiyang.com/2018/04/13/hexo-blog/3.jpg" alt="img"><br>点击那个链接，就会出现自己的网页啦，效果如下：<br><img src="https://godweiyang.com/2018/04/13/hexo-blog/4.jpg" alt="img"></p><h2 id="1-5-安装Hexo"><a href="#1-5-安装Hexo" class="headerlink" title="1.5 安装Hexo"></a>1.5 安装Hexo</h2><p>在合适的地方新建一个文件夹，用来存放自己的博客文件，比如存放到<code>~/Desktop/Dev/blog</code>目录下。</p><p>在该目录下右键点击<code>Git Bash Here</code>，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不要用Windows自带的控制台了。</p><p>定位到该目录下，输入<code>npm i hexo-cli -g</code>安装Hexo。会有几个报错，无视它就行。</p><h4 id="安装报错：Mac-install-hexo-use-sudo-but-sitll-permission-denied"><a href="#安装报错：Mac-install-hexo-use-sudo-but-sitll-permission-denied" class="headerlink" title="安装报错：Mac install hexo use sudo but sitll permission denied"></a>安装报错：Mac install hexo use sudo but sitll permission denied</h4><p>参照hexo官网 <a href="https://hexo.io/zh-cn/index.html">Hexo</a> 安装hexo时,使用命令 <code>npm install hexo-cli -g</code> 却报没有权限:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line"><span class="attribute">npm</span> WARN checkPermissions Missing write access to /usr/local/lib/node_modules</span><br><span class="line">npm ERR! path /usr/local/lib/node_modules</span><br><span class="line">npm ERR! code EACCES</span><br><span class="line">npm ERR! errno -<span class="number">13</span></span><br><span class="line">npm ERR! syscall access</span><br><span class="line">npm ERR! Error: EACCES: permission denied, access <span class="string">&#x27;/usr/local/lib/node_modules&#x27;</span></span><br><span class="line">npm ERR!  &#123; Error: EACCES: permission denied, access &#x27;/usr/local/lib/node_modules&#x27;</span><br><span class="line"><span class="attribute">npm</span> ERR!   stack: <span class="string">&#x27;Error: EACCES: permission denied, access \&#x27;/usr/local/lib/node_modules\&#x27;&#x27;</span>,</span><br><span class="line">npm ERR!   errno: -<span class="number">13</span>,</span><br><span class="line">npm ERR!   code: <span class="string">&#x27;EACCES&#x27;</span>,</span><br><span class="line">npm ERR!   syscall: <span class="string">&#x27;access&#x27;</span>,</span><br><span class="line">npm ERR!   path: <span class="string">&#x27;/usr/local/lib/node_modules&#x27;</span> &#125;</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! Please try running this command again as root/Administrator.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     /Users/xxx/.npm/_logs/<span class="number">2017</span>-<span class="number">10</span>-27T01_21_01_871Z-<span class="literal">debug</span>.log</span><br></pre></td></tr></table></figure><h4 id="解决permission-denied方法"><a href="#解决permission-denied方法" class="headerlink" title="解决permission denied方法"></a>解决permission denied方法</h4><p>第一步,赋予目录权限:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chown -R &#96;whoami&#96; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules</span><br></pre></td></tr></table></figure><p>第二步,安装hexo:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的点: 在安装hexo时,不要用 <code>sudo</code> 命令.</p></blockquote><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p><blockquote><p>出现   INFO  Start blogging with Hexo! 表示成功安装hexo</p></blockquote><p>然后初始化我们的网站，依次输入</p><p>$ hexo init blog</p><p>$ cd blog</p><p>$ npm install</p><p>$ hexo g # 或者hexo generate</p><p>$ hexo s # 或者hexo server，可以在<a href="http://localhost:4000/">http://localhost:4000/</a> 查看</p><p>输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器，然后浏览器打开<a href="http://localhost:4000/%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%88%91%E4%BB%AC%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%95%A6%EF%BC%8C%E6%95%88%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A">http://localhost:4000/，就可以看到我们的博客啦，效果如下：</a><br><img src="https://godweiyang.com/2018/04/13/hexo-blog/5.jpg" alt="img"></p><p>按<code>ctrl+c</code>关闭本地服务器。</p><h2 id="1-6连接Github与本地"><a href="#1-6连接Github与本地" class="headerlink" title="1.6连接Github与本地"></a>1.6连接Github与本地</h2><p>首先右键打开git bash，然后输入下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;godweiyang&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;792321264@qq.com&quot;</span></span><br></pre></td></tr></table></figure><p>用户名和邮箱根据你注册github的信息自行修改。</p><p>然后生成密钥SSH key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;792321264@qq.com&quot;</span></span><br></pre></td></tr></table></figure><p>打开<a href="https://github.com/">github</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名字随便。</p><p>git bash中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>将输出的内容复制到框中，点击确定保存。</p><p>输入<code>ssh -T git@github.com</code>，如果如下图所示，出现你的用户名，那就成功了。<br><img src="https://godweiyang.com/2018/04/13/hexo-blog/6.jpg" alt="img"></p><p>打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。</p><p>修改最后一行的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/godweiyang/godweiyang.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>repository修改为你自己的github项目地址。</p><h2 id="1-7-windows发布"><a href="#1-7-windows发布" class="headerlink" title="1.7 windows发布"></a>1.7 windows发布</h2><p>首先在博客根目录下右键打开git bash，安装一个扩展<code>npm i hexo-deployer-git</code>。</p><p>然后输入<code>hexo new post &quot;article title&quot;</code>，新建一篇文章。</p><p>然后打开<code>D:\study\program\blog\source\_posts</code>的目录，可以发现下面多了一个文件夹和一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p><p>编写完markdown文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到github上。这时打开你的github.io主页就能看到发布的文章啦。</p><h2 id="1-8-Hexo命令行发布总结"><a href="#1-8-Hexo命令行发布总结" class="headerlink" title="1.8 Hexo命令行发布总结"></a>1.8 Hexo命令行发布总结</h2><ul><li><p>hexo clean</p></li><li><p>hexo g # 或者hexo generate</p><p> hexo s # 或者hexo server，用浏览器打开<a href="http://localhost:4000/">http://localhost:4000/</a> 查看</p></li><li><p>hexo d</p></li></ul><p>如何用post生成一篇博客的情况的详细说明。</p><p>总结Hexo发布就是三步：</p><ol><li>执行<code>hexo new post myBlog</code>，在source/_post文件夹下生成一个 myBlog.md的文件。</li><li>编辑myBlog.md，书写自己的博客内容。</li><li>执行 <code>hexo g</code>生成静态页面；</li><li>执行 <code>hexo s</code> 启动本地服务器浏览器打开<a href="http://localhost:4000/">http://localhost:4000/</a> 预览效果；</li><li>执行 <code>hexo d</code> 将文章部署到github实现真正的网络博客。</li></ol><h2 id="1-9-Hexo博客主题推荐"><a href="#1-9-Hexo博客主题推荐" class="headerlink" title="1.9 Hexo博客主题推荐"></a>1.9 Hexo博客主题推荐</h2><p><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">闪烁之狐 | Hexo博客主题之hexo-theme-matery的介绍</a></p><p><a href="https://github.com/monniya/hexo-theme-new-vno">Hexo-new-vno</a></p><p><a href="https://github.com/blinkfox/typora-vue-theme">Vue风格的Typora主题</a></p><p><a href="https://godweiyang.com/2018/04/13/hexo-blog/">韦阳NPL|超详细Hexo+Github博客搭建小白教程</a></p><h2 id="2-0-Hexo-修改主题"><a href="#2-0-Hexo-修改主题" class="headerlink" title="2.0 Hexo 修改主题"></a>2.0 Hexo 修改主题</h2><ul><li>cd themes</li><li>git clone <a href="https://github.com/aircloud/hexo-theme-aircloud">https://github.com/aircloud/hexo-theme-aircloud</a></li><li><strong>打开_config.yml，修改themes:hexo-theme-aircloud</strong></li></ul><h2 id="2-1-Hexo-技术风"><a href="#2-1-Hexo-技术风" class="headerlink" title="2.1 Hexo 技术风"></a>2.1 Hexo 技术风</h2><ul><li><p>主题 - <a href="https://github.com/iissnan/hexo-theme-next">NexT.Pisces</a></p></li><li><p><a href="https://github.com/klugjo/hexo-theme-clean-blog">CleanBlog</a><br> <img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/20200509101413.png"></p></li><li><p><a href="https://github.com/aircloud/hexo-theme-aircloud">AirCloud</a></p><pre><code> ![](https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/20200509aircloud.png)</code></pre></li><li><p><a href="https://github.com/tangkunyin/hexo-theme-jsimple">JSimple</a></p></li><li><p><a href="https://github.com/F0r3at/Lights">Lights</a></p><p> <img src="https://raw.githubusercontent.com/digitalcraftsman/hugo-cactus-theme/dev/images/screenshot.png"></p></li></ul><h2 id="2-2唯美文艺风"><a href="#2-2唯美文艺风" class="headerlink" title="2.2唯美文艺风"></a>2.2唯美文艺风</h2><ul><li><p><a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a>  | <a href="https://github.com/blinkfox/hexo-theme-matery/blob/master/README_CN.md">文档</a> | <a href="http://blinkfox.com/">闪烁之狐</a>    <a href="https://godweiyang.com/">韦阳的博客</a></p></li><li><p><a href="https://github.com/ppoffice/hexo-theme-icarus">Icarus</a></p><p><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/20200509102712.png"></p></li><li><p><a href="https://github.com/fi3ework/hexo-theme-archer">Archer</a></p><pre><code>![](http://firework.studio/archer-demo/2017-08-14/hexo-theme-archer/snap.png)</code></pre></li><li><p><a href="https://github.com/zthxxx/hexo-theme-Wikitten">wikitten-wiki风格</a></p><pre><code>![](https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/20200509103151.png)</code></pre></li></ul><h2 id="2-3-Hexo字体"><a href="#2-3-Hexo字体" class="headerlink" title="2.3 Hexo字体"></a>2.3 Hexo字体</h2><ul><li><a href="https://www.dazhuanlan.com/2020/02/02/5e367a7cdb9a5/">Hexo博客之改字体</a></li></ul><h2 id="2-4-Hexo代码高亮"><a href="#2-4-Hexo代码高亮" class="headerlink" title="2.4 Hexo代码高亮"></a>2.4 Hexo代码高亮</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swift语法高亮注意首字母不能大写</span><br></pre></td></tr></table></figure><h2 id="2-5-报错"><a href="#2-5-报错" class="headerlink" title="2.5 报错"></a>2.5 报错</h2><h2 id="1、Permission-denied-publickey"><a href="#1、Permission-denied-publickey" class="headerlink" title="1、Permission denied (publickey)."></a>1、Permission denied (publickey).</h2><p><strong>将SSH访问修改为https访问，修改hexo根目录下的_config.yml文件如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  <span class="comment"># repo: git@github.com:YourName/YourName.io.git</span></span><br><span class="line">  repo: https://github.com/YourName/YourName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="2、hexo-g报错：can-not-read-a-block-mapping-entry"><a href="#2、hexo-g报错：can-not-read-a-block-mapping-entry" class="headerlink" title="2、hexo g报错：can not read a block mapping entry"></a>2、hexo g报错：can not read a block mapping entry</h2><p>hexo的文件配置是怎么样设置属性的：</p><blockquote><p>在配置文件里面，都是按照<code>属性名+英文冒号+英文空格+属性值</code>，这个形式进行属性设置的。</p></blockquote><p><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/20200501170142.png"></p><h2 id="3、hexo-tags-404："><a href="#3、hexo-tags-404：" class="headerlink" title="3、hexo tags 404："></a>3、hexo tags 404：</h2><h3 id="方法一（在SOURCE目录下默认无CATEGORIES和TAGS子目录）："><a href="#方法一（在SOURCE目录下默认无CATEGORIES和TAGS子目录）：" class="headerlink" title="方法一（在SOURCE目录下默认无CATEGORIES和TAGS子目录）："></a>方法一（在SOURCE目录下默认无CATEGORIES和TAGS子目录）：</h3><p>新建categories和tags子目录以及相应文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure><p>编辑source/tags/index.md文件,添加如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type: &quot;tags&quot;</span><br><span class="line">layout: &quot;tags&quot;</span><br></pre></td></tr></table></figure><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><h4 id="1-编辑scaffolds-draft-md如下-hexo-clean-amp-amp-hexo-d即可"><a href="#1-编辑scaffolds-draft-md如下-hexo-clean-amp-amp-hexo-d即可" class="headerlink" title="1. 编辑scaffolds/draft.md如下, hexo clean &amp;&amp; hexo d即可"></a>1. 编辑scaffolds/draft.md如下, hexo clean &amp;&amp; hexo d即可</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">tags: &#123;&#123; tags &#125;&#125;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h4 id="2、编辑scaffolds-post-md如下"><a href="#2、编辑scaffolds-post-md如下" class="headerlink" title="2、编辑scaffolds/post.md如下"></a>2、编辑scaffolds/post.md如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags: &#123;&#123; tags &#125;&#125;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h4 id="3、编辑tags-index-md如下"><a href="#3、编辑tags-index-md如下" class="headerlink" title="3、编辑tags/index.md如下"></a>3、编辑tags/index.md如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: xxx</span><br><span class="line">date: 2019-04-26 17:47:43</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">layout: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="2-6-设置tag标签"><a href="#2-6-设置tag标签" class="headerlink" title="2.6 设置tag标签"></a>2.6 设置tag标签</h2><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: Tagcloud</span><br><span class="line">date: 2017-04-26 17:47:43</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">layout: &quot;tags&quot;</span><br></pre></td></tr></table></figure><h2 id="2-7-主题类博客"><a href="#2-7-主题类博客" class="headerlink" title="2.7 主题类博客"></a>2.7 主题类博客</h2><ul><li><a href="https://mp.weixin.qq.com/s/15BiuDwMVerBi0liCcFL5w">动态博客系统Halo</a></li></ul><h2 id="2-8-Hexo-Github图床问题"><a href="#2-8-Hexo-Github图床问题" class="headerlink" title="2.8 Hexo+Github图床问题"></a>2.8 Hexo+Github图床问题</h2><h4 id="使用Github图床会遇到连接WiFi时上传失败的问题，决定看下网络延时到底是多少："><a href="#使用Github图床会遇到连接WiFi时上传失败的问题，决定看下网络延时到底是多少：" class="headerlink" title="使用Github图床会遇到连接WiFi时上传失败的问题，决定看下网络延时到底是多少："></a>使用Github图床会遇到连接WiFi时上传失败的问题，决定看下网络延时到底是多少：</h4><ul><li>方法：<code>ping raw.githubusercontent.com</code></li><li>对比WiFi和4G热点时分别延时ms</li></ul><h5 id="使用WiFi网络延迟最大延时388ms"><a href="#使用WiFi网络延迟最大延时388ms" class="headerlink" title="使用WiFi网络延迟最大延时388ms"></a>使用WiFi网络延迟最大延时388ms</h5><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span> ping raw.githubusercontent.com</span><br><span class="line">PING github.map.fastly.net (151.101.76.133): 56 data bytes</span><br><span class="line">64 bytes from 151.101.76.133: icmp<span class="built_in">_</span>seq=0 ttl=48 time=168.698 ms</span><br><span class="line">64 bytes from 151.101.76.133: icmp<span class="built_in">_</span>seq=1 ttl=48 time=212.697 ms</span><br><span class="line">64 bytes from 151.101.76.133: icmp<span class="built_in">_</span>seq=2 ttl=48 time=129.252 ms</span><br><span class="line">64 bytes from 151.101.76.133: icmp<span class="built_in">_</span>seq=3 ttl=48 time=114.672 ms</span><br><span class="line">64 bytes from 151.101.76.133: icmp<span class="built_in">_</span>seq=4 ttl=48 time=174.627 ms</span><br><span class="line">64 bytes from 151.101.76.133: icmp<span class="built_in">_</span>seq=5 ttl=48 time=125.970 ms</span><br><span class="line">64 bytes from 151.101.76.133: icmp<span class="built_in">_</span>seq=6 ttl=48 time=163.915 ms</span><br><span class="line">64 bytes from 151.101.76.133: icmp<span class="built_in">_</span>seq=7 ttl=48 time=137.259 ms</span><br><span class="line">64 bytes from 151.101.76.133: icmp<span class="built_in">_</span>seq=8 ttl=48 time=186.289 ms</span><br><span class="line">64 bytes from 151.101.76.133: icmp<span class="built_in">_</span>seq=9 ttl=48 time=388.208 ms</span><br><span class="line">64 bytes from 151.101.76.133: icmp<span class="built_in">_</span>seq=10 ttl=48 time=284.400 ms</span><br><span class="line">64 bytes from 151.101.76.133: icmp<span class="built_in">_</span>seq=11 ttl=48 time=165.050 ms</span><br><span class="line">64 bytes from 151.101.76.133: icmp<span class="built_in">_</span>seq=12 ttl=48 time=135.364 ms</span><br><span class="line">64 bytes from 151.101.76.133: icmp<span class="built_in">_</span>seq=13 ttl=48 time=115.417 ms</span><br><span class="line">64 bytes from 151.101.76.133: icmp<span class="built_in">_</span>seq=14 ttl=48 time=180.937 ms</span><br><span class="line">64 bytes from 151.101.76.133: icmp<span class="built_in">_</span>seq=15 ttl=48 time=144.686 ms</span><br><span class="line">64 bytes from 151.101.76.133: icmp<span class="built_in">_</span>seq=16 ttl=48 time=222.246 ms</span><br><span class="line">64 bytes from 151.101.76.133: icmp<span class="built_in">_</span>seq=17 ttl=48 time=143.242 ms</span><br><span class="line">64 bytes from 151.101.76.133: icmp<span class="built_in">_</span>seq=18 ttl=48 time=265.539 ms</span><br><span class="line">64 bytes from 151.101.76.133: icmp<span class="built_in">_</span>seq=19 ttl=48 time=182.337 ms</span><br></pre></td></tr></table></figure><h5 id="使用4G流量最大延迟662ms-1006ms"><a href="#使用4G流量最大延迟662ms-1006ms" class="headerlink" title="使用4G流量最大延迟662ms-1006ms"></a>使用4G流量最大延迟662ms-1006ms</h5><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span> ping raw.githubusercontent.com</span><br><span class="line">PING github.map.fastly.net (151.101.108.133): 56 data bytes</span><br><span class="line">Request timeout for icmp<span class="built_in">_</span>seq 0</span><br><span class="line">64 bytes from 151.101.108.133: icmp<span class="built_in">_</span>seq=1 ttl=49 time=116.657 ms</span><br><span class="line">64 bytes from 151.101.108.133: icmp<span class="built_in">_</span>seq=2 ttl=49 time=161.876 ms</span><br><span class="line">64 bytes from 151.101.108.133: icmp<span class="built_in">_</span>seq=3 ttl=49 time=251.359 ms</span><br><span class="line">Request timeout for icmp<span class="built_in">_</span>seq 4</span><br><span class="line">64 bytes from 151.101.108.133: icmp<span class="built_in">_</span>seq=5 ttl=49 time=341.720 ms</span><br><span class="line">64 bytes from 151.101.108.133: icmp<span class="built_in">_</span>seq=6 ttl=49 time=163.188 ms</span><br><span class="line">64 bytes from 151.101.108.133: icmp<span class="built_in">_</span>seq=7 ttl=49 time=175.687 ms</span><br><span class="line">64 bytes from 151.101.108.133: icmp<span class="built_in">_</span>seq=8 ttl=49 time=559.466 ms</span><br><span class="line">64 bytes from 151.101.108.133: icmp<span class="built_in">_</span>seq=9 ttl=49 time=111.535 ms</span><br><span class="line">64 bytes from 151.101.108.133: icmp<span class="built_in">_</span>seq=10 ttl=49 time=250.328 ms</span><br><span class="line">64 bytes from 151.101.108.133: icmp<span class="built_in">_</span>seq=11 ttl=49 time=113.041 ms</span><br><span class="line">64 bytes from 151.101.108.133: icmp<span class="built_in">_</span>seq=12 ttl=49 time=110.778 ms</span><br><span class="line">64 bytes from 151.101.108.133: icmp<span class="built_in">_</span>seq=13 ttl=49 time=377.596 ms</span><br><span class="line">64 bytes from 151.101.108.133: icmp<span class="built_in">_</span>seq=14 ttl=49 time=143.109 ms</span><br><span class="line">64 bytes from 151.101.108.133: icmp<span class="built_in">_</span>seq=15 ttl=49 time=482.161 ms</span><br><span class="line">Request timeout for icmp<span class="built_in">_</span>seq 16</span><br><span class="line">64 bytes from 151.101.108.133: icmp<span class="built_in">_</span>seq=17 ttl=49 time=279.151 ms</span><br><span class="line">64 bytes from 151.101.108.133: icmp<span class="built_in">_</span>seq=18 ttl=49 time=141.005 ms</span><br><span class="line">Request timeout for icmp<span class="built_in">_</span>seq 19</span><br><span class="line">64 bytes from 151.101.108.133: icmp<span class="built_in">_</span>seq=20 ttl=49 time=662.214 ms</span><br><span class="line">64 bytes from 151.101.108.133: icmp<span class="built_in">_</span>seq=21 ttl=49 time=282.395 ms</span><br><span class="line">64 bytes from 151.101.108.133: icmp<span class="built_in">_</span>seq=22 ttl=49 time=149.982 ms</span><br><span class="line">64 bytes from 151.101.108.133: icmp<span class="built_in">_</span>seq=23 ttl=49 time=419.625 ms</span><br><span class="line">64 bytes from 151.101.108.133: icmp<span class="built_in">_</span>seq=24 ttl=49 time=641.557 ms</span><br><span class="line">64 bytes from 151.101.108.133: icmp<span class="built_in">_</span>seq=25 ttl=49 time=264.912 ms</span><br><span class="line">64 bytes from 151.101.108.133: icmp<span class="built_in">_</span>seq=26 ttl=49 time=106.156 ms</span><br></pre></td></tr></table></figure><h5 id="为什么使用4G热点能够成功通过PigGo上传？"><a href="#为什么使用4G热点能够成功通过PigGo上传？" class="headerlink" title="为什么使用4G热点能够成功通过PigGo上传？"></a>为什么使用4G热点能够成功通过PigGo上传？</h5>]]></content>
      
      
      <categories>
          
          <category> 指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS多线程</title>
      <link href="2018/06/01/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>2018/06/01/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="深入理解GCD"><a href="#深入理解GCD" class="headerlink" title="深入理解GCD"></a><a href="https://bestswifter.com/deep-gcd/">深入理解GCD</a></h2><p><strong><code>dispatch_async</code> 会把任务添加到队列的一个链表中，添加完后会唤醒队列，根据 vtable 中的函数指针，调用 wakeup 方法。</strong></p><ul><li>在 wakeup 方法中，从线程池里取出工作线程(如果没有就新建)，然后在工作线程中取出链表头部指向的 block 并执行。</li></ul><p><strong><code>dispatch_sync</code> 的实现略简单一些，它不涉及线程池(因此一般都在当前线程执行)，而是利用与线程绑定的信号量来实现串行。</strong></p><p>分发到不同队列时，代码进入的分支也不一样，比如 <code>dispatch_async</code> 到主队列的任务由 runloop 处理，而分发到其他队列的任务由线程池处理。</p><p>在当前串行队列中执行 <code>dispatch_sync</code> 时，由于 <code>dq_running</code> 属性(表示在运行的任务数量) 为 1，所以以下判断成立:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (slowpath(!dispatch_atomic_cmpxchg2o(dq, dq_running, <span class="number">0</span>, <span class="number">1</span>))) &#123;  </span><br><span class="line">    <span class="keyword">return</span> _dispatch_barrier_sync_f_slow(dq, ctxt, func);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>_dispatch_barrier_sync_f_slow</code> 函数中使用了线程对应的信号量并且调用 <code>wait</code> 方法，从而导致线程死锁。</p><p>如果向其它队列同步提交 block，最终进入 <code>_dispatch_barrier_sync_f_invoke</code>，它只是保证了 block 执行的原子性，但没有使用线程对应的信号量。</p><p><strong>对于信号量来说，它主要使用 <code>signal</code> 和 <code>wait</code> 这两个接口，底层分别调用了内核提供的方法。</strong></p><ul><li>在调用 wait 方法后，先将 value 减一，如果大于零立刻返回，否则陷入等待。<code>signal</code> 方法将信号量加一，如果 value 大于零立刻返回，否则说明唤醒了某一个等待线程，此时由系统决定哪个线程的等待方法可以返回。</li></ul><p><strong><code>dispatch_group</code> 的本质就是一个 value 非常大的信号量，等待 group 完成实际上就是等待 value 恢复初始值。</strong>而</p><ul><li> notify 的作用是将所有注册的回调组装成一个链表，在 <code>dispatch_async</code> 完成时判断 value 是不是恢复初始值，如果是则调用 <code>dispatch_async</code> 异步执行所有注册的回调。</li></ul><p><strong><code>dispatch_once</code> 通过一个静态变量来标记 block 是否已被执行，同时使用信号量确保只有一个线程能执行，执行完 block 后会唤醒其他所有等待的线程。</strong></p><p><strong><code>dispatch_barrier_async</code> 改变了 block 的 <code>vtable</code> 标记位，当它将要被取出执行时，会等待前面的 block 都执行完，然后在下一次循环中被执行。</strong></p><p><strong><code>dispatch_source</code> 可以用来实现定时器。</strong></p><ul><li>所有的 source 会被提交到用户指定的队列，然后提交到 manager 队列中，按照触发时间排好序。</li><li>随后找到最近触发的定时器，调用内核的 <code>select</code> 方法等待。</li><li>等待结束后，依次唤醒 manager 队列和用户指定队列，最终触发一开始设置的回调 block。</li></ul><p><strong>GCD 中的对象用 <code>do_suspend_cnt</code> 来表示是否暂停。队列默认处于启动状态，而 <code>dispatch_source</code> 需要手动启动。</strong></p><p><strong><code>dispatch_after</code> 函数依赖于 <code>dispatch_source</code> 定时器，它只是注册了一个定时器，然后在回调函数中执行 block。</strong></p><p><a href="https://www.cnblogs.com/beckwang0912/p/7146833.html">GCD死锁案例分析</a></p><p><a href="https://juejin.im/post/5ab4a4466fb9a028d14107ff#heading-31">NSOperation案例分析</a></p><h2 id="深入理解iOS开发中的锁"><a href="#深入理解iOS开发中的锁" class="headerlink" title="深入理解iOS开发中的锁"></a><a href="https://bestswifter.com/ios-lock/">深入理解iOS开发中的锁</a></h2><p><img src="http://images.bestswifter.com/lock_benchmark.png"></p><h4 id="自旋锁的目的是为了确保临界区只有一个线程可以访问"><a href="#自旋锁的目的是为了确保临界区只有一个线程可以访问" class="headerlink" title="自旋锁的目的是为了确保临界区只有一个线程可以访问"></a>自旋锁的目的是为了确保临界区只有一个线程可以访问</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> lock = <span class="literal">false</span>; <span class="comment">// 一开始没有锁上，任何线程都可以申请锁  </span></span><br><span class="line"><span class="keyword">do</span> &#123;  </span><br><span class="line">    <span class="keyword">while</span>(test_and_set(&amp;lock); <span class="comment">// test_and_set 是一个原子操作</span></span><br><span class="line">        Critical section  <span class="comment">// 临界区</span></span><br><span class="line">    lock = <span class="literal">false</span>; <span class="comment">// 相当于释放锁，这样别的线程可以进入临界区</span></span><br><span class="line">        Reminder section <span class="comment">// 不需要锁保护的代码        </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>显然在 while 循环中，<strong>线程处于忙等状态，白白浪费 CPU 时间，最终因为超时被操作系统抢占时间片。如果临界区执行时间较长，比如是文件读写，这种忙等是毫无必要的。</strong></li><li>如果临界区的执行时间过长，使用自旋锁不是个好主意</li></ul><h4 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h4><ul><li>首先会把信号量的值减一，并判断是否大于零。</li><li>如果大于零，说明不用等待，所以立刻返回。小于0等待signal唤醒线程</li></ul><h4 id="pthread-mutex互斥锁"><a href="#pthread-mutex互斥锁" class="headerlink" title="pthread_mutex互斥锁"></a>pthread_mutex互斥锁</h4><ul><li>互斥锁的实现原理与信号量非常相似，不是使用忙等，而是<strong>阻塞线程并睡眠，需要进行上下文切换。</strong></li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pthread_mutexattr_t attr;  </span><br><span class="line">pthread_mutexattr_init(&amp;attr);  </span><br><span class="line">pthread_mutexattr_settype(&amp;attr, PTHREAD_MUTEX_NORMAL);  <span class="comment">// 定义锁的属性</span></span><br><span class="line"></span><br><span class="line">pthread_mutex_t mutex;  </span><br><span class="line">pthread_mutex_init(&amp;mutex, &amp;attr) <span class="comment">// 创建锁</span></span><br><span class="line"></span><br><span class="line">pthread_mutex_lock(&amp;mutex); <span class="comment">// 申请锁  </span></span><br><span class="line">    <span class="comment">// 临界区</span></span><br><span class="line">pthread_mutex_unlock(&amp;mutex); <span class="comment">// 释放锁 </span></span><br></pre></td></tr></table></figure><ul><li>一般情况下，一个线程只能申请一次锁，也只能在获得锁的情况下才能释放锁，多次申请锁或释放未获得的锁都会导致崩溃。</li><li>假设在已经获得锁的情况下再次申请锁，线程会因为等待锁的释放而进入睡眠状态，因此就不可能再释放锁，从而导致死锁。</li><li>然而这种情况经常会发生，比如某个函数申请了锁，在临界区内又递归调用了自己。辛运的是 <code>pthread_mutex</code> 支持递归锁，也就是允许一个线程递归的申请锁，只要把 attr 的类型改成 <code>PTHREAD_MUTEX_RECURSIVE</code> 即可。</li></ul><h4 id="NSLock"><a href="#NSLock" class="headerlink" title="NSLock"></a>NSLock</h4><ul><li><p><code>NSLock</code> 只是在内部封装了一个 <code>pthread_mutex</code>，属性为 <code>PTHREAD_MUTEX_ERRORCHECK</code>，它会损失一定性能换来错误提示。</p></li><li><p><code>NSLock</code> 比 <code>pthread_mutex</code> 略慢的原因在于它需要经过方法调用，同时由于缓存的存在，多次方法调用不会对性能产生太大的影响。</p></li></ul><h4 id="NSCondition"><a href="#NSCondition" class="headerlink" title="NSCondition"></a>NSCondition</h4><ul><li><p><code>NSCondition</code> 的底层是通过条件变量(condition variable) <code>pthread_cond_t</code> 来实现的。</p></li><li><p><strong>条件变量有点像信号量，提供了线程阻塞与信号机制，因此可以用来阻塞某个线程**</strong>，并等待某个数据就绪，随后唤醒线程**，比如常见的生产者-消费者模式。</p></li><li><p><code>NSCondition</code> 其实是封装了一个互斥锁和条件变量， 它把前者的 <code>lock</code> 方法和后者的 <code>wait/signal</code> 统一在 <code>NSCondition</code> 对象中，暴露给使用者</p></li><li><p>它的加解锁过程与 <code>NSLock</code> 几乎一致，理论上来说耗时也应该一样(实际测试也是如此)。在图中显示它耗时略长，我猜测有可能是测试者在每次加解锁的前后还附带了变量的初始化和销毁操作。</p></li></ul><h4 id="NSRecursiveLock"><a href="#NSRecursiveLock" class="headerlink" title="NSRecursiveLock"></a><a href="https://bestswifter.com/ios-lock/#nsrecursivelock">NSRecursiveLock</a></h4><ul><li><p>递归锁也是通过 <code>pthread_mutex_lock</code> 函数来实现，在函数内部会判断锁的类型，如果显示是递归锁，就允许递归调用，仅仅将一个计数器加一，锁的释放过程也是同理。</p><p><strong>使用递归锁NSRecursiveLock</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSLock</span> *lock = [[<span class="built_in">NSLock</span> alloc] init];</span><br><span class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> (^RecursiveMethod)(<span class="keyword">int</span>);</span><br><span class="line">    RecursiveMethod = ^(<span class="keyword">int</span> value) &#123;</span><br><span class="line">        [lock lock];<span class="comment">//递归调用时失败，NSLock不能被同一线程多次获取，多次获取使用NSRecursiveLock</span></span><br><span class="line">        <span class="keyword">if</span> (value &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;value = %d&quot;</span>, value);</span><br><span class="line">            sleep(<span class="number">2</span>);</span><br><span class="line">            RecursiveMethod(value - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        [lock unlock];</span><br><span class="line">    &#125;;</span><br><span class="line">    RecursiveMethod(<span class="number">5</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4></li></ul><h4 id="synchronized"><a href="#synchronized" class="headerlink" title="@synchronized"></a><a href="http://yulingtianxia.com/blog/2015/11/01/More-than-you-want-to-know-about-synchronized/">@synchronized</a></h4><p>这其实是一个 OC 层面的锁， 主要是通过牺牲性能换来语法上的简洁与可读。</p><ol><li>你调用 <code>sychronized</code> 的每个对象，runtime 都会为其分配一个递归锁并存储在哈希表中。</li><li>如果在 <code>sychronized</code> 内部对象被释放或被设为 <code>nil</code> 看起来都 OK。不过这没在文档中说明，所以我不会再生产代码中依赖这条。</li><li>注意不要向你的 <code>sychronized</code> block 传入 <code>nil</code>！这将会从代码中移走线程安全。你可以通过在 <code>objc_sync_nil</code> 上加断点来查看是否发生了这样的事情。</li></ol><h2 id="1、你理解的多线程？并发和串行，同步和异步"><a href="#1、你理解的多线程？并发和串行，同步和异步" class="headerlink" title="1、你理解的多线程？并发和串行，同步和异步"></a>1、<strong>你理解的多线程？并发和串行，同步和异步</strong></h2><ul><li>同步和异步的区别: <strong>是否开辟新的线程</strong>，同步只能在当前线程执行任务，异步可以再新的线程执行任务</li><li>串行和并发的区别:是<strong>任务执行的顺序</strong>，串行任务只能顺序执行，并发可以多个任务同时执行。</li></ul><h2 id="2、iOS多线程有哪些？常用哪个？"><a href="#2、iOS多线程有哪些？常用哪个？" class="headerlink" title="2、iOS多线程有哪些？常用哪个？"></a>2、iOS多线程有哪些？常用哪个？</h2><ul><li>NSThread、GCD/NSOperationQueue</li><li>常用GCD/NSOperation</li></ul><p><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/20200314043637.png" alt="pthread NSThread GCD NSoperatio"></p><h2 id="3、GCD-的队列类型有哪些？"><a href="#3、GCD-的队列类型有哪些？" class="headerlink" title="3、GCD 的队列类型有哪些？"></a><strong>3、GCD 的队列类型有哪些？</strong></h2><p>GCD的队列可以分为2大类型</p><ul><li>并发队列（Concurrent Dispatch Queue）<ul><li>可以让多个任务并发（同时）执行（自动开启多个线程同时执行任务）</li><li>并发功能只有在异步（dispatch_async）函数下才有效</li></ul></li><li>串行队列（Serial Dispatch Queue）<ul><li>让任务一个接着一个地执行（一个任务执行完毕后，再执行下一个任务）</li></ul></li></ul><h2 id="4、OperationQueue-和-GCD-的区别？"><a href="#4、OperationQueue-和-GCD-的区别？" class="headerlink" title="4、OperationQueue 和 GCD 的区别？"></a><strong>4、OperationQueue 和 GCD 的区别？</strong></h2><ol><li>GCD是底层的C语言构成的API，而NSOperationQueue及相关对象是Objc的对象。在GCD中，在队列中执行的是由block构成的任务，这是一个轻量级的数据结构；而Operation作为一个对象，为我们提供了更多的选择；</li><li>在NSOperationQueue中，我们可以随时取消已经设定要准备执行的任务(当然，已经开始的任务就无法阻止了)，而GCD没法停止已经加入queue的block(其实是有的，但需要许多复杂的代码)；</li><li>NSOperation能够方便地设置依赖关系，我们可以让一个Operation依赖于另一个Operation，这样的话尽管两个Operation处于同一个并行队列中，但前者会直到后者执行完毕后再执行；</li><li>我们能将KVO应用在NSOperation中，可以监听一个Operation是否完成或取消，这样子能比GCD更加有效地掌控我们执行的后台任务；</li><li>在NSOperation中，我们能够设置NSOperation的priority优先级，能够使同一个并行队列中的任务区分先后地执行，而在GCD中，我们只能区分不同任务队列的优先级，如果要区分block任务的优先级，也需要大量的复杂代码；</li><li>我们能够对NSOperation进行继承，在这之上添加成员变量与成员方法，提高整个代码的复用度，这比简单地将block任务排入执行队列更有自由度，能够在其之上添加更多自定制的功能。</li></ol><p><strong>总的来说，Operation queue 提供了更多你在编写多线程程序时需要的功能，并隐藏了许多线程调度，线程取消与线程优先级的复杂代码，为我们提供简单的API入口。</strong></p><p><strong>从编程原则来说，一般我们需要尽可能的使用高等级、封装完美的API，在必须时才使用底层API。但是我认为当我们的需求能够以更简单的底层代码完成的时候，简洁的GCD或许是个更好的选择，而Operation queue 为我们提供能更多的选择。</strong></p><h2 id="5、线程安全是什么？如何处理线程安全的问题？"><a href="#5、线程安全是什么？如何处理线程安全的问题？" class="headerlink" title="5、线程安全是什么？如何处理线程安全的问题？"></a><strong>5、线程安全是什么？如何处理线程安全的问题？</strong></h2><blockquote><p>我们一般通过线程同步方案如加锁的方式来实现线程的安全</p><p><a href="https://bestswifter.com/ios-lock/">iOS锁的原理</a> |   <a href="https://www.jianshu.com/p/e56c3d28e77d">深入浅出iOS系统内核-同步机制</a></p></blockquote><ul><li><strong>os_unfair_lock：iOS10开始os_unfair_lock来替代OSSpinLock, 等待锁的线程会进入休眠不占用CPU资源， 这个os_unfair_lock解决了优先级翻转问题。</strong></li><li><strong>OSSpinLock叫做”自旋锁”，等待锁的线程会处于忙等一直占用着CPU资源</strong></li><li><strong>dispatch_semaphore：信号量为1的semaphore也可以看做是锁</strong></li><li><strong>pthread_mutex：跨平台的互斥锁。互斥锁的实现原理与信号量非常相似，不是使用忙等，而是阻塞线程并睡眠，需要进行上下文切换。</strong></li><li><strong>使用GCD的串行队列也可以实现锁的功能</strong></li><li><strong>NSLock是对metex互斥锁的封装，NSRecurisiveLock也是对metex的递归封装，API和NSLock一直。</strong></li><li>NSCondition</li><li>NSConditionLock</li><li><strong>@synchorized也是mutex的递归封装，@synchronized(obj)内部会生成obj对应的递归锁，然后进行加锁、解锁操作。</strong></li></ul><h2 id="6、自旋锁和互斥锁如何选择？"><a href="#6、自旋锁和互斥锁如何选择？" class="headerlink" title="6、自旋锁和互斥锁如何选择？"></a><strong>6、自旋锁和互斥锁如何选择？</strong></h2><p><strong>自旋锁OSSpinLock：当线程获取锁，其他等待锁的线程会忙等一直占用CPU,自旋锁有优先级翻转的可能性，所以苹果已经弃用自旋锁OSSpinLock改用os_unfair_lock.</strong></p><p><strong>互斥锁mutext：阻塞线程并休眠，其他线程才能正常访问，用互斥的方式来保证线程的安全。</strong></p><p><strong>递归锁：顾名思义，可以被一个线程多次获得，而不会引起死锁。它记录了成功获得锁的次数，每一次成功的获得锁，必须有一个配套的释放锁和其对应，这样才不会引起死锁。NSRecursiveLock 会记录上锁和解锁的次数，当二者平衡的时候，才会释放锁，其它线程才可以上锁成功。</strong></p><ul><li><strong>什么情况使用自旋锁比较划算？</strong> <ul><li>预计线程等待锁的<strong>时间很短</strong> </li><li><strong>竞争情况很少</strong>发生，加锁的代码（临界区）经常被调用</li><li><strong>CPU资源不紧张</strong> 多核处理器</li></ul></li><li><strong>什么情况使用互斥锁比较划算？</strong> <ul><li>预计线程等待锁的<strong>时间较长</strong> </li><li>临界区<strong>代码复杂或者循环量大</strong> </li><li><strong>临界区竞争非常激烈</strong> </li><li>单核处理器 临界区有IO操作 </li></ul></li></ul><ul><li><strong>追问二：使用以上锁需要注意哪些？</strong> </li><li><strong>追问三：用C/OC/C++，任选其一，实现自旋或互斥？口述即可！</strong></li></ul><h2 id="7、iOS线程同步方案性能比较"><a href="#7、iOS线程同步方案性能比较" class="headerlink" title="7、iOS线程同步方案性能比较"></a>7、iOS线程同步方案<strong>性能</strong>比较</h2><p><strong>性能从高到低排序:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os_unfair_lock &gt; OSSpinLock &gt; dispatch_semaphore &gt; pthread_mutex &gt; dispatch_queue(DISPATCH_QUEUE_SERIAL) &gt; NSLock &gt; NSCondition &gt; pthread_mutex(recursive) &gt; NSRecursiveLock &gt; NSConditionLock &gt; @synchronized</span><br></pre></td></tr></table></figure><h2 id="8、如何用gcd实现并发执行1和2再执行任务3的方案？"><a href="#8、如何用gcd实现并发执行1和2再执行任务3的方案？" class="headerlink" title="**8、如何用gcd实现并发执行1和2再执行任务3的方案？"></a>**8、如何用gcd实现并发执行1和2再执行任务3的方案？</h2><ul><li><strong>异步并发执行任务1、任务2</strong> </li><li><strong>等任务1、任务2都执行完毕后，再回到主线程执行任务3</strong></li></ul><h4 id="dispatch-group-notify"><a href="#dispatch-group-notify" class="headerlink" title="dispatch_group_notify"></a>dispatch_group_notify</h4><h4 id="dispatch-barrier-async"><a href="#dispatch-barrier-async" class="headerlink" title="dispatch_barrier_async"></a>dispatch_barrier_async</h4><h4 id="dispatch-sempher-2"><a href="#dispatch-sempher-2" class="headerlink" title="dispatch_sempher(2)"></a>dispatch_sempher(2)</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">let</span> group = <span class="type">DispatchGroup</span>()</span><br><span class="line">  <span class="keyword">let</span> queue = <span class="type">DispatchQueue</span>.<span class="keyword">init</span>(label: <span class="string">&quot;handleAPIQueue&quot;</span>)</span><br><span class="line">  group.enter()</span><br><span class="line">  queue.async &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;任务1完成&quot;</span>)</span><br><span class="line">      group.leave()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  group.enter()</span><br><span class="line">  queue.async &#123;</span><br><span class="line">      <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() + <span class="number">3</span>) &#123;</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&quot;任务2完成&quot;</span>)</span><br><span class="line">          group.leave() <span class="comment">//注意leave的位置必须在任务完成后</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//group.leave() //如果leave放在这里的话，notify不会等待任务2完成就会触发</span></span><br><span class="line"></span><br><span class="line">  group.enter()</span><br><span class="line">  queue.async &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;任务3完成&quot;</span>)</span><br><span class="line">      group.leave()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  group.notify(queue: queue) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;所有任务都完成了&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/die_word/article/details/80797329">网络请求应用实例</a></p><h2 id="9、如何实现多度单写？"><a href="#9、如何实现多度单写？" class="headerlink" title="9、如何实现多度单写？"></a><code>9、如何实现多度单写？</code></h2><p><strong>dispatch_barrier_async</strong></p><ul><li>这个函数传入的并发队列必须是自己通过dispatch_queue_cretate创建的 </li><li>如果传入的是一个串行或是一个全局的并发队列，那这个函数便等同于dispatch_async函数的效果</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  dispatch_queue_t concurrentQueue = dispatch_queue_create(<span class="string">&quot;com.queue.concurrent&quot;</span>, <span class="type">DISPATCH_QUEUE_CONCURRENT</span>);</span><br><span class="line">  dispatch_async(concurrentQueue, ^&#123;</span><br><span class="line">      <span class="type">NSLog</span>(@<span class="string">&quot;async_1&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  dispatch_async(concurrentQueue, ^&#123;</span><br><span class="line">      <span class="type">NSLog</span>(@<span class="string">&quot;async_2&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  dispatch_async(concurrentQueue, ^&#123;</span><br><span class="line">         <span class="type">NSLog</span>(@<span class="string">&quot;async_3&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  dispatch_barrier_async(concurrentQueue, ^&#123;<span class="comment">//dispatch_barrier_sync效果相同</span></span><br><span class="line">      <span class="type">NSLog</span>(@<span class="string">&quot;dispatch_barrier_async&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  dispatch_async(concurrentQueue, ^&#123;</span><br><span class="line">      <span class="type">NSLog</span>(@<span class="string">&quot;async_4&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">01-OC底层[25009:1007376] async_1</span></span><br><span class="line"><span class="comment">01-OC底层[25009:1007372] async_3</span></span><br><span class="line"><span class="comment">01-OC底层[25009:1007374] async_2</span></span><br><span class="line"><span class="comment">01-OC底层[25009:1007372] dispatch_barrier_async</span></span><br><span class="line"><span class="comment">01-OC底层[25009:1007372] async_4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="10、GCD实现暂停和继续注意什么？"><a href="#10、GCD实现暂停和继续注意什么？" class="headerlink" title="10、GCD实现暂停和继续注意什么？"></a>10、GCD实现暂停和继续注意什么？</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t conQueue = dispatch_queue_create(<span class="string">&quot;com.seria.queue&quot;</span>, <span class="type">DISPATCH_QUEUE_CONCURRENT</span>);</span><br><span class="line">    size_t <span class="built_in">count</span> = <span class="number">5</span>;</span><br><span class="line">    dispatch_apply(<span class="number">5</span>, conQueue, ^(size_t index) &#123;</span><br><span class="line">        <span class="type">NSLog</span>(@<span class="string">&quot;numer is %zu&quot;</span>,index);</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="comment">//            dispatch_suspend(concurrentQueue);// suspend并不能停止当前队列的任务，只能停止后面队列中的任务</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    dispatch_suspend(conQueue); <span class="comment">// dispatch_suspend 不能单独使用，和dispatch_resume配对使用</span></span><br><span class="line">    <span class="type">NSLog</span>(@<span class="string">&quot;task1---&quot;</span>);</span><br><span class="line"></span><br><span class="line">    dispatch_async(conQueue, ^&#123;</span><br><span class="line">        <span class="type">NSLog</span>(@<span class="string">&quot;async1&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">NSLog</span>(@<span class="string">&quot;task2---&quot;</span>);</span><br><span class="line">    dispatch_resume(conQueue);</span><br><span class="line"></span><br><span class="line">    dispatch_async(conQueue, ^&#123;</span><br><span class="line">        <span class="type">NSLog</span>(@<span class="string">&quot;async2&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">NSLog</span>(@<span class="string">&quot;task3---&quot;</span>);</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="11、案例分析"><a href="#11、案例分析" class="headerlink" title="11、案例分析"></a>11、案例分析</h2><h4 id="使用-Dispatch-Source定时器"><a href="#使用-Dispatch-Source定时器" class="headerlink" title="使用 Dispatch Source定时器"></a>使用 Dispatch Source定时器</h4><h4 id="Dispatch-Source-Timer"><a href="#Dispatch-Source-Timer" class="headerlink" title="Dispatch Source Timer"></a>Dispatch Source Timer</h4><p>利用 Dispatch Source 的 DISPATCH_SOURCE_TYPE_TIMER 类型，我们可以创建一个 跨线程的 定时器（我们平时使用的 NSTimer 是基于 Run Loop 的 timer 事件，只能在对应的线程里触发）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t queue &#x3D; dispatch_get_main_queue();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;1、创建一个 timer；</span><br><span class="line">self.timer &#x3D; dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, queue);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2、配置 timer，从现在起，每两秒在主线程触发一次，精度为0s</span><br><span class="line">dispatch_source_set_timer(self.timer, DISPATCH_TIME_NOW, 2 * NSEC_PER_SEC, 0 * NSEC_PER_SEC);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;3、timer 触发之后的回调 block</span><br><span class="line">dispatch_source_set_event_handler(self.timer, ^&#123;</span><br><span class="line">    </span><br><span class="line">    NSLog(@&quot;%ld&quot;, self.count++);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;4、启动 timer</span><br><span class="line">dispatch_resume(self.time); </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Runloop</title>
      <link href="2018/06/01/Runloop/"/>
      <url>2018/06/01/Runloop/</url>
      
        <content type="html"><![CDATA[<h1 id="Runloop"><a href="#Runloop" class="headerlink" title="Runloop"></a>Runloop</h1><h2 id="1-讲讲-RunLoop，项目中有用到吗？"><a href="#1-讲讲-RunLoop，项目中有用到吗？" class="headerlink" title="1.讲讲 RunLoop，项目中有用到吗？"></a>1.讲讲 RunLoop，项目中有用到吗？</h2><ul><li>事件循环，在程序运行中循环做一些事情</li><li>没有消息mach_msg()切换用户态到内核态线程休眠，有消息内核态切换到用户态</li></ul><h3 id="runloop相关："><a href="#runloop相关：" class="headerlink" title="runloop相关："></a>runloop相关：</h3><ul><li>Timer、performSelector</li><li>GCD、AutoreleasePool</li><li>事件响应、收拾识别、网络请求</li></ul><h3 id="runloop的应用："><a href="#runloop的应用：" class="headerlink" title="runloop的应用："></a>runloop的应用：</h3><ul><li>线程包活</li><li>解决timer滑动停止问题</li><li>监听主线程卡顿</li><li>性能优化</li></ul><h2 id="2-runloop的6种状态和runloop内部实现逻辑？"><a href="#2-runloop的6种状态和runloop内部实现逻辑？" class="headerlink" title="2.runloop的6种状态和runloop内部实现逻辑？"></a>2.runloop的6种状态和runloop内部实现逻辑？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* Run Loop Observer Activities *&#x2F;</span><br><span class="line">typedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) &#123;</span><br><span class="line">    kCFRunLoopEntry &#x3D; (1UL &lt;&lt; 0),           &#x2F;&#x2F; 即将进入Loop</span><br><span class="line">    kCFRunLoopBeforeTimers &#x3D; (1UL &lt;&lt; 1),    &#x2F;&#x2F;即将处理Timer</span><br><span class="line">    kCFRunLoopBeforeSources &#x3D; (1UL &lt;&lt; 2),   &#x2F;&#x2F;即将处理Source</span><br><span class="line">    kCFRunLoopBeforeWaiting &#x3D; (1UL &lt;&lt; 5),   &#x2F;&#x2F;即将进入休眠</span><br><span class="line">    kCFRunLoopAfterWaiting &#x3D; (1UL &lt;&lt; 6),    &#x2F;&#x2F;刚从休眠中唤醒</span><br><span class="line">    kCFRunLoopExit &#x3D; (1UL &lt;&lt; 7),            &#x2F;&#x2F;即将退出Loop</span><br><span class="line">    kCFRunLoopAllActivities &#x3D; 0x0FFFFFFFU</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>source0 : 触摸事件、performSelectorOnThread:</strong></li><li><strong>source1: 基于Port的线程间通讯，捕获到的系统事件</strong></li><li><strong>timers: NSTimer + performSelector:afterDelay:</strong></li><li><strong>observers: 监听runloop的状态/autoreleasePool的创建和释放、UI的刷新</strong></li></ul><p><img src="https://user-gold-cdn.xitu.io/2020/3/5/170a9f4968fe6f59?w=1012&h=858&f=png&s=146946" alt="img"></p><h2 id="3-runloop和线程的关系？"><a href="#3-runloop和线程的关系？" class="headerlink" title="3.runloop和线程的关系？"></a>3.runloop和线程的关系？</h2><ul><li>一一对应</li><li>保存在一个全局字典中，线程是key, runloop是value</li><li>子线程默认没有runloop，在第一次获取runloop时才会创建。</li><li>runloop在线程结束时销毁</li></ul><h2 id="4-timer-与-runloop-的关系？"><a href="#4-timer-与-runloop-的关系？" class="headerlink" title="4.timer 与 runloop 的关系？"></a>4.timer 与 runloop 的关系？</h2><h2 id="程序中添加每3秒响应一次的NSTimer，当拖动tableview时timer可能无法响应要怎么解决？"><a href="#程序中添加每3秒响应一次的NSTimer，当拖动tableview时timer可能无法响应要怎么解决？" class="headerlink" title="程序中添加每3秒响应一次的NSTimer，当拖动tableview时timer可能无法响应要怎么解决？"></a>程序中添加每3秒响应一次的NSTimer，当拖动tableview时timer可能无法响应要怎么解决？</h2><h2 id="5-runloop-是怎么响应用户操作的，-具体流程是什么样的？"><a href="#5-runloop-是怎么响应用户操作的，-具体流程是什么样的？" class="headerlink" title="5.runloop 是怎么响应用户操作的， 具体流程是什么样的？"></a>5.runloop 是怎么响应用户操作的， 具体流程是什么样的？</h2><h2 id="6-说说runLoop的几种状态"><a href="#6-说说runLoop的几种状态" class="headerlink" title="6.说说runLoop的几种状态"></a>6.说说runLoop的几种状态</h2><h2 id="7-runloop的mode作用是什么？"><a href="#7-runloop的mode作用是什么？" class="headerlink" title="7.runloop的mode作用是什么？"></a>7.runloop的mode作用是什么？</h2><ul><li><p>CFRunLoopModeRef代表<strong>RunLoop的运行模式</strong></p></li><li><p>一个RunLoop包含若干个Mode，每个Mode又包含若干个Source0/Source1/Timer/Observer</p></li><li><p>RunLoop启动时只能选择其中一个Mode，作为<strong>currentMode</strong></p></li><li><p>如果需要切换Mode，只能退出当前Loop，再重新选择一个Mode进入</p></li><li><p><strong>不同组的Source0/Source1/Timer/Observer能分隔开来，互不影响</strong></p></li><li><p><strong>如果Mode里没有任何Source0/Source1/Timer/Observer，RunLoop会立马退出</strong></p></li></ul><h2 id="8-KVO实现原理-哪些情况下使用kvo会崩溃，怎么防护崩溃"><a href="#8-KVO实现原理-哪些情况下使用kvo会崩溃，怎么防护崩溃" class="headerlink" title="8.KVO实现原理?哪些情况下使用kvo会崩溃，怎么防护崩溃?"></a>8.KVO实现原理?哪些情况下使用kvo会崩溃，怎么防护崩溃?</h2><h2 id="9-如何手动关闭KVO-如何手动自己实现KVO说说思路"><a href="#9-如何手动关闭KVO-如何手动自己实现KVO说说思路" class="headerlink" title="9.如何手动关闭KVO?如何手动自己实现KVO说说思路"></a>9.如何手动关闭KVO?如何手动自己实现KVO说说思路</h2><h2 id="10-通过KVC修改属性会触发KVO么"><a href="#10-通过KVC修改属性会触发KVO么" class="headerlink" title="10.通过KVC修改属性会触发KVO么"></a>10.通过KVC修改属性会触发KVO么</h2>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(一)Swift备忘录</title>
      <link href="2018/02/18/(%E4%B8%80)Swift%E5%A4%87%E5%BF%98%E5%BD%95/"/>
      <url>2018/02/18/(%E4%B8%80)Swift%E5%A4%87%E5%BF%98%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="SwiftTip"><a href="#SwiftTip" class="headerlink" title="SwiftTip"></a>SwiftTip</h1><a id="more"></a><ul><li><p><a href="https://developer.apple.com/swift/">苹果官方文档</a></p></li><li><p><a href="https://nshipster.com/">NSHipster - is a journal of the overlooked bits in Objective-C, Swift, and Cocoa.</a></p></li><li><p><a href="https://www.mikeash.com/pyblog/">NSBlog</a></p></li><li><p>Flip the image: 翻转图片</p></li><li><p>Retrive the paths: 检索，重新获得</p></li></ul><h2 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h2><ul><li><p><code>柯里化</code> 什么意思</p></li><li><p><code>POP</code> 与 <code>OOP</code>的区别</p></li><li><p><code>Any</code> 与<code>AnyObject</code> 区别</p></li><li><p><code>rethrows</code> 和 <code>throws</code> 有什么区别呢？</p></li><li><p><code>break</code> <code>return</code> <code>continue</code> <code>fallthough</code> 在语句中的含义（switch、while、for）</p></li><li><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><ul><li><code>public</code> <code>open</code> <code>final</code></li><li><code>static</code> <code>class</code></li><li><code>mutating</code>  <code>inout</code></li><li><code>infix operator</code></li><li><code>dynamicMemberLookup</code></li><li><code>where indirect和嵌套</code></li><li><code>@dynamicCallable</code></li><li><code>@autoclosure</code></li><li><code>@escaping</code></li></ul></li><li><p>为什么要用<code>inout</code>修饰函数的参数才能修改参数？</p><ul><li>什么时候使用<strong>convenience</strong>？</li></ul></li><li><h3 id="协议-Protocol"><a href="#协议-Protocol" class="headerlink" title="协议 Protocol"></a>协议 Protocol</h3><ul><li><code>ExpressibleByDictionaryLiteral</code></li><li><code>Sequence</code></li><li><code>Collection</code></li><li><code>CustomStringConvertible</code></li></ul></li><li><p><code>Hashable</code> <code>Codable</code></p><ul><li><code>Comparable</code></li><li><code>RangeReplaceableCollection</code></li></ul><blockquote><p>以上协议常见应用场景是什么，有什么作用？</p></blockquote></li></ul><h4 id="iOS初始化核心原则"><a href="#iOS初始化核心原则" class="headerlink" title="iOS初始化核心原则"></a>iOS初始化核心原则</h4><blockquote><p>iOS 的初始化最核心两条的规则：</p></blockquote><blockquote><p>• 必须至少有一个指定初始化器，在指定初始化器里保证所有非可选类型属性都得到正确的初始化（有值）</p></blockquote><blockquote><p>• 便利初始化器必须调用其他初始化器，使得最后肯定会调用指定初始化器</p></blockquote><p><strong>示例如下：</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">init</span>(frame: <span class="type">CGRect</span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(style: <span class="type">Style</span>) &#123;</span><br><span class="line">     <span class="keyword">self</span>.<span class="keyword">init</span>(frame: .zero)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>在Swift中千万不要用String的count方法计算文本长度,否则当文本中有emoji时，会计算出错。</strong></p><p><strong>应当转成NSString再去求length</strong></p></blockquote><h4 id="Swift访问控制权限"><a href="#Swift访问控制权限" class="headerlink" title="Swift访问控制权限"></a>Swift访问控制权限</h4><p>Swift的访问权限管理依赖于两个概念：module和文件。module是一个完整的代码单元，</p><p>它可以是一个或多个框架（Framework），或者是一个App Bundle，可以被import导入到工程中。</p><p>文件指的就是<code>Swift File</code>，它通常属于一个module。</p><p>Swift 为代码中的实体提供了5种不同的访问级别:open、public、<strong>internal</strong>、fileprivate、private。</p><p><strong>Open 为最高级访问级别，private 为最低级访问级别, internal是module中默认权限，private和fileprivate的区别如下：</strong></p><table><thead><tr><th align="left">访问级别</th><th align="left">定义</th></tr></thead><tbody><tr><td align="left">open</td><td align="left">这个属性允许在 app 内或 app 外重写和访问。在开发框架的时候，会应用到这个访问修饰符。</td></tr><tr><td align="left">public</td><td align="left">可以访问自己模块中源文件里的任何实体，别人也可以通过引入该模块来访问源文件里的所有实体。</td></tr><tr><td align="left">internal</td><td align="left"><strong>默认权限可以访问自己module中源文件里的任何实体</strong></td></tr><tr><td align="left"><strong>fileprivate</strong></td><td align="left"><strong>只能在当前源文件中使用。</strong></td></tr><tr><td align="left"><strong>private</strong></td><td align="left"><strong>只允许实体在定义的类以及相同源文件内的 extension 中访问</strong></td></tr></tbody></table><p><code>public 和 open 的区别在于:</code></p><ul><li><p>只有被 open 标记的内容才能在别的框架中被继承或者重写。</p></li><li><p>不希望他们继承或者重写的话，应该将其限定为 public</p></li></ul><p><code>private 和 fileprivate 的区别在于:</code></p><ul><li><p>private 让代码只能在当前作用域或者同一文件中同一类型的作用域中被使用</p></li><li><p>fileprivate 表示代码可以在当前文件中被访问，而不做类型限定。</p></li></ul><p><strong>1、如果希望<code>name</code>仅在当前文件中可访问，可以使用<code>private</code>修饰</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> name: <span class="type">String?</span>   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2 、但是在开发中所面临的更多的情况是我们希望在类型之外也能够读取到这个类型，同时为了保证类型的封装和安全，只能在类型内部对其进行改变和设置。</strong></p><p>下面这种写法没有对读取做限制，相当于使用了默认的 internal 权限。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>(<span class="keyword">set</span>) <span class="keyword">var</span> name: <span class="type">String?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、如果希望外部可以读取，但不可以修改。这也是为了保证类型的封装和安全，在内部提供可读可写，而外部仅仅可读</strong></p><ul><li>这种写法相当于把<code>setter</code>设置为<code>private</code>，而<code>getter</code>仍然是默认的<code>internal</code></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">private</span>(<span class="keyword">set</span>) <span class="keyword">var</span> name: <span class="type">String?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果既想要外部可读，又想仅内部可写，可以为<code>getter</code>加上<code>public</code>：</strong></p><h4 id="声明关键字"><a href="#声明关键字" class="headerlink" title="声明关键字"></a><a href="https://swift.gg/2019/08/22/Swift-Keywords/#more">声明关键字</a></h4><h5 id="associatedtype：在协议中，定义一个类型的占位符名称。直到协议被实现，该占位符才会被指定具体的类型。"><a href="#associatedtype：在协议中，定义一个类型的占位符名称。直到协议被实现，该占位符才会被指定具体的类型。" class="headerlink" title="associatedtype：在协议中，定义一个类型的占位符名称。直到协议被实现，该占位符才会被指定具体的类型。"></a><strong>associatedtype</strong>：在协议中，定义一个类型的占位符名称。直到协议被实现，该占位符才会被指定具体的类型。</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Entertainment</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">MediaType</span>  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> : <span class="title">Entertainment</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">MediaType</span> = <span class="type">String</span> <span class="comment">//可以指定任意类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="class：通用、灵活的结构体，是程序的基础组成部分。与-struct-类似，不同之处在于："><a href="#class：通用、灵活的结构体，是程序的基础组成部分。与-struct-类似，不同之处在于：" class="headerlink" title="class：通用、灵活的结构体，是程序的基础组成部分。与 struct 类似，不同之处在于："></a><strong>class</strong>：通用、灵活的结构体，是程序的基础组成部分。与 struct 类似，不同之处在于：</h5><ul><li>允许一个类继承另一个类的特性。</li><li>类型转换，允许在运行时检查和指定一个类的实际类型。</li><li>析构方法允许类的实例释放所有资源。</li><li>引用计数允许多个引用指向一个实例。</li></ul><h5 id="struct：通用、灵活的结构体，是程序的基础组成部分，并提供了默认初始化方法。与-class-不同，当-struct-在代码中被传递时，是被拷贝的，并不使用引用计数。除此之外，struct-没有下面的这些功能："><a href="#struct：通用、灵活的结构体，是程序的基础组成部分，并提供了默认初始化方法。与-class-不同，当-struct-在代码中被传递时，是被拷贝的，并不使用引用计数。除此之外，struct-没有下面的这些功能：" class="headerlink" title="struct：通用、灵活的结构体，是程序的基础组成部分，并提供了默认初始化方法。与 class 不同，当 struct 在代码中被传递时，是被拷贝的，并不使用引用计数。除此之外，struct 没有下面的这些功能："></a><strong>struct</strong>：通用、灵活的结构体，是程序的基础组成部分，并提供了默认初始化方法。与 class 不同，当 struct 在代码中被传递时，是被拷贝的，并不使用引用计数。除此之外，struct 没有下面的这些功能：</h5><ul><li>使用继承。</li><li>运行时的类型转换。</li><li>使用析构方法。</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> name:<span class="type">String</span>  </span><br><span class="line">    <span class="keyword">var</span> age:<span class="type">Int</span>  </span><br><span class="line">    <span class="keyword">var</span> gender:<span class="type">String</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="extension：允许给已有的类、结构体、枚举、协议类型，添加新功能。"><a href="#extension：允许给已有的类、结构体、枚举、协议类型，添加新功能。" class="headerlink" title="extension：允许给已有的类、结构体、枚举、协议类型，添加新功能。"></a><strong>extension</strong>：允许给已有的类、结构体、枚举、协议类型，添加新功能。</h5><h5 id="NSError：code、domin、userInfo"><a href="#NSError：code、domin、userInfo" class="headerlink" title="NSError：code、domin、userInfo"></a><strong>NSError</strong>：<a href="https://nshipster.cn/nserror/">code</a>、domin、userInfo</h5><p><a href="https://onevcat.com/2017/10/swift-error-category/">Swift Error分类</a></p><ul><li>domain error</li><li>Recoverable error</li><li>Universal error</li><li>Logic error</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Result</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Success</span>(<span class="type">T</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Failure</span>(<span class="type">NSError</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="try-表示强制执行，如果发生异常程序crash"><a href="#try-表示强制执行，如果发生异常程序crash" class="headerlink" title="try!表示强制执行，如果发生异常程序crash"></a><strong>try!表示强制执行，如果发生异常程序crash</strong></h5><h5 id="try-返回可选项，如果发生异常返回nil-不会crash"><a href="#try-返回可选项，如果发生异常返回nil-不会crash" class="headerlink" title="try?返回可选项，如果发生异常返回nil 不会crash"></a><strong>try?返回可选项，如果发生异常返回nil 不会crash</strong></h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">E</span>: <span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Negative</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">methodThrowsWhenPassingNegative</span><span class="params">(number: Int)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> number &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="type">E</span>.<span class="type">Negative</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> num = <span class="keyword">try</span>? methodThrowsWhenPassingNegative(<span class="number">100</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(num.<span class="keyword">dynamicType</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;failed&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Swift-5-1-初始化和反初始化"><a href="#Swift-5-1-初始化和反初始化" class="headerlink" title="Swift 5.1 初始化和反初始化"></a><a href="https://mp.weixin.qq.com/s/OJQhhXr1kpV4MamkFmu7-Q">Swift 5.1 初始化和反初始化</a></h4><h4 id="enum包含嵌套方法需要使用indirect"><a href="#enum包含嵌套方法需要使用indirect" class="headerlink" title="enum包含嵌套方法需要使用indirect"></a>enum包含嵌套方法需要使用indirect</h4><p>否则报错: <code>Recursive enum &quot;&quot; is not marked &#39;indirect&#39;</code></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1106678/1607329542218-9aef9c0d-8001-47a0-a91a-54b2d20fe0cf.png" alt="indirect和嵌套"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">indirect</span> <span class="class"><span class="keyword">enum</span> <span class="title">LinkedList</span>&lt;<span class="title">Element</span>: <span class="title">Comparable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> empty</span><br><span class="line">    <span class="keyword">case</span> node(<span class="type">Element</span>, <span class="type">LinkedList</span>&lt;<span class="type">Element</span>&gt;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="为什么要用inout修饰函数的参数才能修改参数？"><a href="#为什么要用inout修饰函数的参数才能修改参数？" class="headerlink" title="为什么要用inout修饰函数的参数才能修改参数？"></a>为什么要用<code>inout</code>修饰函数的参数才能修改参数？</h4><ul><li><p>这是因为函数的参数一般是值类型，比如Int类型就是值类型，当我们想要修改函数内部参数时，我们是不能直接修改默认let修饰的函数参数Int的，我们需要使用<code>&amp;</code>符号来修饰参数，这样<code>inout</code>在函数内部会创建一个新的值，然后在函数return的时候把值赋值给&amp;修改的变量，这和我们常见的class引用类型是不一样的做法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeIncrement</span><span class="params">(number: Int)</span></span> -&gt; ((<span class="keyword">inout</span> <span class="type">Int</span>) -&gt; ()) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">increamor</span><span class="params">(v: <span class="keyword">inout</span> Int)</span></span> -&gt; () &#123;</span><br><span class="line">        v += number</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> increamor(v:)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="什么时候使用-convenience"><a href="#什么时候使用-convenience" class="headerlink" title="什么时候使用*convenience?"></a>什么时候使用*<em>convenience</em>?</h4><h4 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h4><h5 id="毫秒"><a href="#毫秒" class="headerlink" title="毫秒"></a>毫秒</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mill = <span class="type">Int64</span>(round(<span class="type">Date</span>().timeIntervalSince1970 * <span class="number">1000</span>))</span><br><span class="line"><span class="keyword">let</span> mill = <span class="type">Int64</span>(<span class="type">Date</span>().timeIntervalSince1970 * <span class="number">1000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Swift-单例"><a href="#Swift-单例" class="headerlink" title="Swift 单例"></a>Swift 单例</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared = <span class="type">Manager</span>()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种写法不仅简洁，而且保证了单例的独一无二。</p><p><strong>在初始化类变量的时候，Apple 将会把这个初始化包装在一次 swift_once_block_invoke 中，以保证它的唯一性。</strong></p><p><strong>不仅如此，对于所有的全局变量，Apple 都会在底层使用这个类似 dispatch_once 的方式来确保只以 lazy 的方式初始化一次。</strong></p><p>另外，我们在这个类型中加入了一个私有的初始化方法，来覆盖默认的公开初始化方法，这让项目中的其他地方不能够通过 init 来生成自己的 MyManager 实例，也保证了类型单例的唯一性。</p><p>如果你需要的是类似 default 的形式的单例 (也就是说这个类的使用者可以创建自己的实例) 的话，可以去掉这个私有的 init 方法。</p><p>摘录来自: 王巍 (onevcat). “Swifter - Swift 必备 Tips (第四版)。” Apple Books. </p></blockquote><h4 id="Swift-闭包"><a href="#Swift-闭包" class="headerlink" title="Swift 闭包"></a>Swift 闭包</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///定义一个闭包</span></span><br><span class="line"><span class="keyword">var</span> itemClickCallback: ((<span class="type">AnalysisSpaceInfo</span>) -&gt; <span class="type">Void</span>)?</span><br><span class="line"><span class="keyword">var</span> rankViewScrollCallBack: (() -&gt; <span class="type">Void</span>)?</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 使用</span></span><br><span class="line">view.itemClickCallback = &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] item <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> <span class="keyword">self</span> = <span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="keyword">self</span>.loadSpaceDetail(id: item.id)</span><br><span class="line">&#125;</span><br><span class="line">view.rankViewScrollCallBack = &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> <span class="keyword">self</span> = <span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="keyword">self</span>.view.isHidden = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="逃逸闭包"><a href="#逃逸闭包" class="headerlink" title="逃逸闭包"></a>逃逸闭包</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">getInfo</span><span class="params">(successHandler: <span class="params">(<span class="params">(Bool)</span></span></span></span> -&gt; <span class="type">Void</span>)? = <span class="literal">nil</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">getInfo</span><span class="params">(successHandler:@escaping <span class="params">(<span class="params">(Bool)</span></span></span></span> -&gt; <span class="type">Void</span>)) &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Precondition预处理"><a href="#Precondition预处理" class="headerlink" title="Precondition预处理"></a>Precondition预处理</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">precondition</span><span class="params">(<span class="number">_</span> condition: @autoclosure <span class="params">()</span></span></span> -&gt; <span class="type">Bool</span>,</span><br><span class="line">                           <span class="number">_</span> message: <span class="meta">@autoclosure</span> () -&gt; <span class="type">String</span> = <span class="keyword">default</span>,</span><br><span class="line">                                file: <span class="type">StaticString</span> = #file,</span><br><span class="line">                                line: <span class="type">UInt</span> = #line)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">preconditionFailure</span><span class="params">(<span class="number">_</span> message: @autoclosure <span class="params">()</span></span></span> -&gt; <span class="type">String</span> = <span class="keyword">default</span>,</span><br><span class="line">                                     file: <span class="type">StaticString</span> = #file,</span><br><span class="line">                                     line: <span class="type">UInt</span> = #line) -&gt; <span class="type">Never</span></span><br></pre></td></tr></table></figure><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">precondition</span>(condition: <span class="type">Bool</span>, message: <span class="type">String</span>)</span><br></pre></td></tr></table></figure><ul><li><p>precondition 在一般的代码中并不多见，因为它是动态的，只会在程序运行时进行检查，适用于哪些无法在编译期确定的风险情况。</p></li><li><p>如果出现了诸如数据错误的情况，precondition 会提前终止程序，避免因数据错误造成更多的损失。</p><ul><li>如果条件判断为 true，代码运行会继续进行。</li><li>如果条件判断为 false，程序将终止。</li></ul></li><li><p>assert 是单纯地触发断言即停止程序，不会让你有机会将可能出错的设计走过它这一关。？？？</p></li></ul><p>例如：Swift 数组的下标操作可能造成越界，使用扩展的方式向其中增加一个方法来判断下标是否越界。</p><pre><code>extension Array &#123;    func isOutOfBounds(index: Int) &#123;    precondition((0..&lt;endIndex).contains(index), &quot;数组越界&quot;)    print(&quot;继续执行&quot;)    &#125;&#125;</code></pre><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不越界的情况</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].isOutOfBounds(index: <span class="number">2</span>)           <span class="comment">// 继续执行</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 越界的情况</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].isOutOfBounds(index: <span class="number">3</span>)           <span class="comment">// Thread 1: Precondition failed: 数组越界</span></span><br></pre></td></tr></table></figure><ul><li>在满足 precondition 条件的时候，程序会继续执行。</li><li>在不满足 precondition 条件的时候，程序被终止，并且将 precondition 中预设的错误信息打印到了控制台上，precondition 避免了一些无意义的操作。</li></ul><h4 id="precondition和assert的区别"><a href="#precondition和assert的区别" class="headerlink" title="precondition和assert的区别"></a>precondition和assert的<a href="https://stackoverflow.com/questions/29673027/difference-between-precondition-and-assert-in-swift">区别</a></h4><ul><li><a href="https://stackoverflow.com/questions/29673027/difference-between-precondition-and-assert-in-swift">https://stackoverflow.com/questions/29673027/difference-between-precondition-and-assert-in-swift</a></li></ul><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><h5 id="autoclosure作用：将表达式自动封装成一个闭包"><a href="#autoclosure作用：将表达式自动封装成一个闭包" class="headerlink" title="@autoclosure作用：将表达式自动封装成一个闭包"></a>@autoclosure作用：将表达式自动封装成一个闭包</h5><p>()-&gt;Void</p><p>1.2 ??的底层实现是用的enum</p><p>1.3 “闭包和循环引用”</p><p><strong>weak解决循环引用的正确写法：</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> name: ()-&gt;() = &#123;</span><br><span class="line"></span><br><span class="line">[<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> strongSelf = <span class="keyword">self</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The name is (strongSelf.name)&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="值类型和引用类型的选择"><a href="#值类型和引用类型的选择" class="headerlink" title="值类型和引用类型的选择"></a>值类型和引用类型的选择</h4><ul><li><p>数组和字典设计为值类型最大的考虑是为了线程安全.</p></li><li><p>另一个优点，那就是非常高效，因为 “一旦赋值就不太会变化” 这种使用情景在 Cocoa 框架中是占有绝大多数的，这有效减少了内存的分配和回收。</p></li></ul><p>但是在少数情况下，我们显然也可能会在数组或者字典中存储非常多的东西，并且还要对其中的内容进行添加或者删除。”</p><ul><li><p>在需要处理大量数据并且频繁操作 (增减) 其中元素时，选择 NSMutableArray 和 NSMutableDictionary 会更好，</p></li><li><p>对于容器内条目小而容器本身数目多的情况，应该使用 Swift 语言内建的 Array 和 Dictionary</p></li></ul><h4 id="escaping的作用？"><a href="#escaping的作用？" class="headerlink" title="@escaping的作用？"></a>@escaping的作用？</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">animate</span>(<span class="title">withDuration</span> <span class="title">duration</span>: <span class="title">TimeInterval</span>, <span class="title">animations</span>: @<span class="title">escaping</span> () -&amp;<span class="title">gt</span>; <span class="title">Void</span>, <span class="title">completion</span>: ((<span class="title">Bool</span>) -&gt; <span class="title">Void</span>)? = <span class="title">nil</span>)</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><img src="/Users/mac/Downloads/图像 2019-12-5，下午6.41.jpg" alt="图像 2019-12-5，下午6.41" style="zoom:50%;" /><h4 id="defer的使用注意点"><a href="#defer的使用注意点" class="headerlink" title="defer的使用注意点"></a>defer的使用注意点</h4><p><strong>defer的作用域</strong></p><p><strong>以前很单纯地认为 defer 是在函数退出的时候调用，并没有注意其实是当前 scope 退出的时候调用这个事实，造成了这个错误。在 if，guard，for，try 这些语句中使用 defer 时，应该要特别注意这一点。</strong></p><img src="/Users/mac/Downloads/图像 2019-12-5，下午6.41-1.jpg" alt="图像 2019-12-5，下午6.41-1" style="zoom:150%;" /><h4 id="discardableResult"><a href="#discardableResult" class="headerlink" title="@discardableResult"></a>@discardableResult</h4><h4 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result<T></h4><p><a href="https://onevcat.com/2018/10/swift-result-error/">Result&lt;T, E: Error&gt; 和 Result<T></a></p><h4 id="Lazy的使用"><a href="#Lazy的使用" class="headerlink" title="Lazy的使用"></a>Lazy的使用</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = <span class="number">1</span>...<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = data.<span class="built_in">lazy</span>.<span class="built_in">map</span> &#123; (i: <span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;准备处理(i)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> i * <span class="number">2</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;准备访问结果&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;处理后的结果:(i)&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;done&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打印结果：</p><blockquote><p>准备访问结果</p></blockquote><p>准备处理1</p><p>处理后的结果:2</p><p>准备处理2</p><p>处理后的结果:4</p><p>准备处理3</p><p>处理后的结果:6</p><p>done</p><h4 id="Swift反射机制Mirror"><a href="#Swift反射机制Mirror" class="headerlink" title="Swift反射机制Mirror"></a>Swift反射机制Mirror</h4><blockquote><p>“通过 Mirror 初始化得到的结果中包含的元素的描述都被集合在 children 属性下，如果你有心可以到 Swift 标准库中查找它的定义，它实际上是一个 Child 的集合，而 Child 则是一对键值的多元组：</p></blockquote><h5 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> logo: <span class="type">String</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wheel: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> door: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> baoM = <span class="type">Car</span>(logo: <span class="string">&quot;BMW&quot;</span>, wheel: <span class="number">4</span>, door: <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mirror = <span class="type">Mirror</span>(reflecting: baoM)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;类型:(String(describing: mirror.displayStyle))&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">///1、通过Mirror的children获取属性信息</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;属性个数:(mirror.children.count)&quot;</span>)</span><br><span class="line"></span><br><span class="line">mirror.children.<span class="built_in">map</span> &#123; (child) -&gt; <span class="type">Any</span> <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;label: (String(describing: child.label)), value: (child.value)&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///2、通过Refletion的dump(Any)方法获取属性信息</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dump</span>(baoM)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="示例2-获取property"><a href="#示例2-获取property" class="headerlink" title="示例2 获取property"></a>示例2 获取property</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> homeProperty = <span class="type">Mirror</span>(reflecting: <span class="keyword">self</span>)</span><br><span class="line"></span><br><span class="line">homeProperty.children.<span class="built_in">map</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">LOG</span>.<span class="type">D</span>(<span class="string">&quot;home property:($0)&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="propertyWrapper定义与使用"><a href="#propertyWrapper定义与使用" class="headerlink" title="@propertyWrapper定义与使用"></a>@propertyWrapper定义与使用</h4><h5 id="propertyWrapper定义"><a href="#propertyWrapper定义" class="headerlink" title="@propertyWrapper定义"></a><a href="https://nshipster.com/propertywrapper/#constraining-values">@propertyWrapper定义</a></h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@propertyWrapper</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Clamping</span>&lt;<span class="title">Value</span>: <span class="title">Comparable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value: <span class="type">Value</span></span><br><span class="line">    <span class="keyword">let</span> range: <span class="type">ClosedRange</span>&lt;<span class="type">Value</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(initialValue value: <span class="type">Value</span>, <span class="number">_</span> range: <span class="type">ClosedRange</span>&lt;<span class="type">Value</span>&gt;) &#123;</span><br><span class="line">        <span class="built_in">precondition</span>(range.<span class="built_in">contains</span>(value))</span><br><span class="line">        <span class="keyword">self</span>.value = value</span><br><span class="line">        <span class="keyword">self</span>.range = range</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> wrappedValue: <span class="type">Value</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; value &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; value = <span class="built_in">min</span>(<span class="built_in">max</span>(range.lowerBound, newValue), range.upperBound) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    @<span class="type">Clamping</span>(<span class="number">0</span>...<span class="number">14</span>) <span class="keyword">var</span> pH: <span class="type">Double</span> = <span class="number">7.0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> carbonicAcid = <span class="type">Solution</span>(pH: <span class="number">4.68</span>) <span class="comment">// at 1 mM under standard conditions</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="propertyWrapper属性包裹器-SwiftLee"><a href="#propertyWrapper属性包裹器-SwiftLee" class="headerlink" title="@propertyWrapper属性包裹器  | SwiftLee"></a><a href="https://juejin.im/post/5d2b420b6fb9a07ea803f994">@propertyWrapper属性包裹器 </a> | <a href="https://www.avanderlee.com/swift/property-wrappers/">SwiftLee</a></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@propertyWrapper</span> <span class="comment">/// 先告诉编译器 下面这个UserDefault是一个属性包裹器</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UserDefault</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">///这里的属性key 和 defaultValue 还有init方法都是实际业务中的业务代码</span></span><br><span class="line">    <span class="comment">///我们不需要过多关注</span></span><br><span class="line">    <span class="keyword">let</span> key: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> defaultValue: <span class="type">T</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> key: <span class="type">String</span>, defaultValue: <span class="type">T</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.key = key</span><br><span class="line">        <span class="keyword">self</span>.defaultValue = defaultValue</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">///  wrappedValue是@propertyWrapper必须要实现的属性</span></span><br><span class="line">    <span class="comment">/// 当操作我们要包裹的属性时  其具体set get方法实际上走的都是wrappedValue 的set get 方法。</span></span><br><span class="line">    <span class="keyword">var</span> wrappedValue: <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">UserDefaults</span>.standard.object(forKey: key) <span class="keyword">as</span>? <span class="type">T</span> ?? defaultValue</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="type">UserDefaults</span>.standard.<span class="keyword">set</span>(newValue, forKey: key)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UserDefaultsConfig</span> </span>&#123;</span><br><span class="line">    @<span class="type">UserDefault</span>(<span class="string">&quot;has_seen_app_introduction&quot;</span>, defaultValue: <span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> hasSeenAppIntroduction: <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line">    @<span class="type">UserDefault</span>(<span class="string">&quot;username&quot;</span>, defaultValue: <span class="string">&quot;Antoine van der Lee&quot;</span>)</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> username: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    @<span class="type">UserDefault</span>(<span class="string">&quot;year_of_birth&quot;</span>, defaultValue: <span class="number">1990</span>)</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> yearOfBirth: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///具体的业务代码。</span></span><br><span class="line"><span class="type">UserDefaultsConfig</span>.hasSeenAppIntroduction = <span class="literal">false</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">UserDefaultsConfig</span>.hasSeenAppIntroduction) <span class="comment">// Prints: false</span></span><br><span class="line"><span class="type">UserDefaultsConfig</span>.hasSeenAppIntroduction = <span class="literal">true</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">UserDefaultsConfig</span>.hasSeenAppIntroduction) <span class="comment">// Prints: true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Other-usage-examples"><a href="#Other-usage-examples" class="headerlink" title="Other usage examples"></a>Other usage examples</h5><p>Property wrappers are used throughout the default Swift APIs as well. The new @State and @Binding keys are an example of this. Another idea could be to create a wrapper for thread-specific writing and reading:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">ThreadSpecific</span> <span class="keyword">var</span> localPool: <span class="type">MemoryPool</span></span><br></pre></td></tr></table></figure><p>Or, as some might find handy, a way to define command line actions:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">Option</span>(shorthand: <span class="string">&quot;m&quot;</span>, documentation: <span class="string">&quot;Minimum value&quot;</span>, defaultValue: <span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> minimum: <span class="type">Int</span></span><br></pre></td></tr></table></figure><h5 id="Related-Ideas"><a href="#Related-Ideas" class="headerlink" title="Related Ideas"></a>Related Ideas</h5><ul><li>A <code>@Positive</code> / <code>@NonNegative</code> property wrapper that provides the unsigned guarantees to signed integer types.</li><li>A <code>@NonZero</code> property wrapper that ensures that a number value is either greater than or less than <code>0</code>.</li><li><code>@Validated</code> or <code>@Whitelisted</code> / <code>@Blacklisted</code> property wrappers that restrict which values can be assigned.</li></ul><h4 id="FirstVC-via-UIView"><a href="#FirstVC-via-UIView" class="headerlink" title="FirstVC via UIView"></a>FirstVC via UIView</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// Get current view controller based current view.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">firstViewController</span><span class="params">()</span></span> -&gt; <span class="type">UIViewController?</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> view <span class="keyword">in</span> sequence(first: <span class="keyword">self</span>.superview, next: &#123; $<span class="number">0</span>?.superview &#125;) &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> responder = view?.next &#123;</span><br><span class="line">                <span class="keyword">if</span> responder.isKind(of: <span class="type">UIViewController</span>.<span class="keyword">self</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> responder <span class="keyword">as</span>? <span class="type">UIViewController</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">firstResponder</span><span class="params">()</span></span> -&gt; <span class="type">UIView?</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> views = [<span class="type">UIView</span>](arrayLiteral: <span class="keyword">self</span>)</span><br><span class="line">        <span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">repeat</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> view = views[index]</span><br><span class="line">            <span class="keyword">if</span> view.isFirstResponder &#123;</span><br><span class="line">                <span class="keyword">return</span> view</span><br><span class="line">            &#125;</span><br><span class="line">            views.append(contentsOf: view.subviews)</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">while</span> index &lt; views.<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="TopVC-via-UIWindow"><a href="#TopVC-via-UIWindow" class="headerlink" title="TopVC via UIWindow"></a>TopVC via UIWindow</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> controller = <span class="type">UIWindow</span>.topViewController() &#123;</span><br><span class="line">    controller.present(alert, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIWindow</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// Returns the top most controller</span></span><br><span class="line">    <span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">topViewController</span>() -&gt; <span class="title">UIViewController</span>? </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> window = <span class="type">UIApplication</span>.shared.delegate?.window</span><br><span class="line">        <span class="keyword">let</span> rootViewController = window??.rootViewController</span><br><span class="line">        <span class="keyword">return</span> topMost(of: rootViewController)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// Returns the top most view controller from given view controller&#x27;s stack.</span></span><br><span class="line">    <span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">topMost</span>(<span class="title">of</span> <span class="title">viewController</span>: <span class="title">UIViewController</span>?) -&gt; <span class="title">UIViewController</span>? </span>&#123;</span><br><span class="line">        <span class="comment">// presented view controller</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> presentedViewController = viewController?.presentedViewController &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">self</span>.topMost(of: presentedViewController)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// UITabBarController</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> tabBarController = viewController <span class="keyword">as</span>? <span class="type">UITabBarController</span>,</span><br><span class="line">            <span class="keyword">let</span> selectedViewController = tabBarController.selectedViewController &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">self</span>.topMost(of: selectedViewController)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// UINavigationController</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> navigationController = viewController <span class="keyword">as</span>? <span class="type">UINavigationController</span>,</span><br><span class="line">            <span class="keyword">let</span> visibleViewController = navigationController.visibleViewController &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">self</span>.topMost(of: visibleViewController)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// UIPageController</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> pageViewController = viewController <span class="keyword">as</span>? <span class="type">UIPageViewController</span>,</span><br><span class="line">            pageViewController.viewControllers?.<span class="built_in">count</span> == <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">self</span>.topMost(of: pageViewController.viewControllers?.first)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// child view controller</span></span><br><span class="line">        <span class="keyword">for</span> subview <span class="keyword">in</span> viewController?.view?.subviews ?? [] &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> childViewController = subview.next <span class="keyword">as</span>? <span class="type">UIViewController</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">self</span>.topMost(of: childViewController)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> viewController</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="DispatchGroup分组管理异步任务"><a href="#DispatchGroup分组管理异步任务" class="headerlink" title="DispatchGroup分组管理异步任务"></a>DispatchGroup分组管理异步任务</h4><ul><li><strong>enter和leave必须配对出现，如下：</strong></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> group = <span class="type">DispatchGroup</span>()</span><br><span class="line">group.enter()<span class="comment">//把该任务添加到组队列中执行</span></span><br><span class="line">myQueue?.async(group: group, qos: .<span class="keyword">default</span>, flags: [], execute: &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>...<span class="number">10</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;耗时任务一&quot;</span>)</span><br><span class="line">        group.leave()<span class="comment">//执行完之后从组队列中移除</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">group.enter()<span class="comment">//把该任务添加到组队列中执行</span></span><br><span class="line">myQueue?.async(group: group, qos: .<span class="keyword">default</span>, flags: [], execute: &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>...<span class="number">10</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;耗时任务二&quot;</span>)</span><br><span class="line">        group.leave()<span class="comment">//执行完之后从组队列中移除</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//当上面所有的任务执行完之后通知</span></span><br><span class="line">group.notify(queue: .main) &#123; </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;所有的任务执行完了&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Swift4-2中的self"><a href="#Swift4-2中的self" class="headerlink" title="Swift4.2中的self"></a><a href="https://juejin.im/post/5ba8cbeae51d450e877f5a4d">Swift4.2中的self</a></h4><ul><li>在 4.2 之前，<code>self</code> 是全局保留关键字，所以如果在逃逸闭包中如果在闭包中把 self 标记为 weak 后，如果要使用需要使用 ` 包起来：</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> `<span class="keyword">self</span>` = <span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br></pre></td></tr></table></figure><ul><li>Swift4.2之后</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">doSomething(then: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> <span class="keyword">self</span> = <span class="keyword">self</span> &#123; <span class="keyword">else</span> <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="keyword">self</span>.doSomethingElse()</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>当然取消了这个限制后也意味着 self 可能不一定是 self 了：</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number: <span class="type">Int?</span> = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">self</span> = number &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="keyword">self</span>) <span class="comment">// 这里的 self 是 number：Int</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="给Struct-添加属性"><a href="#给Struct-添加属性" class="headerlink" title="给Struct 添加属性"></a>给Struct 添加属性</h4><h5 id="储存属性"><a href="#储存属性" class="headerlink" title="储存属性"></a>储存属性</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///public struct URLRequest : ReferenceConvertible, Equatable, Hashable &#123;&#125;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> <span class="type">KeyIdentifer</span>: <span class="type">Void?</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">URLRequest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">internal</span>(<span class="keyword">set</span>) <span class="keyword">var</span> key: <span class="type">String?</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, &amp;<span class="type">KeyIdentifer</span>) <span class="keyword">as</span>? <span class="type">String</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            objc_setAssociatedObject(<span class="keyword">self</span>, &amp;<span class="type">KeyIdentifer</span>, newValue, .<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Bool属性"><a href="#Bool属性" class="headerlink" title="Bool属性"></a>Bool属性</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///public struct URLRequest : ReferenceConvertible, Equatable, Hashable &#123;&#125;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> <span class="type">KeyIdentifer</span>: <span class="type">Void?</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">xxx</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">internal</span>(<span class="keyword">set</span>) <span class="keyword">var</span> isSuccess: <span class="type">Bool?</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, &amp;<span class="type">KeyIdentifer</span>) <span class="keyword">as</span>? <span class="type">Bool</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            objc_setAssociatedObject(<span class="keyword">self</span>, &amp;<span class="type">KeyIdentifer</span>, newValue, .<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="typealias使用"><a href="#typealias使用" class="headerlink" title=" typealias使用"></a><a href="https://swift.gg/2020/04/11/2019-05-15-the-usefulness-of-typealiases/#more"> <code>typealias使用</code></a></h4><p><strong>顾名思义，<code>typealias</code> 是特定类型的别名。</strong>类型，例如 <code>Int</code>、<code>Double</code>、<code>UIViewController</code> 或一种自定义类型。<code>Int32</code> 和 <code>Int8</code> 是不同的类型。换句话说，<strong>类型别名在你的代码库里插入现有类型的另一个名称。</strong>例如：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">Money</span> = <span class="type">Int</span></span><br></pre></td></tr></table></figure><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Bank</span> </span>&#123;</span><br><span class="line">  <span class="keyword">typealias</span> <span class="type">DepositMoney</span> = <span class="type">Int</span></span><br><span class="line">  <span class="keyword">typealias</span> <span class="type">WithdrawMoney</span> = <span class="type">Int</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> credit: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">  <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">deposit</span><span class="params">(amount: DepositMoney)</span></span> &#123;</span><br><span class="line">    credit += amount</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">withdraw</span><span class="params">(amount: WithdrawMoney)</span></span> &#123;</span><br><span class="line">    credit -= amount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="提高可读性"><a href="#提高可读性" class="headerlink" title="提高可读性"></a>提高可读性</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Dispatcher</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> successHandler: ((<span class="type">Int</span>) -&gt; <span class="type">Void</span>)?</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> errorHandler: ((<span class="type">Error</span>) -&gt; <span class="type">Void</span>)?</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(success: <span class="params">(<span class="params">(Int)</span></span></span></span> -&gt; <span class="type">Void</span>)?, error: ((<span class="type">Error</span>) -&gt; <span class="type">Void</span>)?) &#123;</span><br><span class="line">    <span class="keyword">self</span>.successHandler = success</span><br><span class="line">    <span class="keyword">self</span>.errorHandler = error</span><br><span class="line">    internalHandle()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(success: <span class="params">(<span class="params">(Int)</span></span></span></span> -&gt; <span class="type">Void</span>)?) &#123;</span><br><span class="line">   <span class="keyword">self</span>.successHandler = success</span><br><span class="line">    internalHandle()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(error: <span class="params">(<span class="params">(Int)</span></span></span></span>-&gt; <span class="type">Void?</span>)) &#123;</span><br><span class="line">    <span class="keyword">self</span>.errorHandler = error</span><br><span class="line">    internalHandle()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">internalHandle</span><span class="params">()</span></span> &#123;</span><br><span class="line">   ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该结构体引入了两个闭包，一个用于成功情况，一个用于错误情况。但是，我们还希望提供更方便的函数，调用其中一个处理器即可。在上面的示例中，如果要向成功和错误处理器添加另一个参数（例如 <code>HTTPResponse</code>），那么需要更改很多代码。在三个地方，<code>((Int) -&gt; Void)?</code> 需要变成 <code>((Int, HTTPResponse) -&gt; Void)?</code>。错误处理器也是一样的。通过使用多个类型别名，可以避免这种情况，只需要在一个地方修改类型：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Dispatcher</span> </span>&#123;</span><br><span class="line">  <span class="keyword">typealias</span> <span class="type">Success</span> = (<span class="type">Int</span>, <span class="type">HTTPResponse</span>) -&gt; <span class="type">Void</span></span><br><span class="line">  <span class="keyword">typealias</span> <span class="type">Failure</span> = (<span class="type">Error</span>, <span class="type">HTTPResponse</span>) -&gt; <span class="type">Void</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> successHandler: <span class="type">Success?</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> errorHandler: <span class="type">Failure?</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(success: Success?, error: Failure?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.successHandler = success</span><br><span class="line">    <span class="keyword">self</span>.errorHandler = error</span><br><span class="line">    internalHandle()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(success: Success?)</span></span> &#123;</span><br><span class="line">   <span class="keyword">self</span>.successHandler = success</span><br><span class="line">    internalHandle()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(error: Failure?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.errorHandler = error</span><br><span class="line">    internalHandle()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">internalHandle</span><span class="params">()</span></span> &#123;</span><br><span class="line">   ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="组合协议"><a href="#组合协议" class="headerlink" title="组合协议"></a>组合协议</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">CanRead</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">CanWrite</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">CanAuthorize</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">CanCreateUser</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">Administrator</span> = <span class="type">CanRead</span> &amp; <span class="type">CanWrite</span> &amp; <span class="type">CanAuthorize</span> &amp; <span class="type">CanCreateUser</span></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">User</span> = <span class="type">CanRead</span> &amp; <span class="type">CanWrite</span></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">Consumer</span> = <span class="type">CanRead</span></span><br></pre></td></tr></table></figure><p>在这里，我们定义了权限层。<strong>管理员可以做所有事情，用户可以读写，而消费者只能读。</strong></p><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">first</span><span class="params">(action: <span class="params">(Int, Error?)</span></span></span> -&gt; <span class="type">Void</span>) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">second</span><span class="params">(action: Success)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>第二个不是立即就能明白的。**<code>Success</code> 是什么类型？如何构造它？你必须在 Xcode 中按住 Option 单击它，以了解它的功能和工作方式。这会带来额外的工作量。如果使用了许多类型别名，则将花费更多的时间。**这没有很好的解决方案，（通常）只能依赖于用例。</p><h5 id="callback"><a href="#callback" class="headerlink" title="callback"></a>callback</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> select1Callback: ((<span class="type">String</span>) -&gt; <span class="type">Void</span>)?</span><br><span class="line"><span class="keyword">var</span> select2Callback: ((<span class="type">IndexPath</span>, <span class="type">Model</span>) -&gt; <span class="type">Void</span>)?</span><br></pre></td></tr></table></figure><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><h4 id="处理cell复用"><a href="#处理cell复用" class="headerlink" title="处理cell复用"></a>处理cell复用</h4><h5 id="1、prepareForReuse重置"><a href="#1、prepareForReuse重置" class="headerlink" title="1、prepareForReuse重置"></a>1、prepareForReuse重置</h5><blockquote><p>Apple: If a <code>UITableViewCell</code> object is reusable—that is, it has a reuse identifier—this method is invoked just before the object is returned from the <code>UITableView</code> method <a href="https://developer.apple.com/documentation/uikit/uitableview/1614891-dequeuereusablecell"><code>dequeueReusableCell(withIdentifier:)</code></a>. </p><p>For performance reasons, <strong>you should only reset attributes of the cell that are not related to content, for example, alpha, editing, and selection state.</strong> The table view’s delegate in <a href="https://developer.apple.com/documentation/uikit/uitableviewdatasource/1614861-tableview"><code>tableView(_:cellForRowAt:)</code></a> should <em>always</em> reset all content when reusing a cell. If the cell object does not have an associated reuse identifier, this method is not called. If you override this method, you must be sure to invoke the superclass implementation.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">prepareForReuse</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Clean up</span></span><br><span class="line">    <span class="keyword">if</span> [<span class="keyword">self</span>.subviews containsObject: <span class="keyword">self</span>.someNotoriousView] &#123;</span><br><span class="line">        [<span class="keyword">self</span>.contentView removeFromSuperview];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h4><h4 id="Swift不安全的指针"><a href="#Swift不安全的指针" class="headerlink" title="Swift不安全的指针"></a>Swift不安全的指针</h4><h5 id="UnsafePointer"><a href="#UnsafePointer" class="headerlink" title="UnsafePointer"></a>UnsafePointer</h5><h5 id="UnsafeMutablePointer"><a href="#UnsafeMutablePointer" class="headerlink" title="UnsafeMutablePointer"></a>UnsafeMutablePointer</h5><h5 id="UnsafeRawPointer"><a href="#UnsafeRawPointer" class="headerlink" title="UnsafeRawPointer"></a>UnsafeRawPointer</h5><h5 id="UnsafeMutableRawPointer"><a href="#UnsafeMutableRawPointer" class="headerlink" title="UnsafeMutableRawPointer"></a>UnsafeMutableRawPointer</h5>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift专题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序问题</title>
      <link href="2018/01/01/%E6%8E%92%E5%BA%8F%E9%97%AE%E9%A2%98/"/>
      <url>2018/01/01/%E6%8E%92%E5%BA%8F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>带着问题去学习，是最有效的学习方法。所以按照惯例，我还是先给你出一个思考题：</p><h3 id="问题一：为什么插入排序比冒泡排序更受欢迎？"><a href="#问题一：为什么插入排序比冒泡排序更受欢迎？" class="headerlink" title="问题一：为什么插入排序比冒泡排序更受欢迎？"></a>问题一：为什么插入排序比冒泡排序更受欢迎？</h3><h4 id="如何分析一个“排序算法”？"><a href="#如何分析一个“排序算法”？" class="headerlink" title="如何分析一个“排序算法”？"></a>如何分析一个“排序算法”？</h4><hr><ul><li><p>最好情况、最坏情况、平均情况时间复杂度</p></li><li><p>时间复杂度的系数、常数、低阶</p></li><li><p>比较次数和交换次数</p></li></ul><h4 id="内存消耗"><a href="#内存消耗" class="headerlink" title="内存消耗"></a>内存消耗</h4><hr><p>原地排序算法，就是特指空间复杂度是 O(1) 的排序算法。(冒泡排序、插入排序)</p><h4 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h4><ul><li>经过某种排序算法排序之后，如果两个相同数值的前后顺序没有改变，那我们就把这种排序算法叫作<strong>稳定的排序算法</strong>；</li><li>如果前后顺序发生变化，那对应的排序算法就叫作不稳定的<strong>排序算法</strong>。</li></ul><h2 id="1、冒泡排序"><a href="#1、冒泡排序" class="headerlink" title="1、冒泡排序"></a>1、冒泡排序</h2><ul><li>冒泡排序只会操作相邻元素的两个数据</li><li>每次都是对相邻的两个元素比较大小，前面的元素大于后面的元素，交换前后元素，一轮循环后最后元素就是最大元素</li><li>第二轮循环后，倒数第二个元素就是第二大元素</li><li>直到所有元素都是有序的停止排序</li></ul><p><strong>冒泡排序图示：</strong><br><img src="https://static001.geekbang.org/resource/image/92/09/9246f12cca22e5d872cbfce302ef4d09.jpg"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bubbleSort</span>&lt;T&gt;<span class="params">(<span class="number">_</span> array: [T])</span></span> -&gt; [<span class="type">T</span>] <span class="keyword">where</span> <span class="type">T</span>: <span class="type">Comparable</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> array = array</span><br><span class="line">    <span class="keyword">guard</span> array.<span class="built_in">count</span> &gt; <span class="number">1</span> <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> array</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;array.<span class="built_in">count</span> &#123;</span><br><span class="line">        <span class="comment">//提前退出标志</span></span><br><span class="line">        <span class="keyword">var</span> flag: <span class="type">Bool</span> = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;array.<span class="built_in">count</span> - i - <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> array[j] &gt; array[j + <span class="number">1</span>] &#123;</span><br><span class="line">                array.swapAt(j + <span class="number">1</span>, j)</span><br><span class="line">                <span class="comment">//有数据交换</span></span><br><span class="line">                flag = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有数据交换-提前退出</span></span><br><span class="line">        <span class="keyword">if</span> flag == <span class="literal">false</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，结合刚才我分析排序算法的三个方面，我有三个问题要问你。</p><h4 id="第一，冒泡排序是原地排序算法吗？"><a href="#第一，冒泡排序是原地排序算法吗？" class="headerlink" title="第一，冒泡排序是原地排序算法吗？"></a>第一，冒泡排序是原地排序算法吗？</h4><p><strong>冒泡的过程只涉及相邻数据的交换操作，只需要常量级的临时空间，所以它的空间复杂度为 O(1)，是一个原地排序算法。</strong></p><h4 id="第二，冒泡排序是稳定的排序算法吗？"><a href="#第二，冒泡排序是稳定的排序算法吗？" class="headerlink" title="第二，冒泡排序是稳定的排序算法吗？"></a>第二，冒泡排序是稳定的排序算法吗？</h4><p><strong>在冒泡排序中，只有交换才可以改变两个元素的前后顺序。为了保证冒泡排序算法的稳定性，当有相邻的两个元素大小相等的时候，我们不做交换，相同大小的数据在排序前后不会改变顺序，所以冒泡排序是稳定的排序算法。</strong></p><h4 id="第三，冒泡排序的时间复杂度是多少？"><a href="#第三，冒泡排序的时间复杂度是多少？" class="headerlink" title="第三，冒泡排序的时间复杂度是多少？"></a>第三，冒泡排序的时间复杂度是多少？</h4><p><strong>最好情况下，要排序的数据已经是有序的了，我们只需要进行一次冒泡操作，就可以结束了，所以最好情况时间复杂度是 O(n)。而最坏的情况是，要排序的数据刚好是倒序排列的，我们需要进行 n 次冒泡操作，所以最坏情况时间复杂度为 O(n2)。平均时间复杂度也是O(n2)</strong></p><h2 id="2、插入排序"><a href="#2、插入排序" class="headerlink" title="2、插入排序"></a>2、插入排序</h2><ul><li>插入排序是将数组分成两个部分，已排序和未排序</li><li>初始化已排序部分只有一个元素就是数组第一个元素</li><li>插入排序的核心思想就是<strong>取出未排序部分的元素</strong>，在已排序区间中找到<strong>合适的插入位置插入，保证已排序区间的数据一直是有序的。</strong></li></ul><h4 id="插入排序如下图："><a href="#插入排序如下图：" class="headerlink" title="插入排序如下图："></a>插入排序如下图：</h4><p><img src="https://static001.geekbang.org/resource/image/b6/e1/b60f61ec487358ac037bf2b6974d2de1.jpg"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertSort</span>&lt;T&gt;<span class="params">(<span class="number">_</span> elements: [T])</span></span> -&gt; [<span class="type">T</span>] <span class="keyword">where</span> <span class="type">T</span>: <span class="type">Comparable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> array = elements</span><br><span class="line">    <span class="keyword">guard</span> array.<span class="built_in">count</span> &gt; <span class="number">1</span> <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> array</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..&lt;array.<span class="built_in">count</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> value = array[i]</span><br><span class="line">        <span class="keyword">var</span> j = i - <span class="number">1</span></span><br><span class="line">        <span class="comment">//查找要插入的位置</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> (<span class="number">0</span>...j).reversed() &#123;</span><br><span class="line">            <span class="keyword">if</span> array[p] &gt; value &#123;</span><br><span class="line">                array[p+<span class="number">1</span>] = array[p]<span class="comment">//移动数据</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        array[j+<span class="number">1</span>] = value<span class="comment">// 插入数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>插入排序也包含两种操作，一种是<strong>元素的比较</strong>，一种是<strong>元素的移动</strong>。当我们需要将一个数据 a 插入到已排序区间时，需要拿 a 与已排序区间的元素依次比较大小，找到合适的插入位置。找到插入点之后，我们还需要将插入点之后的元素顺序往后移动一位，这样才能腾出位置给元素 a 插入。</p></blockquote><blockquote><p>对于不同的查找插入点方法（从头到尾、从尾到头），元素的比较次数是有区别的。但对于一个给定的初始序列，<strong>移动操作的次数总是固定的，就等于逆序度 = 满有序度-初始有序度</strong>。</p></blockquote><p>现在，结合刚才我分析排序算法的三个方面，我有三个问题要问你。</p><h4 id="第一，插入排序是原地排序算法吗？"><a href="#第一，插入排序是原地排序算法吗？" class="headerlink" title="第一，插入排序是原地排序算法吗？"></a>第一，插入排序是原地排序算法吗？</h4><p><strong>插入排序算法的运行并不需要额外的存储空间，所以空间复杂度是 O(1)，也就是说，这是一个原地排序算法。</strong></p><h4 id="第二，插入排序是稳定的排序算法吗？"><a href="#第二，插入排序是稳定的排序算法吗？" class="headerlink" title="第二，插入排序是稳定的排序算法吗？"></a>第二，插入排序是稳定的排序算法吗？</h4><p><strong>在插入排序中，对于值相同的元素，我们可以选择将后面出现的元素，插入到前面出现元素的后面，这样就可以保持原有的前后顺序不变，所以插入排序是稳定的排序算法。</strong></p><h4 id="第三，插入排序的时间复杂度是多少？"><a href="#第三，插入排序的时间复杂度是多少？" class="headerlink" title="第三，插入排序的时间复杂度是多少？"></a>第三，插入排序的时间复杂度是多少？</h4><ul><li>如果要排序的数据已经是有序的，我们并不需要搬移任何数据。如果我们从尾到头在有序数据组里面查找插入位置，每次只需要比较一个数据就能确定插入的位置。所以这种情况下，最好是时间复杂度为 O(n)。注意，这里是从尾到头遍历已经有序的数据。</li><li>如果数组是倒序的，每次插入都相当于在数组的第一个位置插入新的数据，所以需要移动大量的数据，所以最坏情况时间复杂度为 O(n2)。</li><li>还记得我们在数组中插入一个数据的平均时间复杂度是多少吗？没错，是 O(n)。所以，对于插入排序来说，每次插入操作都相当于在数组中插入一个数据，循环执行 n 次插入操作，所以平均时间复杂度为 O(n2)。</li></ul><h2 id="3、选择排序（Selection-Sort）"><a href="#3、选择排序（Selection-Sort）" class="headerlink" title="3、选择排序（Selection Sort）"></a>3、选择排序（Selection Sort）</h2><p>选择排序算法的实现思路有点类似插入排序，也分已排序区间和未排序区间。但是选择排序每次会从<strong>未排序区间中找到最小的元素，将其放到已排序区间的末尾。</strong></p><p><img src="https://static001.geekbang.org/resource/image/32/1d/32371475a0b08f0db9861d102474181d.jpg"></p><h4 id="第一，选择排序是原地排序算法吗？"><a href="#第一，选择排序是原地排序算法吗？" class="headerlink" title="第一，选择排序是原地排序算法吗？"></a>第一，选择排序是原地排序算法吗？</h4><p>选择排序的时间复杂度是O(1)所以是原地排序</p><h4 id="第二，选择排序是稳定的排序算法吗？"><a href="#第二，选择排序是稳定的排序算法吗？" class="headerlink" title="第二，选择排序是稳定的排序算法吗？"></a>第二，选择排序是稳定的排序算法吗？</h4><p><strong>不是稳定排序，对于选择排序来说每次都是从未排序序列中找到最小的插入到已排序序列的末尾处，和前面的元素交换，这样会破坏稳定性</strong></p><blockquote><p>比如 5，8，5，2，9 这样一组数据，使用选择排序算法来排序的话，第一次找到最小元素 2，与第一个 5 交换位置，那第一个 5 和中间的 5 顺序就变了，所以就不稳定了。正是因此，相对于冒泡排序和插入排序，选择排序就稍微逊色了。\</p></blockquote><h4 id="第三，选择排序的时间复杂度是多少？"><a href="#第三，选择排序的时间复杂度是多少？" class="headerlink" title="第三，选择排序的时间复杂度是多少？"></a>第三，选择排序的时间复杂度是多少？</h4><p><strong>选择排序的最好情况时间复杂度、最坏情况和平均情况时间复杂度都为 O(n2)。</strong></p><h2 id="总结三种时间复杂度是-O-n2-的排序算法"><a href="#总结三种时间复杂度是-O-n2-的排序算法" class="headerlink" title="总结三种时间复杂度是 O(n2) 的排序算法"></a>总结三种时间复杂度是 O(n2) 的排序算法</h2><blockquote><p>这三种排序算法，实现代码都非常简单，对于小规模数据的排序，用起来非常高效。但是在大规模数据排序的时候，这个时间复杂度还是稍微有点高，所以我们更倾向于用下一节要讲的时间复杂度为 O(nlogn) 的排序算法。</p></blockquote><p><img src="https://static001.geekbang.org/resource/image/34/50/348604caaf0a1b1d7fee0512822f0e50.jpg"></p><hr><hr><h3 id="问题二：如何在-O-n-的时间复杂度内查找一个无序数组中的第-K-大元素"><a href="#问题二：如何在-O-n-的时间复杂度内查找一个无序数组中的第-K-大元素" class="headerlink" title="问题二：如何在 O(n) 的时间复杂度内查找一个无序数组中的第 K 大元素?"></a>问题二：如何在 O(n) 的时间复杂度内查找一个无序数组中的第 K 大元素?</h3><h2 id="1、归并排序"><a href="#1、归并排序" class="headerlink" title="1、归并排序"></a>1、归并排序</h2><blockquote><p>归并排序的核心思想还是蛮简单的。如果要排序一个数组，我们先把数组从中间分成前后两部分，然后对前后两部分分别排序，再将排好序的两部分合并在一起，这样整个数组就都有序了。</p></blockquote><p><strong>归并排序的核心是合并：依次合并N个堆得数据</strong></p><ul><li>1、在合并时，您需要两个索引来跟踪两个数组的进度。</li><li>2、这是合并后的数组。 它现在是空的，但是你将在下面的步骤中通过添加其他数组中的元素构建它。</li><li>3、这个while循环将比较左侧和右侧的元素，并将它们添加到orderedPile，同时确保结果保持有序。</li><li>4、如果前一个while循环完成，则意味着leftPile或rightPile中的一个的内容已经完全合并到orderedPile中。此时，您不再需要进行比较。只需依次添加剩下一个数组的其余内容到orderedPile。</li></ul><p><img src="https://static001.geekbang.org/resource/image/db/2b/db7f892d3355ef74da9cd64aa926dc2b.jpg"></p><ul><li>归并排序使用的就是分治思想。分治，顾名思义，就是分而治之，将一个大问题分解成小的子问题来解决。小的子问题解决了，大问题也就解决了。</li><li>从我刚才的描述，你有没有感觉到，分治思想跟我们前面讲的递归思想很像。是的，分治算法一般都是用递归来实现的。<strong>分治是一种解决问题的处理思想，递归是一种编程技巧，这两者并不冲突。</strong></li></ul><p>所以归并排序的核心就是递归写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">递推公式：</span><br><span class="line">merge_sort(p…r) &#x3D; merge(merge_sort(p…q), merge_sort(q+1…r))</span><br><span class="line"></span><br><span class="line">终止条件：</span><br><span class="line">p &gt;&#x3D; r 不用再继续分解</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有了递推公式，转化成代码就简单多了:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(<span class="number">_</span> leftArray: [Int], <span class="number">_</span> rightArray: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    <span class="keyword">var</span> l = <span class="number">0</span>, r = <span class="number">0</span></span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">    <span class="keyword">var</span> mergeArr: [<span class="type">Int</span>] = []</span><br><span class="line">    <span class="comment">//3</span></span><br><span class="line">    <span class="keyword">while</span> l &lt; leftArray.<span class="built_in">count</span> &amp;&amp; r &lt; rightArray.<span class="built_in">count</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> leftArray[l] &gt; rightArray[r] &#123;</span><br><span class="line">            mergeArr.append(rightArray[r])</span><br><span class="line">            r += <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> leftArray[l] &lt; rightArray[r] &#123;</span><br><span class="line">            mergeArr.append(leftArray[l])</span><br><span class="line">            l += <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mergeArr.append(leftArray[l])</span><br><span class="line">            l += <span class="number">1</span></span><br><span class="line">            mergeArr.append(rightArray[r])</span><br><span class="line">            r += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4</span></span><br><span class="line">    <span class="keyword">while</span> l &lt; leftArray.<span class="built_in">count</span> &#123;</span><br><span class="line">        mergeArr.append(leftArray[l])</span><br><span class="line">        l += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> r &lt; rightArray.<span class="built_in">count</span> &#123;</span><br><span class="line">        mergeArr.append(rightArray[r])</span><br><span class="line">        r += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mergeArr</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 1、如果数组为空或包含单个元素，则无法将其拆分为更小的部分，返回数组就行。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 2、找到中间索引。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 3、使用上一步中的中间索引，递归地分割数组的左侧。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 4、递归地分割数组的右侧。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 5、最后，将所有值合并在一起，确保它始终排序。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeSort</span><span class="params">(<span class="number">_</span> array: Array&lt;Int&gt;)</span></span> -&gt; <span class="type">Array</span>&lt;<span class="type">Int</span>&gt; &#123;</span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    <span class="keyword">guard</span> array.<span class="built_in">count</span> &gt; <span class="number">1</span> <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> array</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">    <span class="keyword">let</span> middle = array.<span class="built_in">count</span> / <span class="number">2</span></span><br><span class="line">    <span class="comment">//3</span></span><br><span class="line">    <span class="keyword">let</span> leftPart = mergeSort(<span class="type">Array</span>(array[<span class="number">0</span>..&lt;middle]))</span><br><span class="line">    <span class="comment">//4</span></span><br><span class="line">    <span class="keyword">let</span> rightPart = mergeSort(<span class="type">Array</span>(array[middle..&lt;array.<span class="built_in">count</span>]))</span><br><span class="line">    <span class="comment">//5</span></span><br><span class="line">    <span class="keyword">return</span> merge(leftPart, rightPart)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、快速排序"><a href="#2、快速排序" class="headerlink" title="2、快速排序"></a>2、快速排序</h2><p><a href="https://github.com/andyRon/swift-algorithm-club-cn/tree/master/Quicksort">快速排序是原地排序，也是递归实现，但快速排序不是稳定排序</a></p><blockquote><p>归并排序虽然是稳定的、时间复杂度为 O(nlogn) 的排序算法，但是它是非原地排序算法。<br>归并之所以是非原地排序算法，主要原因是合并函数无法在原地执行。<br> 快速排序通过设计巧妙的原地分区函数，可以实现原地排序，解决了归并排序占用太多内存的问题。</p></blockquote><blockquote><p>快排的思想是这样的：如果要排序数组中下标从 p 到 r 之间的一组数据，我们选择 p 到 r 之间的任意一个数据作为 pivot（分区点）。</p></blockquote><blockquote><p>我们遍历 p 到 r 之间的数据，将小于 pivot 的放到左边，将大于 pivot 的放到右边，将 pivot 放到中间。经过这一步骤之后，数组 p 到 r 之间的数据就被分成了三个部分，前面 p 到 q-1 之间都是小于 pivot 的，中间是 pivot，后面的 q+1 到 r 之间是大于 pivot 的。</p></blockquote><p><img src="https://static001.geekbang.org/resource/image/4d/81/4d892c3a2e08a17f16097d07ea088a81.jpg"><br> 直接递归：<br> 1、设置中间位置元素为轴点元素pivot<br> 2、分区：less equal more<br> 3、递归合并分区</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">quickSort</span>&lt;T: Comparable&gt;<span class="params">(<span class="number">_</span> array: [T])</span></span> -&gt; [<span class="type">T</span>]&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> pivot = array[array.<span class="built_in">count</span> / <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> less = array.<span class="built_in">filter</span> &#123; $<span class="number">0</span> &lt; pivot &#125;</span><br><span class="line">    <span class="keyword">let</span> <span class="built_in">equal</span> = array.<span class="built_in">filter</span> &#123; $<span class="number">0</span> == pivot &#125;</span><br><span class="line">    <span class="keyword">let</span> more = array.<span class="built_in">filter</span> &#123; $<span class="number">0</span> &gt; pivot &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">quickSort</span>(less) + <span class="built_in">equal</span> + <span class="built_in">quickSort</span>(more)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 1、从序列中选择中轴点pivot（假设选择位置为0的元素）</span></span><br><span class="line"><span class="comment"> 2、利用pivot中轴点把序列分成两个子序列</span></span><br><span class="line"><span class="comment"> 3、分别对左右子序列递归进行快速排序，直到元素不能分割位置</span></span><br><span class="line"><span class="comment">   快速排序的本质是把每一个元素都转换成中轴点。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">quickSortDutch</span>&lt;T: Comparable&gt;<span class="params">(<span class="number">_</span> a: <span class="keyword">inout</span> [T], low: Int, high: Int)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> low &lt; high &#123;</span><br><span class="line">        <span class="keyword">let</span> pivot = <span class="type">Int</span>.random(<span class="keyword">in</span>: low...high)</span><br><span class="line">        <span class="keyword">let</span> (p, q) = partationDutch(&amp;a, low: low, high: high, pivotIndex: pivot)</span><br><span class="line">        quickSortDutch(&amp;a, low: low, high: p - <span class="number">1</span>)</span><br><span class="line">        quickSortDutch(&amp;a, low: q + <span class="number">1</span>, high: high)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Lomuto分区-Vs-Hoare分区-Vs-荷兰国旗分区"><a href="#Lomuto分区-Vs-Hoare分区-Vs-荷兰国旗分区" class="headerlink" title="Lomuto分区 Vs Hoare分区 Vs 荷兰国旗分区"></a>Lomuto分区 Vs Hoare分区 Vs 荷兰国旗分区</h4><blockquote><p>Lomuto分区法:是用数组最后一个元素作为基准元素对数组分区，区域为[low…p-1] [p+1…high]，然后递归调用quickLomutoSort分别对左右区排序，一直到数组有序</p></blockquote><hr><blockquote><p>Hoare分区：选择数组的first元素作为基准，数组划分区域为[low…p] [p+1…high]，然后递归调用quickSortHoare分别对左右区排序，一直到数组有序</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 3 荷兰国旗分区：将前部和后部各排在数组的前边和后边，中部自然就排好了,分区函数返回(p, q)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 设置两个标志位begin和end分别指向这个数组的开始和末尾，然后用一个标志位current从头开始进行遍历：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 1）若遍历到的current &lt; pivot，于是就和begin位置进行交换，然后current向前进，begin也向前进（表示前边的已经都排好了）。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 2）若遍历到current == pivot，则说明它一定属于中部，根据总思路，中部的我们都不动，然后current向前进。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 3）若遍历到current &gt; pivot，则说明它一定属于后部，于是就和end位置进行交换，</span></span><br><span class="line"><span class="comment">    由于交换完毕后current指向的可能是属于前部的，若此时current前进则会导致该位置不能被交换到前部，所以此时current不前进。</span></span><br><span class="line"><span class="comment">    end向后退1。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 4) 返回分区（begin, end）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">partationDutch</span>&lt;T: Comparable&gt;<span class="params">(<span class="number">_</span> a: <span class="keyword">inout</span> [T], low: Int, high: Int, pivotIndex: Int)</span></span> -&gt; (<span class="type">Int</span>, <span class="type">Int</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> begin = low, end = high</span><br><span class="line">    <span class="keyword">var</span> current = low, pivot = a[pivotIndex]</span><br><span class="line">    <span class="keyword">while</span> current &lt;= end &#123;</span><br><span class="line">        <span class="keyword">if</span> a[current] &lt; pivot &#123;</span><br><span class="line">            a.swapAt(begin, current)</span><br><span class="line">            begin += <span class="number">1</span></span><br><span class="line">            current += <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> a[current] == pivot &#123;</span><br><span class="line">            current += <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            a.swapAt(current, end)</span><br><span class="line">            end -= <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (begin, end)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解答问题二：</p><ul><li><p>快排核心思想就是分治和分区，我们可以利用分区的思想，来解答开这个问题：O(n) 时间复杂度内求无序数组中的第 K 大元素。比如，4， 2， 5， 12， 3 这样一组数据，第 3 大元素就是 4。</p></li><li><p>我们选择数组区间 A[0…n-1]的最后一个元素 A[n-1]作为 pivot，对数组 A[0…n-1]原地分区，这样数组就分成了三部分，A[0…p-1]、A[p]、A[p+1…n-1]。</p></li><li><p>如果 p+1=K，那 A[p]就是要求解的元素；如果 K&gt;p+1, 说明第 K 大元素出现在 A[p+1…n-1]区间，我们再按照上面的思路递归地在 A[p+1…n-1]这个区间内查找。同理，如果 K&lt;p+1，那我们就在 A[0…p-1]区间查找。</p></li></ul><p>本文参考：<a href="https://time.geekbang.org/column/article/41913">王争-数据结构与算法之美</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反转问题</title>
      <link href="2018/01/01/%E5%8F%8D%E8%BD%AC%E9%97%AE%E9%A2%98/"/>
      <url>2018/01/01/%E5%8F%8D%E8%BD%AC%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串反转"><a href="#字符串反转" class="headerlink" title="字符串反转"></a>字符串反转</h2><h3 id="方法一：递归"><a href="#方法一：递归" class="headerlink" title="方法一：递归"></a>方法一：递归</h3><blockquote><p>原地反转字符串是否代表了空间复杂度为常数？<br>不，原地反转字符串是一种不使用辅助数据结构的算法。</p></blockquote><blockquote><p>我们使用递归的方法去反转字符串，它是原地反转，但是空间复杂度却不是常数级空间，因为递归过程中使用了堆栈空间。</p></blockquote><h4 id="算法过程"><a href="#算法过程" class="headerlink" title="算法过程"></a>算法过程</h4><ul><li>我们实现递归函数 helper，它接受两个参数：left 左指针和 right 右指针。</li><li>如果 left&gt;=right，不做任何操作。</li><li>否则交换 s[left] 和 s[right] 和调用 helper(left + 1, right - 1)。</li><li>首次调用函数我们传递首尾指针反转整个字符串 return helper(0, len(s) - 1)。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="keyword">char</span>[] s, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (left &gt;= right) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">char</span> tmp = s[left];</span><br><span class="line">  s[left++] = s[right];</span><br><span class="line">  s[right--] = tmp;</span><br><span class="line">  helper(s, left, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(<span class="keyword">char</span>[] s)</span> </span>&#123;</span><br><span class="line">  helper(s, <span class="number">0</span>, s.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p><strong>时间复杂度：\mathcal{O}(N)O(N)。执行了 N/2N/2 次的交换。</strong></p><p><strong>空间复杂度：\mathcal{O}(N)O(N)，递归过程中使用的堆栈空间。</strong></p><h3 id="方法二：双指针法"><a href="#方法二：双指针法" class="headerlink" title="方法二：双指针法"></a>方法二：双指针法</h3><p><strong>双指针法是使用两个指针，一个左指针 left，右指针 right，开始工作时 left 指向首元素，right 指向尾元素。交换两个指针指向的元素，并向中间移动，直到两个指针相遇。</strong></p><h4 id="算法过程-1"><a href="#算法过程-1" class="headerlink" title="算法过程"></a>算法过程</h4><ul><li>将 left 指向首元素，right 指向尾元素。</li><li>当 left&lt;right：</li><li>交换 s[left] 和 s[right]。</li><li>left++</li><li>right++</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双指针</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseStr</span><span class="params">(<span class="number">_</span> s: <span class="keyword">inout</span> [Character])</span></span> -&gt; [<span class="type">Character</span>]&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">left</span> = <span class="number">0</span>, <span class="keyword">right</span> = s.<span class="built_in">count</span> - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">left</span> &lt; <span class="keyword">right</span> &#123;</span><br><span class="line">        (s[<span class="keyword">left</span>],s[<span class="keyword">right</span>]) = (s[<span class="keyword">right</span>],s[<span class="keyword">left</span>])</span><br><span class="line">        <span class="keyword">left</span> += <span class="number">1</span></span><br><span class="line">        <span class="keyword">right</span> -= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;123456abcdef&quot;</span></span><br><span class="line"><span class="keyword">var</span> characters = <span class="type">Array</span>(str)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(characters)<span class="comment">//[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(reverseStr(&amp;characters))<span class="comment">//[&quot;f&quot;, &quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;, &quot;a&quot;, &quot;6&quot;, &quot;5&quot;, &quot;4&quot;, &quot;3&quot;, &quot;2&quot;, &quot;1&quot;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p><strong>时间复杂度：\mathcal{O}(N)O(N)。执行了 N/2N/2 次的交换。</strong><br><strong>空间复杂度：\mathcal{O}(1)O(1)，只使用了常数级空间。</strong></p><h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><h4 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h4><ul><li>定义两个指针pre cur : pre在前 cur 在后</li><li>如果cur节点不为空，设置pre.next = cur 实现一次翻转</li><li>翻转后pre 、cur同步向前一步</li><li>当pre为空终止循环</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseList</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span> || head?.next == <span class="literal">nil</span> &#123; <span class="keyword">return</span> head &#125;</span><br><span class="line">    <span class="keyword">var</span> pre = head, cur: <span class="type">ListNode?</span></span><br><span class="line">    <span class="keyword">while</span> pre != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = pre?.next</span><br><span class="line">        pre?.next = cur</span><br><span class="line">        cur = pre!</span><br><span class="line">        pre = temp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> 递归法核心：reversList(head) = reverseList(head.next)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseList2</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span> || head?.next == <span class="literal">nil</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">    <span class="keyword">let</span> newHead = reverseList2(head?.next)</span><br><span class="line">    head?.next?.next = head</span><br><span class="line">    head?.next = <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">return</span> newHead</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反转链表-II"><a href="#反转链表-II" class="headerlink" title="反转链表 II"></a>反转链表 II</h2><h4 id="题目描述：反转从位置-m-到-n-的链表。请使用一趟扫描完成反转。说明-1-≤-m-≤-n-≤-链表长度"><a href="#题目描述：反转从位置-m-到-n-的链表。请使用一趟扫描完成反转。说明-1-≤-m-≤-n-≤-链表长度" class="headerlink" title="题目描述：反转从位置 m 到 n 的链表。请使用一趟扫描完成反转。说明:1 ≤ m ≤ n ≤ 链表长度"></a>题目描述：反转从位置 m 到 n 的链表。请使用一趟扫描完成反转。说明:1 ≤ m ≤ n ≤ 链表长度</h4><ul><li>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m = 2, n = 4</li><li>输出: 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL<h4 id="题解思路"><a href="#题解思路" class="headerlink" title="题解思路"></a>题解思路</h4></li></ul><p>第一步：找到待反转节点的前一个节点。<br>第二步：反转m到n这部分。<br>第三步：将反转的起点的next指向反转的后面一部分。<br>第四步：将第一步找到的节点指向反转以后的头节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseBetween</span><span class="params">(ListNode head, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode res = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        res.next = head;</span><br><span class="line">        ListNode node = res;</span><br><span class="line">        <span class="comment">//找到需要反转的那一段的上一个节点。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//node.next就是需要反转的这段的起点。</span></span><br><span class="line">        ListNode nextHead = node.next;</span><br><span class="line">        ListNode next = <span class="keyword">null</span>;</span><br><span class="line">        ListNode pre = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//反转m到n这一段</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &lt;= n; i++) &#123;</span><br><span class="line">            next = nextHead.next;</span><br><span class="line">            nextHead.next = pre;</span><br><span class="line">            pre = nextHead;</span><br><span class="line">            nextHead = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将反转的起点的next指向next。</span></span><br><span class="line">        node.next.next = next;</span><br><span class="line">        <span class="comment">//需要反转的那一段的上一个节点的next节点指向反转后链表的头结点</span></span><br><span class="line">        node.next = pre;</span><br><span class="line">        <span class="keyword">return</span> res.next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>老鼠毒药问题</title>
      <link href="2018/01/01/%E8%80%81%E9%BC%A0%E6%AF%92%E8%8D%AF%E9%97%AE%E9%A2%98/"/>
      <url>2018/01/01/%E8%80%81%E9%BC%A0%E6%AF%92%E8%8D%AF%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="老鼠毒药问题"><a href="#老鼠毒药问题" class="headerlink" title="老鼠毒药问题"></a>老鼠毒药问题</h1><h2 id="1、有两个水桶，-一个装-3L-的水，-一个可装-5L-的水，-问-如何利用这两个桶，-量出-4L-的水来？"><a href="#1、有两个水桶，-一个装-3L-的水，-一个可装-5L-的水，-问-如何利用这两个桶，-量出-4L-的水来？" class="headerlink" title="1、有两个水桶， 一个装 3L 的水， 一个可装 5L 的水， 问:如何利用这两个桶， 量出 4L 的水来？"></a>1、有两个水桶， 一个装 3L 的水， 一个可装 5L 的水， 问:如何利用这两个桶， 量出 4L 的水来？</h2><p>解法一加法：操作两次3L的桶，得到1L的水，然后倒入5L的桶里面，此时5L桶里有1L的水，再次用3L的桶倒入5L桶，1L+ 3L = 4L,一共操作3次3L桶</p><p><strong>加法解法图示：</strong><br><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/plus.jpg"></p><p>解法二减法：5L满水的桶倒入3L的桶，剩余2L，5L桶剩余的2L再次倒入3L桶，此时3L桶还有1L集满，5L桶再次装满后倒出来1L给3L桶里面，5L - 1L = 4L,连续操作3次5L桶</p><p><strong>减法解法图示：</strong><br><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/%E5%87%8F%E6%B3%95.jpg"></p><h2 id="2、100个瓶子，里面有1瓶毒药，只有7只老鼠，老鼠吃了之后一星期会死亡，怎么测试？"><a href="#2、100个瓶子，里面有1瓶毒药，只有7只老鼠，老鼠吃了之后一星期会死亡，怎么测试？" class="headerlink" title="2、100个瓶子，里面有1瓶毒药，只有7只老鼠，老鼠吃了之后一星期会死亡，怎么测试？"></a>2、100个瓶子，里面有1瓶毒药，只有7只老鼠，老鼠吃了之后一星期会死亡，怎么测试？</h2><p><strong>首先2的6次方64，2的7次方128 &gt; 100<br>因此我们可以用7个的二进制给100个瓶子编号，7只老鼠分别对应7个二进制位，如果瓶子编号出现1，老鼠喝下瓶子中的毒药，最后统计出被毒死老鼠的二进制数，转换为10进制就是有毒瓶子的编号。</strong></p><p><strong>解法图示：</strong></p><p><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/%E8%80%81%E9%BC%A0%E9%97%AE%E9%A2%98.JPG"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
