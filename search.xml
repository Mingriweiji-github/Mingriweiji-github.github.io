<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Runloop</title>
      <link href="/2020/03/11/Runloop/"/>
      <url>/2020/03/11/Runloop/</url>
      
        <content type="html"><![CDATA[<h1 id="Runloop"><a href="#Runloop" class="headerlink" title="Runloop"></a>Runloop</h1><h2 id="1-讲讲-RunLoop，项目中有用到吗？"><a href="#1-讲讲-RunLoop，项目中有用到吗？" class="headerlink" title="1.讲讲 RunLoop，项目中有用到吗？"></a>1.讲讲 RunLoop，项目中有用到吗？</h2><ul><li>事件循环，在程序运行中循环做一些事情</li><li>没有消息mach_msg()切换用户态到内核态线程休眠，有消息内核态切换到用户态</li></ul><h3 id="runloop相关："><a href="#runloop相关：" class="headerlink" title="runloop相关："></a>runloop相关：</h3><ul><li>Timer、performSelector</li><li>GCD、AutoreleasePool</li><li>事件响应、收拾识别、网络请求</li></ul><h3 id="runloop的应用："><a href="#runloop的应用：" class="headerlink" title="runloop的应用："></a>runloop的应用：</h3><ul><li>线程包活</li><li>解决timer滑动停止问题</li><li>监听主线程卡顿</li><li>性能优化</li></ul><h2 id="2-runloop的6种状态和runloop内部实现逻辑？"><a href="#2-runloop的6种状态和runloop内部实现逻辑？" class="headerlink" title="2.runloop的6种状态和runloop内部实现逻辑？"></a>2.runloop的6种状态和runloop内部实现逻辑？</h2><pre><code>/* Run Loop Observer Activities */typedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) {    kCFRunLoopEntry = (1UL &lt;&lt; 0),           // 即将进入Loop    kCFRunLoopBeforeTimers = (1UL &lt;&lt; 1),    //即将处理Timer    kCFRunLoopBeforeSources = (1UL &lt;&lt; 2),   //即将处理Source    kCFRunLoopBeforeWaiting = (1UL &lt;&lt; 5),   //即将进入休眠    kCFRunLoopAfterWaiting = (1UL &lt;&lt; 6),    //刚从休眠中唤醒    kCFRunLoopExit = (1UL &lt;&lt; 7),            //即将退出Loop    kCFRunLoopAllActivities = 0x0FFFFFFFU};</code></pre><ul><li><strong>source0 : 触摸事件、performSelectorOnThread:</strong></li><li><strong>source1: 基于Port的线程间通讯，捕获到的系统事件</strong></li><li><strong>timers: NSTimer + performSelector:afterDelay:</strong></li><li><strong>observers: 监听runloop的状态/autoreleasePool的创建和释放、UI的刷新</strong></li></ul><p><img src="https://user-gold-cdn.xitu.io/2020/3/5/170a9f4968fe6f59?w=1012&h=858&f=png&s=146946" alt="img"></p><h2 id="3-runloop和线程的关系？"><a href="#3-runloop和线程的关系？" class="headerlink" title="3.runloop和线程的关系？"></a>3.runloop和线程的关系？</h2><ul><li>一一对应</li><li>保存在一个全局字典中，线程是key, runloop是value</li><li>子线程默认没有runloop，在第一次获取runloop时才会创建。</li><li>runloop在线程结束时销毁</li></ul><h2 id="4-timer-与-runloop-的关系？"><a href="#4-timer-与-runloop-的关系？" class="headerlink" title="4.timer 与 runloop 的关系？"></a>4.timer 与 runloop 的关系？</h2><h2 id="程序中添加每3秒响应一次的NSTimer，当拖动tableview时timer可能无法响应要怎么解决？"><a href="#程序中添加每3秒响应一次的NSTimer，当拖动tableview时timer可能无法响应要怎么解决？" class="headerlink" title="程序中添加每3秒响应一次的NSTimer，当拖动tableview时timer可能无法响应要怎么解决？"></a>程序中添加每3秒响应一次的NSTimer，当拖动tableview时timer可能无法响应要怎么解决？</h2><h2 id="5-runloop-是怎么响应用户操作的，-具体流程是什么样的？"><a href="#5-runloop-是怎么响应用户操作的，-具体流程是什么样的？" class="headerlink" title="5.runloop 是怎么响应用户操作的， 具体流程是什么样的？"></a>5.runloop 是怎么响应用户操作的， 具体流程是什么样的？</h2><h2 id="6-说说runLoop的几种状态"><a href="#6-说说runLoop的几种状态" class="headerlink" title="6.说说runLoop的几种状态"></a>6.说说runLoop的几种状态</h2><h2 id="7-runloop的mode作用是什么？"><a href="#7-runloop的mode作用是什么？" class="headerlink" title="7.runloop的mode作用是什么？"></a>7.runloop的mode作用是什么？</h2><ul><li><p>CFRunLoopModeRef代表<strong>RunLoop的运行模式</strong></p></li><li><p>一个RunLoop包含若干个Mode，每个Mode又包含若干个Source0/Source1/Timer/Observer</p></li><li><p>RunLoop启动时只能选择其中一个Mode，作为<strong>currentMode</strong></p></li><li><p>如果需要切换Mode，只能退出当前Loop，再重新选择一个Mode进入</p></li><li><p><strong>不同组的Source0/Source1/Timer/Observer能分隔开来，互不影响</strong></p></li><li><p><strong>如果Mode里没有任何Source0/Source1/Timer/Observer，RunLoop会立马退出</strong></p></li></ul><h2 id="8-KVO实现原理-哪些情况下使用kvo会崩溃，怎么防护崩溃"><a href="#8-KVO实现原理-哪些情况下使用kvo会崩溃，怎么防护崩溃" class="headerlink" title="8.KVO实现原理?哪些情况下使用kvo会崩溃，怎么防护崩溃?"></a>8.KVO实现原理?哪些情况下使用kvo会崩溃，怎么防护崩溃?</h2><h2 id="9-如何手动关闭KVO-如何手动自己实现KVO说说思路"><a href="#9-如何手动关闭KVO-如何手动自己实现KVO说说思路" class="headerlink" title="9.如何手动关闭KVO?如何手动自己实现KVO说说思路"></a>9.如何手动关闭KVO?如何手动自己实现KVO说说思路</h2><h2 id="10-通过KVC修改属性会触发KVO么"><a href="#10-通过KVC修改属性会触发KVO么" class="headerlink" title="10.通过KVC修改属性会触发KVO么"></a>10.通过KVC修改属性会触发KVO么</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>多线程</title>
      <link href="/2020/03/11/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2020/03/11/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1、你理解的多线程？并发和串行，同步和异步"><a href="#1、你理解的多线程？并发和串行，同步和异步" class="headerlink" title="1、你理解的多线程？并发和串行，同步和异步"></a>1、<strong>你理解的多线程？并发和串行，同步和异步</strong></h2><ul><li>同步和异步的区别: 是否开辟新的线程，同步只能在当前线程执行任务，异步可以再新的线程执行任务</li><li>串行和并发的区别是任务执行的顺序，串行任务只能顺序执行，并发可以多个任务同时执行。</li></ul><h2 id="2、iOS多线程有哪些？常用哪个？"><a href="#2、iOS多线程有哪些？常用哪个？" class="headerlink" title="2、iOS多线程有哪些？常用哪个？"></a>2、iOS多线程有哪些？常用哪个？</h2><ul><li>NSThread、GCD/NSOperationQueue</li><li>常用GCD/NSOperation</li></ul><p><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/20200314043637.png" alt="pthread NSThread GCD NSoperatio"></p><h2 id="GCD-的队列类型有哪些？"><a href="#GCD-的队列类型有哪些？" class="headerlink" title="GCD 的队列类型有哪些？"></a><strong>GCD 的队列类型有哪些？</strong></h2><h2 id="OperationQueue-和-GCD-的区别？"><a href="#OperationQueue-和-GCD-的区别？" class="headerlink" title="OperationQueue 和 GCD 的区别？"></a><strong>OperationQueue 和 GCD 的区别？</strong></h2><ol><li>GCD是底层的C语言构成的API，而NSOperationQueue及相关对象是Objc的对象。在GCD中，在队列中执行的是由block构成的任务，这是一个轻量级的数据结构；而Operation作为一个对象，为我们提供了更多的选择；</li><li>在NSOperationQueue中，我们可以随时取消已经设定要准备执行的任务(当然，已经开始的任务就无法阻止了)，而GCD没法停止已经加入queue的block(其实是有的，但需要许多复杂的代码)；</li><li>NSOperation能够方便地设置依赖关系，我们可以让一个Operation依赖于另一个Operation，这样的话尽管两个Operation处于同一个并行队列中，但前者会直到后者执行完毕后再执行；</li><li>我们能将KVO应用在NSOperation中，可以监听一个Operation是否完成或取消，这样子能比GCD更加有效地掌控我们执行的后台任务；</li><li>在NSOperation中，我们能够设置NSOperation的priority优先级，能够使同一个并行队列中的任务区分先后地执行，而在GCD中，我们只能区分不同任务队列的优先级，如果要区分block任务的优先级，也需要大量的复杂代码；</li><li>我们能够对NSOperation进行继承，在这之上添加成员变量与成员方法，提高整个代码的复用度，这比简单地将block任务排入执行队列更有自由度，能够在其之上添加更多自定制的功能。</li></ol><p><strong>总的来说，Operation queue 提供了更多你在编写多线程程序时需要的功能，并隐藏了许多线程调度，线程取消与线程优先级的复杂代码，为我们提供简单的API入口。</strong></p><p><strong>从编程原则来说，一般我们需要尽可能的使用高等级、封装完美的API，在必须时才使用底层API。但是我认为当我们的需求能够以更简单的底层代码完成的时候，简洁的GCD或许是个更好的选择，而Operation queue 为我们提供能更多的选择。</strong></p><h2 id="如何用gcd实现以下功能？"><a href="#如何用gcd实现以下功能？" class="headerlink" title="如何用gcd实现以下功能？"></a><strong>如何用gcd实现以下功能？</strong></h2><ul><li><strong>异步并发执行任务1、任务2</strong> </li><li><strong>等任务1、任务2都执行完毕后，再回到主线程执行任务3</strong></li></ul><h2 id="线程安全是什么？如何处理线程安全的问题？"><a href="#线程安全是什么？如何处理线程安全的问题？" class="headerlink" title="线程安全是什么？如何处理线程安全的问题？"></a><strong>线程安全是什么？如何处理线程安全的问题？</strong></h2><blockquote><p>我们一般通过线程同步方案如加锁的方式来实现线程的安全</p><p><a href="https://bestswifter.com/ios-lock/" target="_blank" rel="noopener">iOS锁的原理</a> |   <a href="https://www.jianshu.com/p/e56c3d28e77d" target="_blank" rel="noopener">深入浅出iOS系统内核-同步机制</a></p></blockquote><ul><li><strong>os_unfair_lock：iOS10开始os_unfair_lock来替代OSSpinLock, 等待锁的线程会进入休眠不占用CPU资源， 这个os_unfair_lock解决了优先级翻转问题。</strong></li><li><strong>OSSpinLock: 自旋锁，线程忙等一直占用CUP资源，不安全因为可能出现优先级翻转的可能</strong></li><li><strong>dispatch_semaphore：信号量为1的semaphore也可以看做是锁</strong></li><li><strong>pthread_mutex：mutex是互斥锁，等待锁的线程处于休眠状态，pthread_mutex是递归锁，可以递归调用。</strong></li><li><strong>使用GCD的串行队列也可以实现锁的功能</strong></li><li><strong>NSLock是对metex互斥锁的封装，NSRecurisiveLock也是对metex的递归封装，API和NSLock一直。</strong></li><li>NSCondition</li><li>NSConditionLock</li><li><strong>@synchorized也是mutex的递归封装，@synchronized(obj)内部会生成obj对应的递归锁，然后进行加锁、解锁操作。</strong></li></ul><h2 id="自旋锁和互斥锁如何选择？"><a href="#自旋锁和互斥锁如何选择？" class="headerlink" title="自旋锁和互斥锁如何选择？"></a><strong>自旋锁和互斥锁如何选择？</strong></h2><p><strong>自旋锁OSSpinLock：当线程获取锁，其他等待锁的线程会忙等一直占用CPU,自旋锁有优先级翻转的可能性，所以苹果已经弃用自旋锁OSSpinLock改用os_unfair_lock.</strong></p><p><strong>互斥锁mutext：阻塞线程并休眠，其他线程才能正常访问，用互斥的方式来保证线程的安全。</strong></p><p><strong>递归锁：顾名思义，可以被一个线程多次获得，而不会引起死锁。它记录了成功获得锁的次数，每一次成功的获得锁，必须有一个配套的释放锁和其对应，这样才不会引起死锁。NSRecursiveLock 会记录上锁和解锁的次数，当二者平衡的时候，才会释放锁，其它线程才可以上锁成功。</strong></p><ul><li><strong>什么情况使用自旋锁比较划算？</strong> <ul><li>预计线程等待锁的时间很短 </li><li>加锁的代码（临界区）经常被调用，但竞争情况很少发生 </li><li>CPU资源不紧张 多核处理器</li></ul></li><li><strong>什么情况使用互斥锁比较划算？</strong> <ul><li>预计线程等待锁的时间较长 </li><li>单核处理器 临界区有IO操作 </li><li>临界区代码复杂或者循环量大 </li><li>临界区竞争非常激烈 </li></ul></li></ul><ul><li><strong>追问二：使用以上锁需要注意哪些？</strong> </li><li><strong>追问三：用C/OC/C++，任选其一，实现自旋或互斥？口述即可！</strong></li></ul><h2 id="iOS线程同步方案性能比较"><a href="#iOS线程同步方案性能比较" class="headerlink" title="iOS线程同步方案性能比较"></a>iOS线程同步方案<strong>性能</strong>比较</h2><p><strong>性能从高到低排序:</strong></p><pre><code>os_unfair_lock &gt; OSSpinLock &gt; dispatch_semaphore &gt; pthread_mutex &gt; dispatch_queue(DISPATCH_QUEUE_SERIAL) &gt; NSLock &gt; NSCondition &gt; pthread_mutex(recursive) &gt; NSRecursiveLock &gt; NSConditionLock &gt; @synchronized</code></pre><h2 id="如何实现多度单写？"><a href="#如何实现多度单写？" class="headerlink" title="如何实现多度单写？"></a><code>如何实现多度单写？</code></h2><p><strong>dispatch_barrier_async</strong></p><ul><li>这个函数传入的并发队列必须是自己通过dispatch_queue_cretate创建的 </li><li>如果传入的是一个串行或是一个全局的并发队列，那这个函数便等同于dispatch_async函数的效果</li></ul><p><strong><code>pthread_rwlock</code>读写锁-等待锁的线程进入休眠</strong></p><p><img src="https://raw.githubusercontent.com/Mingriweiji-github/ImageBed/master/img/1.png" alt="pthread_rwlock"></p><p>‌</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS图像处理</title>
      <link href="/2019/12/30/iOS%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
      <url>/2019/12/30/iOS%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="iOS图像优化技巧"><a href="#iOS图像优化技巧" class="headerlink" title="iOS图像优化技巧"></a><a href="https://swift.gg/2019/11/01/image-resizing/" target="_blank" rel="noopener">iOS图像优化技巧</a></h1><h2 id="图像渲染优化的时机和理由"><a href="#图像渲染优化的时机和理由" class="headerlink" title="图像渲染优化的时机和理由"></a>图像渲染优化的时机和理由</h2><p>在开始之前，让我们先讨论一下<em>为什么</em>需要对图像进行渲染优化。毕竟，<code>UIImageView</code> 会自动根据 <a href="https://developer.apple.com/documentation/uikit/uiview/1622619-contentmode" target="_blank" rel="noopener"><code>contentmode</code> 属性</a> 规定的行为缩放和裁剪图像。在绝大多数情况下，<code>.scaleAspectFit</code>、<code>.scaleAspectFill</code> 或 <code>.scaleToFill</code> 已经完全满足你的所需。</p><pre><code>imageView.contentMode = .scaleAspectFitimageView.image = image</code></pre><hr><p>那么，什么时候对图像进行渲染优化才有意义呢？</p><p><strong>当它明显大于</strong> <strong><code>UIImageView</code></strong> <strong>显示尺寸的时候</strong></p><p>想要完整渲染这张宽高为 12,000 px 的图片，需要高达 20 MB 的空间。对于当今的硬件来说，你可能不会在意这么少兆字节的占用。但那只是它压缩后的尺寸。要展示它，<code>UIImageView</code> 首先需要把 JPEG 数据解码成位图（bitmap），如果要在一个 <code>UIImageView</code> 上按原样设置这张全尺寸图片，你的应用内存占用将会激增到<strong>几百兆</strong>，对用户明显没有什么好处（毕竟，屏幕能显示的像素有限）。但只要在设置 <code>UIImageView</code> 的 <code>image</code> 属性之前，将图像渲染的尺寸调整成 <code>UIImageView</code> 的大小，你用到的内存就会少一个数量级：</p><table><thead><tr><th align="left"></th><th align="left">内存消耗 <em>(MB)</em></th></tr></thead><tbody><tr><td align="left">无下采样</td><td align="left">220.2</td></tr><tr><td align="left">下采样</td><td align="left">23.7</td></tr></tbody></table><p>这个技巧就是众所周知的<em>下采样（downsampling）</em>，在这些情况下，它可以有效地优化你应用的性能表现。如果你想了解更多关于下采样的知识或者其它图形图像的最佳实践，请参照 <a href="https://developer.apple.com/videos/play/wwdc2018/219/" target="_blank" rel="noopener">来自 WWDC 2018 的精彩课程</a>。</p><p>而现在，很少有应用程序会尝试一次性加载这么大的图像了，但是也跟我从设计师那里拿到的图片资源不会差<em>太</em>多。<em>（认真的吗？一张颜色渐变的</em> <em>PNG</em> <em>图片要</em> <em>3</em> <em>MB?）</em> 考虑到这一点，让我们来看看有什么不同的方法，可以让你用来对图像进行优化或者下采样。</p><blockquote><p>不用说，这里所有从 URL 加载的示例图像都是针对<strong>本地</strong>文件。记住，在应用的主线程同步使用网络请求图像<strong>绝不</strong>是什么好主意。</p></blockquote><hr><h2 id="图像渲染优化技巧"><a href="#图像渲染优化技巧" class="headerlink" title="图像渲染优化技巧"></a>图像渲染优化技巧</h2><p>优化图像渲染的方法有很多种，每种都有不同的功能和性能特性。我们在本文看到的这些例子，架构层次跨度上从底层的 Core Graphics、vImage、Image I/O 到上层的 Core Image 和 UIKit 都有。</p><ol><li><a href="https://swift.gg/2019/11/01/image-resizing/#technique-1-drawing-to-a-uigraphicsimagerenderer" target="_blank" rel="noopener">绘制到 UIGraphicsImageRenderer 上</a></li><li><a href="https://swift.gg/2019/11/01/image-resizing/#technique-2-drawing-to-a-core-graphics-context" target="_blank" rel="noopener">绘制到 Core Graphics Context 上</a></li><li><a href="https://swift.gg/2019/11/01/image-resizing/#technique-3-creating-a-thumbnail-with-image-io" target="_blank" rel="noopener">使用 Image I/O 创建缩略图像</a></li><li><a href="https://swift.gg/2019/11/01/image-resizing/#technique-4-lanczos-resampling-with-core-image" target="_blank" rel="noopener">使用 Core Image 进行 Lanczos 重采样</a></li><li><a href="https://swift.gg/2019/11/01/image-resizing/#technique-5-image-scaling-with-vimage" target="_blank" rel="noopener">使用 vImage 优化图片渲染</a></li></ol><p>下面的这些数字是多次迭代加载、优化、渲染之前那张 <a href="https://visibleearth.nasa.gov/view.php?id=78314" target="_blank" rel="noopener">超大地球图片</a> 的平均时间：</p><table><thead><tr><th align="left"></th><th align="left">耗时 <em>(seconds)</em></th></tr></thead><tbody><tr><td align="left">技巧 #1: <code>UIKit</code></td><td align="left">0.1420</td></tr><tr><td align="left">技巧 #2: <code>Core Graphics</code> 1</td><td align="left">0.1722</td></tr><tr><td align="left">技巧 #3: <code>Image I/O</code></td><td align="left">0.1616</td></tr><tr><td align="left">技巧 #4: <code>Core Image</code> 2</td><td align="left">2.4983</td></tr><tr><td align="left">技巧 #5: <code>vImage</code></td><td align="left">2.3126</td></tr></tbody></table><p>1<br>设置不同的 <code>CGInterpolationQuality</code> 值出来的结果是一致的，在性能上的差异可以忽略不计。</p><p>2<br>若在 <code>CIContext</code> 创建时设置 <code>kCIContextUseSoftwareRenderer</code> 的值为 <code>true</code>，会导致耗时相比基础结果慢一个数量级。</p><h3 id="技巧-1-绘制到-UIGraphicsImageRenderer-上"><a href="#技巧-1-绘制到-UIGraphicsImageRenderer-上" class="headerlink" title="技巧 #1: 绘制到 UIGraphicsImageRenderer 上"></a>技巧 #1: 绘制到 UIGraphicsImageRenderer 上</h3><p>图像渲染优化的最上层 API 位于 UIKit 框架中。给定一个 <code>UIImage</code>，你可以绘制到 <code>UIGraphicsImageRenderer</code> 的上下文（context）中以渲染缩小版本的图像：</p><pre><code>import UIKit// 技巧 #1func resizedImage(at url: URL, for size: CGSize) -&gt; UIImage? {    guard let image = UIImage(contentsOfFile: url.path) else {        return nil    }    let renderer = UIGraphicsImageRenderer(size: size)    return renderer.image { (context) in        image.draw(in: CGRect(origin: .zero, size: size))    }}</code></pre><p><a href="https://developer.apple.com/documentation/uikit/uigraphicsimagerenderer" target="_blank" rel="noopener"><code>UIGraphicsImageRenderer</code></a> 是一项相对较新的技术，在 iOS 10 中被引入，用以取代旧版本的 <code>UIGraphicsBeginImageContextWithOptions</code> / <code>UIGraphicsEndImageContext</code> API。你通过指定以 <code>point</code> 计量的 <code>size</code> 创建了一个 <code>UIGraphicsImageRenderer</code>。<code>image</code> 方法带有一个闭包参数，返回的是一个经过闭包处理后的位图。最终，原始图像便会在缩小到指定的范围内绘制。</p><h3 id="技巧-2：绘制到-Core-Graphics-Context-中"><a href="#技巧-2：绘制到-Core-Graphics-Context-中" class="headerlink" title="技巧 #2：绘制到 Core Graphics Context 中"></a>技巧 #2：绘制到 Core Graphics Context 中</h3><p>Core Graphics / Quartz 2D 提供了一系列底层 API 让我们可以进行更多高级的配置。</p><p>给定一个 <code>CGImage</code> 作为暂时的位图上下文，使用 <code>draw(_:in:)</code> 方法来绘制缩放后的图像：</p><pre><code>import UIKitimport CoreGraphics// 技巧 #2func resizedImage(at url: URL, for size: CGSize) -&gt; UIImage? {    guard let imageSource = CGImageSourceCreateWithURL(url as NSURL, nil),        let image = CGImageSourceCreateImageAtIndex(imageSource, 0, nil)    else {        return nil    }    let context = CGContext(data: nil,                            width: Int(size.width),                            height: Int(size.height),                            bitsPerComponent: image.bitsPerComponent,                            bytesPerRow: image.bytesPerRow,                            space: image.colorSpace ?? CGColorSpace(name: CGColorSpace.sRGB)!,                            bitmapInfo: image.bitmapInfo.rawValue)    context?.interpolationQuality = .high    context?.draw(image, in: CGRect(origin: .zero, size: size))    guard let scaledImage = context?.makeImage() else { return nil }    return UIImage(cgImage: scaledImage)}</code></pre><p>这个 <code>CGContext</code> 初始化方法接收了几个参数来构造一个上下文，包括了必要的宽高参数，还有在给出的色域范围内每个颜色通道所需要的内存大小。在这个例子中，这些参数都是通过 <code>CGImage</code> 这个对象获取的。下一步，设置 <code>interpolationQuality</code> 属性为 <code>.high</code> 指示上下文在保证一定的精度上填充像素。<code>draw(_:in:)</code> 方法则是在给定的宽高和位置绘制图像，可以让图片在特定的边距下裁剪，也可以适用于一些像是人脸识别之类的图像特性。最后 <code>makeImage()</code> 从上下文获取信息并且渲染到一个 <code>CGImage</code> 值上（之后会用来构造 <code>UIImage</code> 对象）。</p><h3 id="技巧-3：使用-Image-I-O-创建缩略图像"><a href="#技巧-3：使用-Image-I-O-创建缩略图像" class="headerlink" title="技巧 #3：使用 Image I/O 创建缩略图像"></a>技巧 #3：使用 Image I/O 创建缩略图像</h3><p>Image I/O 是一个强大（却鲜有人知）的图像处理框架。抛开 Core Graphics 不说，它可以读写许多不同图像格式，访问图像的元数据，还有执行常规的图像处理操作。这个框架通过先进的缓存机制，提供了平台上最快的图片编码器和解码器，甚至可以增量加载图片。</p><p>这个重要的 <code>CGImageSourceCreateThumbnailAtIndex</code> 提供了一个带有许多不同配置选项的 API，比起在 Core Graphics 中等价的处理操作要简洁得多：</p><pre><code>import ImageIO// 技巧 #3func resizedImage(at url: URL, for size: CGSize) -&gt; UIImage? {    let options: [CFString: Any] = [        kCGImageSourceCreateThumbnailFromImageIfAbsent: true,        kCGImageSourceCreateThumbnailWithTransform: true,        kCGImageSourceShouldCacheImmediately: true,        kCGImageSourceThumbnailMaxPixelSize: max(size.width, size.height)    ]    guard let imageSource = CGImageSourceCreateWithURL(url as NSURL, nil),        let image = CGImageSourceCreateThumbnailAtIndex(imageSource, 0, options as CFDictionary)    else {        return nil    }    return UIImage(cgImage: image)}</code></pre><p>给定一个 <code>CGImageSource</code> 和一系列配置选项，<code>CGImageSourceCreateThumbnailAtIndex(_:_:_:)</code> 函数创建了一个图像的缩略图。优化尺寸大小的操作是通过 <code>kCGImageSourceThumbnailMaxPixelSize</code> 完成的，它根据图像原始宽高比指定的最大尺寸来缩放图像。通过设定 <code>kCGImageSourceCreateThumbnailFromImageIfAbsent</code> 或 <code>kCGImageSourceCreateThumbnailFromImageAlways</code> 选项，Image I/O 可以自动缓存优化后的结果以便后续调用。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>UIKit</strong>, <strong>Core</strong> <strong>Graphics</strong>, 和 <strong>Image</strong> <strong>I/O</strong> 都能很好地用于大部分图片的优化操作。</li><li>如果（在 iOS 平台，至少）要选择一个的话，<code>UIGraphicsImageRenderer</code> 是你最佳的选择。</li><li><strong>Core</strong> <strong>Image</strong> 在图像优化渲染操作方面性能表现优越。实际上，根据 Apple 官方 <a href="https://developer.apple.com/library/mac/documentation/graphicsimaging/Conceptual/CoreImaging/ci_performance/ci_performance.html#//apple_ref/doc/uid/TP30001185-CH10-SW1" target="_blank" rel="noopener"><em>Core</em> <em>Image</em> <em>编程规范中的性能最佳实践单元</em></a>，你应该使用 Core Graphics 或 Image I/O 对图像进行裁剪和下采样，而不是用 Core Image。</li><li>除非你已经在使用 <strong><code>vImage</code></strong>，否则在大多数情况下用到底层的 Accelerate API 所需的额外工作可能是不合理的。</li></ul><blockquote><p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg/" target="_blank" rel="noopener">http://swift.gg</a>。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Swift备忘录</title>
      <link href="/2019/12/07/Swift%E5%A4%87%E5%BF%98%E5%BD%95/"/>
      <url>/2019/12/07/Swift%E5%A4%87%E5%BF%98%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="SwiftTip"><a href="#SwiftTip" class="headerlink" title="SwiftTip"></a>SwiftTip</h1><a id="more"></a><p>##1、@autoclosure作用：将表达式自动封装成一个闭包</p><p>()-&gt;Void</p><p>1.2 ??的底层实现是用的enum</p><p>1.3 “闭包和循环引用”</p><p><strong>weak解决循环引用的正确写法：</strong></p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token keyword">weak</span> <span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token keyword">in</span><span class="token keyword">if</span> <span class="token keyword">let</span> strongSelf <span class="token operator">=</span> <span class="token keyword">self</span> <span class="token punctuation">{</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"The name is (strongSelf.name)"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2、值类型和引用类型的选择"><a href="#2、值类型和引用类型的选择" class="headerlink" title="2、值类型和引用类型的选择"></a>2、值类型和引用类型的选择</h2><ul><li><p>数组和字典设计为值类型最大的考虑是为了线程安全.</p></li><li><p>另一个优点，那就是非常高效，因为 “一旦赋值就不太会变化” 这种使用情景在 Cocoa 框架中是占有绝大多数的，这有效减少了内存的分配和回收。</p></li></ul><p>但是在少数情况下，我们显然也可能会在数组或者字典中存储非常多的东西，并且还要对其中的内容进行添加或者删除。”</p><ul><li><p>在需要处理大量数据并且频繁操作 (增减) 其中元素时，选择 NSMutableArray 和 NSMutableDictionary 会更好，</p></li><li><p>对于容器内条目小而容器本身数目多的情况，应该使用 Swift 语言内建的 Array 和 Dictionary</p></li></ul><h2 id="3、-escaping的作用？"><a href="#3、-escaping的作用？" class="headerlink" title="3、@escaping的作用？"></a>3、@escaping的作用？</h2><pre class=" language-swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">func</span> <span class="token function">animate</span><span class="token punctuation">(</span>withDuration duration<span class="token punctuation">:</span> <span class="token builtin">TimeInterval</span><span class="token punctuation">,</span> animations<span class="token punctuation">:</span> @<span class="token function">escaping</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token builtin">Void</span><span class="token punctuation">,</span> completion<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">Bool</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Void</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token constant">nil</span><span class="token punctuation">)</span></code></pre><img src="/Users/mac/Downloads/图像 2019-12-5，下午6.41.jpg" alt="图像 2019-12-5，下午6.41" style="zoom:50%;" /><h2 id="4、defer的使用注意点"><a href="#4、defer的使用注意点" class="headerlink" title="4、defer的使用注意点"></a>4、defer的使用注意点</h2><h4 id="defer的作用域"><a href="#defer的作用域" class="headerlink" title="defer的作用域"></a>defer的作用域</h4><p><strong>以前很单纯地认为 defer 是在函数退出的时候调用，并没有注意其实是当前 scope 退出的时候调用这个事实，造成了这个错误。在 if，guard，for，try 这些语句中使用 defer 时，应该要特别注意这一点。</strong></p><img src="/Users/mac/Downloads/图像 2019-12-5，下午6.41-1.jpg" alt="图像 2019-12-5，下午6.41-1" style="zoom:150%;" /><h2 id="5、-discardableResult"><a href="#5、-discardableResult" class="headerlink" title="5、@discardableResult"></a>5、@discardableResult</h2><h2 id="6、Result"><a href="#6、Result" class="headerlink" title="6、Result"></a>6、Result<T></h2><p><a href="https://onevcat.com/2018/10/swift-result-error/" target="_blank" rel="noopener">Result&lt;T, E: Error&gt; 和 Result<T></a></p><h2 id="7、Lazy的使用"><a href="#7、Lazy的使用" class="headerlink" title="7、Lazy的使用"></a>7、Lazy的使用</h2><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token keyword">let</span> result <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token keyword">lazy</span><span class="token punctuation">.</span><span class="token builtin">map</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token keyword">in</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"准备处理(i)"</span><span class="token punctuation">)</span><span class="token keyword">return</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"准备访问结果"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> result <span class="token punctuation">{</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"处理后的结果:(i)"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span></code></pre><p>打印结果：</p><blockquote><p>准备访问结果</p></blockquote><p>准备处理1</p><p>处理后的结果:2</p><p>准备处理2</p><p>处理后的结果:4</p><p>准备处理3</p><p>处理后的结果:6</p><p>done</p><h2 id="8、Swift反射机制Mirror"><a href="#8、Swift反射机制Mirror" class="headerlink" title="8、Swift反射机制Mirror"></a>8、Swift反射机制Mirror</h2><blockquote><p>“通过 Mirror 初始化得到的结果中包含的元素的描述都被集合在 children 属性下，如果你有心可以到 Swift 标准库中查找它的定义，它实际上是一个 Child 的集合，而 Child 则是一对键值的多元组：</p></blockquote><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token builtin">Car</span> <span class="token punctuation">{</span><span class="token keyword">let</span> logo<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token keyword">var</span> wheel<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token keyword">let</span> door<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">}</span><span class="token keyword">let</span> baoM <span class="token operator">=</span> <span class="token function">Car</span><span class="token punctuation">(</span>logo<span class="token punctuation">:</span> <span class="token string">"BMW"</span><span class="token punctuation">,</span> wheel<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> door<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">let</span> mirror <span class="token operator">=</span> <span class="token function">Mirror</span><span class="token punctuation">(</span>reflecting<span class="token punctuation">:</span> baoM<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"类型:(String(describing: mirror.displayStyle))"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">///1、通过Mirror的children获取属性信息</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"属性个数:(mirror.children.count)"</span><span class="token punctuation">)</span>mirror<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token builtin">map</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Any</span> <span class="token keyword">in</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"label: (String(describing: child.label)), value: (child.value)"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">///2、通过Refletion的dump(Any)方法获取属性信息</span><span class="token function">dump</span><span class="token punctuation">(</span>baoM<span class="token punctuation">)</span></code></pre><h3 id="示例2-获取property"><a href="#示例2-获取property" class="headerlink" title="示例2 获取property"></a>示例2 获取property</h3><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> homeProperty <span class="token operator">=</span> <span class="token function">Mirror</span><span class="token punctuation">(</span>reflecting<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span>homeProperty<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token builtin">map</span> <span class="token punctuation">{</span><span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">D</span><span class="token punctuation">(</span><span class="token string">"home property:($0)"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="9、iOS初始化核心原则"><a href="#9、iOS初始化核心原则" class="headerlink" title="9、iOS初始化核心原则"></a>9、iOS初始化核心原则</h2><blockquote><p>iOS 的初始化最核心两条的规则：</p></blockquote><blockquote><p>• 必须至少有一个指定初始化器，在指定初始化器里保证所有非可选类型属性都得到正确的初始化（有值）</p></blockquote><blockquote><p>• 便利初始化器必须调用其他初始化器，使得最后肯定会调用指定初始化器</p></blockquote><p>在Swift中千万不要用String的count方法计算文本长度。否则当文本中有emoji时，会计算出错。应当转成NSString再去求length。</p><h2 id="10、"><a href="#10、" class="headerlink" title="10、"></a>10、</h2><h2 id="Swift备忘录001-Array-for-in使用"><a href="#Swift备忘录001-Array-for-in使用" class="headerlink" title="Swift备忘录001 Array for-in使用"></a>Swift备忘录001 Array for-in使用</h2><img src="/Users/mac/Library/Application Support/typora-user-images/image-20191205151814435.png" alt="image-20191205151814435" style="zoom:50%;" /><h4 id="1-for-in获取索引-index"><a href="#1-for-in获取索引-index" class="headerlink" title="1.for in获取索引 index"></a>1.for in获取索引 index</h4><pre class=" language-swift"><code class="language-swift">                <span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Amazon"</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> array <span class="token punctuation">{</span>          <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"company name is :(item)"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">///配合array.enumerated()使用</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token keyword">in</span> array<span class="token punctuation">.</span><span class="token function">enumerated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"index:(index), item:(item)"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span></code></pre><h4 id="2-array-firstIndex-of-获取index"><a href="#2-array-firstIndex-of-获取index" class="headerlink" title="2.array.firstIndex(of:)获取index"></a>2.array.firstIndex(of:)获取index</h4><pre class=" language-swift"><code class="language-swift">                <span class="token comment" spellcheck="true">///配合array.firstIndex(of:)使用</span>        <span class="token keyword">let</span> googleIndex <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">firstIndex</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token string">"Google"</span><span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"googleIndex is : (googleIndex ?? 0)"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">///配合array.firstIndex(where:)使用</span>        <span class="token keyword">if</span> <span class="token keyword">let</span> index <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">firstIndex</span><span class="token punctuation">(</span><span class="token keyword">where</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> $<span class="token number">0</span><span class="token punctuation">.</span><span class="token function">hasPrefix</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"array.firstIndex is (index)"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token keyword">let</span> item <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token keyword">where</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> $<span class="token number">0</span><span class="token punctuation">.</span><span class="token function">hasPrefix</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"array.first is :(item)"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span></code></pre><h2 id="Swift备忘录002-Array-forEach"><a href="#Swift备忘录002-Array-forEach" class="headerlink" title="Swift备忘录002 Array.forEach()"></a>Swift备忘录002 Array.forEach()</h2><h4 id="2-1forEach-和函数式编程结合使用"><a href="#2-1forEach-和函数式编程结合使用" class="headerlink" title="2.1forEach()和函数式编程结合使用"></a>2.1forEach()和函数式编程结合使用</h4><pre class=" language-swift"><code class="language-swift">                <span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">///使用forEach</span>        array<span class="token punctuation">.</span><span class="token builtin">map</span> <span class="token punctuation">{</span> <span class="token function">Int</span><span class="token punctuation">(</span>$<span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">!</span> <span class="token punctuation">}</span><span class="token punctuation">.</span>forEach <span class="token punctuation">{</span> num <span class="token keyword">in</span>            <span class="token function">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//不使用forEach</span>        <span class="token keyword">let</span> <span class="token builtin">map</span> <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token builtin">map</span> <span class="token punctuation">{</span> <span class="token function">Int</span><span class="token punctuation">(</span>$<span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">!</span> <span class="token punctuation">}</span>        <span class="token builtin">map</span><span class="token punctuation">.</span>forEach <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span>$<span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span></code></pre><h4 id="2-2forEach-遍历optional集合会自动过滤nil"><a href="#2-2forEach-遍历optional集合会自动过滤nil" class="headerlink" title="2.2forEach()遍历optional集合会自动过滤nil"></a>2.2forEach()遍历optional集合会自动过滤nil</h4><pre class=" language-swift"><code class="language-swift">                <span class="token keyword">let</span> optionalString<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token constant">nil</span>        <span class="token comment" spellcheck="true">//使用forEach强制解包option，会过滤</span>        optionalString<span class="token operator">?</span><span class="token punctuation">.</span>forEach <span class="token punctuation">{</span> str <span class="token keyword">in</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"str is (str)"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">///使用for-in强制解包optional，会crash</span>        <span class="token keyword">for</span> str <span class="token keyword">in</span> optionalString<span class="token operator">!</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"str is (str)"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span></code></pre><h2 id="Swift备忘录003-Array-index"><a href="#Swift备忘录003-Array-index" class="headerlink" title="Swift备忘录003 Array index"></a>Swift备忘录003 Array index</h2><h4 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Swift函数式编程</title>
      <link href="/2019/12/06/Swift%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>/2019/12/06/Swift%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Functional-Programming-in-Swift"><a href="#Functional-Programming-in-Swift" class="headerlink" title="Functional Programming in Swift"></a>Functional Programming in Swift</h1><p>函数式编程介绍。版本：swift 4.2, iOS 12, Xcode 10</p><p>在本部分中，您将介绍FP中的一些关键概念。许多讨论FP的论文都将不变状态和缺乏副作用视为FP的最重要方面，因此您将从这里开始。</p><a id="more"></a><h2 id="不变性和副作用"><a href="#不变性和副作用" class="headerlink" title="不变性和副作用"></a>不变性和副作用</h2><p>无论您首先学习哪种编程语言，您可能要学习的最初概念之一就是变量代表数据或状态。如果您退一步考虑一下这个想法，变量似乎很奇怪。</p><p>术语“变量”表示随程序运行而变化的数量。从数学角度考虑数量问题，您已将时间作为软件行为的关键参数。通过更改变量，可以创建可变状态。</p><p>为了进行演示，请将以下代码添加到playground：</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> thing <span class="token operator">=</span> <span class="token number">3</span><span class="token comment" spellcheck="true">//some stuff</span>thing <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">func</span> <span class="token function">superHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"I'm batman"</span><span class="token punctuation">)</span>  thing <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"original state = <span class="token interpolation"><span class="token delimiter variable">\(</span>thing<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span><span class="token function">superHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"mutated state = <span class="token interpolation"><span class="token delimiter variable">\(</span>thing<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span></code></pre><p>神圣的神秘变化！为什么现在是5？这种变化称为副作用。函数superHero（）更改了一个甚至没有定义自己的变量。</p><p>单独或在简单系统中，可变状态不一定是问题。将许多对象连接在一起时（例如在大型的面向对象的系统中）会出现问题。可变状态会使人难以理解变量具有什么值以及该值随时间的变化而产生头痛。</p><p>例如，在为多线程系统编写代码时，如果两个或多个线程<strong>同时访问同一变量</strong>，则它们可能会<strong>无序地修改或访问它</strong>。这会导致意外的行为。<strong>这种意外行为包括竞态条件，死锁和许多其他问题。</strong></p><p>试想一下，如果您可以编写状态永远不变的代码。并发系统中发生的所有问题都将消失。像这样工作的系统具有<strong>不变的状态</strong>，这意味着不允许状态在程序过程中进行更改。</p><p>使用不可变数据的主要好处是，使用不可变数据的代码单元没有副作用。代码中的函数不会更改其自身之外的元素，并且在发生函数调用时不会出现怪异的效果。您的程序可以正常运行，因为没有副作用，您可以轻松重现其预期的效果。</p><p>本教程从较高的层次介绍了FP，因此在实际情况下考虑这些概念会很有帮助。在这种情况下，假设您正在为游乐园构建应用程序，并且该游乐园的后端服务器通过REST API提供了行程数据。</p><h2 id="创建Model"><a href="#创建Model" class="headerlink" title="创建Model"></a>创建Model</h2><pre class=" language-swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token builtin">RideCategory</span><span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token punctuation">{</span>  <span class="token keyword">case</span> family  <span class="token keyword">case</span> kids  <span class="token keyword">case</span> thrill  <span class="token keyword">case</span> scary  <span class="token keyword">case</span> relaxing  <span class="token keyword">case</span> water<span class="token punctuation">}</span><span class="token keyword">typealias</span> <span class="token builtin">Minutes</span> <span class="token operator">=</span> <span class="token builtin">Double</span><span class="token keyword">struct</span> <span class="token builtin">Ride</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token builtin">String</span>  <span class="token keyword">let</span> categories<span class="token punctuation">:</span> <span class="token builtin">Set</span><span class="token operator">&lt;</span><span class="token builtin">RideCategory</span><span class="token operator">></span>  <span class="token keyword">let</span> waitTime<span class="token punctuation">:</span> <span class="token builtin">Minutes</span><span class="token punctuation">}</span></code></pre><h2 id="Create-some-data-using-that-model"><a href="#Create-some-data-using-that-model" class="headerlink" title="Create some data using that model"></a>Create some data using that model</h2><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> parkRides <span class="token operator">=</span> <span class="token punctuation">[</span>          <span class="token function">Ride</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"R45"</span><span class="token punctuation">,</span>               categories<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>family<span class="token punctuation">,</span> <span class="token punctuation">.</span>thrill<span class="token punctuation">,</span> <span class="token punctuation">.</span>water<span class="token punctuation">]</span><span class="token punctuation">,</span>               waitTime<span class="token punctuation">:</span> <span class="token number">45.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function">Ride</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"R10"</span><span class="token punctuation">,</span> categories<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>family<span class="token punctuation">]</span><span class="token punctuation">,</span> waitTime<span class="token punctuation">:</span> <span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function">Ride</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"R15"</span><span class="token punctuation">,</span> categories<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>kids<span class="token punctuation">]</span><span class="token punctuation">,</span> waitTime<span class="token punctuation">:</span> <span class="token number">15.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function">Ride</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"R30"</span><span class="token punctuation">,</span> categories<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>scary<span class="token punctuation">]</span><span class="token punctuation">,</span> waitTime<span class="token punctuation">:</span> <span class="token number">30.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function">Ride</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"R60"</span><span class="token punctuation">,</span>               categories<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>family<span class="token punctuation">,</span> <span class="token punctuation">.</span>thrill<span class="token punctuation">]</span><span class="token punctuation">,</span>               waitTime<span class="token punctuation">:</span> <span class="token number">60.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function">Ride</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"R15-2"</span><span class="token punctuation">,</span> categories<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>family<span class="token punctuation">,</span> <span class="token punctuation">.</span>kids<span class="token punctuation">]</span><span class="token punctuation">,</span> waitTime<span class="token punctuation">:</span> <span class="token number">15.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function">Ride</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"R25"</span><span class="token punctuation">,</span> categories<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>family<span class="token punctuation">,</span> <span class="token punctuation">.</span>water<span class="token punctuation">]</span><span class="token punctuation">,</span> waitTime<span class="token punctuation">:</span> <span class="token number">25.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function">Ride</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"R0"</span><span class="token punctuation">,</span>               categories<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>family<span class="token punctuation">,</span> <span class="token punctuation">.</span>relaxing<span class="token punctuation">]</span><span class="token punctuation">,</span>               waitTime<span class="token punctuation">:</span> <span class="token number">0.0</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span></code></pre><h2 id="FP-Filter-Map-Reduce"><a href="#FP-Filter-Map-Reduce" class="headerlink" title="FP: Filter Map Reduce"></a>FP: Filter Map Reduce</h2><p><strong>Most languages that support FP will have the functions filter, map &amp; reduce.</strong></p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><blockquote><p>Map是将输入Collection中的每个Element转换为新Element。</p><p>使用map遍历一个集合，并对集合中的每个元素应用相同的操作。</p><p> map函数返回一个数组，其中包含对每个元素的映射或转换函数的结果。</p></blockquote><h4 id="Map-on-array"><a href="#Map-on-array" class="headerlink" title="Map on array:"></a>Map on array:</h4><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> arrayOfInt <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span></code></pre><p>如果我们要对每个元素乘上10呢？我们以前可能要这样</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> newArr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> value <span class="token keyword">in</span> arrayOfInt <span class="token punctuation">{</span>    newArr<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>value <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span></code></pre><p>现在有map()后我们可以这样：</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> mapArr <span class="token operator">=</span> arrayOfInt<span class="token punctuation">.</span><span class="token builtin">map</span> <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>mapArr<span class="token punctuation">)</span></code></pre><blockquote><p>Working of map: The map function has a single argument which is a closure (a function) that it calls as it loops over the collection. This closure takes the element from the collection as an argument and returns a result. The map function returns these results in an array.</p></blockquote><h4 id="Map-on-Dictionary"><a href="#Map-on-Dictionary" class="headerlink" title="Map on Dictionary"></a>Map on Dictionary</h4><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> book <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">]</span><span class="token keyword">let</span> mapedBook <span class="token operator">=</span> book<span class="token punctuation">.</span><span class="token builtin">map</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">in</span>    key<span class="token punctuation">.</span>capitalized<span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>mapedBook<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//["C", "B", "A"]</span></code></pre><h4 id="Map-on-Set"><a href="#Map-on-Set" class="headerlink" title="Map on Set"></a>Map on Set</h4><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> lengthInmeter<span class="token punctuation">:</span> <span class="token builtin">Set</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">let</span> km  <span class="token operator">=</span> lengthInmeter<span class="token punctuation">.</span><span class="token builtin">map</span> <span class="token punctuation">{</span> meter <span class="token keyword">in</span> meter <span class="token operator">*</span> <span class="token number">1000</span> <span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>km<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1000, 5000, 3000]</span></code></pre><h4 id="Map同时获取array-Index"><a href="#Map同时获取array-Index" class="headerlink" title="Map同时获取array.Index??"></a>Map同时获取array.Index??</h4><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">let</span> newNums <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">enumerated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">map</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token keyword">in</span>    <span class="token keyword">return</span> num <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"newNums:<span class="token interpolation"><span class="token delimiter variable">\(</span>newNums<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span></code></pre><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p>Filter函数的作用是过滤集合，返回符合条件的集合。</p><h4 id="Filter-on-Array"><a href="#Filter-on-Array" class="headerlink" title="Filter on Array"></a>Filter on Array</h4><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> filterArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">let</span> newFilterArray <span class="token operator">=</span> filterArray<span class="token punctuation">.</span><span class="token builtin">filter</span> <span class="token punctuation">{</span> num <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span> <span class="token keyword">in</span>    num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>newFilterArray<span class="token punctuation">)</span></code></pre><h4 id="Filter-on-Dictionary"><a href="#Filter-on-Dictionary" class="headerlink" title="Filter on Dictionary"></a>Filter on Dictionary</h4><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> book <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">]</span><span class="token keyword">let</span> bookFilter <span class="token operator">=</span> book<span class="token punctuation">.</span><span class="token builtin">filter</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">in</span>    value <span class="token operator">></span> <span class="token number">80</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>bookFilter<span class="token punctuation">)</span></code></pre><p><strong>简化</strong></p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> book <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">]</span><span class="token keyword">let</span> bookFilter <span class="token operator">=</span> book<span class="token punctuation">.</span><span class="token builtin">filter</span> <span class="token punctuation">{</span>    $<span class="token number">1</span> <span class="token operator">></span> <span class="token number">80</span><span class="token punctuation">}</span></code></pre><blockquote><p>$0是key</p><p>$1是value</p></blockquote><h4 id="Filter-on-Set"><a href="#Filter-on-Set" class="headerlink" title="Filter on Set"></a>Filter on Set</h4><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> setNums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4.9</span><span class="token punctuation">,</span><span class="token number">5.5</span><span class="token punctuation">,</span><span class="token number">8.6</span><span class="token punctuation">]</span><span class="token keyword">let</span> newSet <span class="token operator">=</span> setNums<span class="token punctuation">.</span><span class="token builtin">filter</span> <span class="token punctuation">{</span>    $<span class="token number">0</span> <span class="token operator">></span> <span class="token number">5.0</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>newSet<span class="token punctuation">)</span></code></pre><p><strong>重要：返回类型是数组</strong></p><h3 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h3><blockquote><p>Use <code>reduce</code> to combine all items in a collection to create a single new value.</p></blockquote><blockquote><p>使用<em>reduce</em>可以合并集合中的所有元素来创建一个新的value</p></blockquote><p>Apple文档声明reduce()</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token builtin">reduce</span><span class="token operator">&lt;</span><span class="token builtin">Result</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">_</span> initialResult<span class="token punctuation">:</span> <span class="token builtin">Result</span><span class="token punctuation">,</span> <span class="token number">_</span> nextPartialResult<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">Result</span><span class="token punctuation">,</span> <span class="token builtin">Element</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Result</span><span class="token punctuation">)</span> <span class="token keyword">rethrows</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Result</span></code></pre><p><strong>reduce</strong>函数有两个参数：</p><ul><li>第一个参数 <strong>initial value</strong>用来存储初始值或者结果（每次迭代器的结果）</li><li>第二个是带有两个参数的闭包，Result是初始值或迭代器的结果，Element是集合中的下一个元素。</li></ul><h4 id="Reduce-on-Array"><a href="#Reduce-on-Array" class="headerlink" title="Reduce on Array"></a>Reduce on Array</h4><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">let</span> sum <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span>    x <span class="token operator">+</span> y<span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span></code></pre><p>简化版本：使用$0代表result</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> reducedSum <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">+</span> $<span class="token number">1</span> <span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>reducedSum<span class="token punctuation">)</span><span class="token comment" spellcheck="true">///等价</span><span class="token keyword">let</span> reducedSum <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>reducedSum<span class="token punctuation">)</span></code></pre><p>乘法</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> produceNum <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span>    x <span class="token operator">*</span> y<span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>produceNum<span class="token punctuation">)</span><span class="token comment" spellcheck="true">///等价</span><span class="token keyword">let</span> produceNum <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>produceNum<span class="token punctuation">)</span></code></pre><h4 id="Reduce-连接字符串"><a href="#Reduce-连接字符串" class="headerlink" title="Reduce + 连接字符串"></a>Reduce + 连接字符串</h4><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> charactors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"def"</span><span class="token punctuation">,</span><span class="token string">"hijk"</span><span class="token punctuation">]</span><span class="token keyword">let</span> newCharactor <span class="token operator">=</span> charactors<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>newCharactor<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// abcdefhijk</span></code></pre><h4 id="Reduce-on-Dictionary"><a href="#Reduce-on-Dictionary" class="headerlink" title="Reduce on Dictionary"></a>Reduce on Dictionary</h4><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> dict <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// Reduce on value</span><span class="token keyword">let</span> reducedNum <span class="token operator">=</span> dict<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> result<span class="token punctuation">,</span> dic <span class="token keyword">in</span>    <span class="token keyword">return</span> result <span class="token operator">+</span> dic<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"reduc on value is <span class="token interpolation"><span class="token delimiter variable">\(</span>reducedNum<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// reduc on value is 125</span><span class="token comment" spellcheck="true">// Reduce on key</span><span class="token keyword">let</span> reducedName <span class="token operator">=</span> dict<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token string">"Charactor are "</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>result<span class="token punctuation">,</span> dic<span class="token punctuation">)</span> <span class="token keyword">in</span>    <span class="token keyword">return</span> result <span class="token operator">+</span> dic<span class="token punctuation">.</span>key <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"reduce on key is &lt;<span class="token interpolation"><span class="token delimiter variable">\(</span>reducedName<span class="token delimiter variable">)</span></span>>"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//reduce on key is &lt;Charactor are A B ></span></code></pre><p>简化</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> reducedNameOnDic <span class="token operator">=</span> dict<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token string">"Charater are "</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token operator">+</span> $<span class="token number">1</span><span class="token punctuation">.</span>key <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">}</span></code></pre><h4 id="Reduce-on-Set"><a href="#Reduce-on-Set" class="headerlink" title="Reduce on Set"></a>Reduce on Set</h4><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">// Reduce on Set</span><span class="token keyword">let</span> lengthMeters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3.4</span><span class="token punctuation">,</span><span class="token number">1.6</span><span class="token punctuation">]</span><span class="token keyword">let</span> reducedMeters <span class="token operator">=</span> lengthMeters<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    $<span class="token number">0</span> <span class="token operator">+</span> $<span class="token number">1</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"reduced meters :<span class="token interpolation"><span class="token delimiter variable">\(</span>reducedMeters<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 5.0</span></code></pre><h2 id="FlatMap"><a href="#FlatMap" class="headerlink" title="FlatMap"></a>FlatMap</h2><p>Flatmap is used to flatten a collection of collections . But before flattening the collection, we can apply map to each elements.</p><blockquote><p><strong>Apple docs says</strong>: Returns an array containing the concatenated results of calling the given transformation with each element of this sequence.</p></blockquote><p>Flatmap用于展平集合的集合。 但是在展平集合之前，我们可以将map应用于每个集合元素。</p><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> charaters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"def"</span><span class="token punctuation">,</span><span class="token string">"ghi"</span><span class="token punctuation">]</span><span class="token keyword">let</span> newCharaters <span class="token operator">=</span> charaters<span class="token punctuation">.</span>flatMap <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>newCharaters<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//["a", "b", "c", "d", "e", "f", "g", "h", "i"]</span><span class="token keyword">let</span> codes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"def"</span><span class="token punctuation">,</span><span class="token string">"ghi"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"jkl"</span><span class="token punctuation">,</span><span class="token string">"mno"</span><span class="token punctuation">,</span><span class="token string">"pqr"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"stu"</span><span class="token punctuation">,</span><span class="token string">"vwx"</span><span class="token punctuation">,</span><span class="token string">"yz"</span><span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token keyword">let</span> newCodes <span class="token operator">=</span> codes<span class="token punctuation">.</span>flatMap <span class="token punctuation">{</span>$<span class="token number">0</span><span class="token punctuation">.</span><span class="token builtin">map</span> <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>newCodes<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ["abc", "def", "ghi", "jkl", "mno", "pqr", "stu", "vwx", "yz"]</span></code></pre><h4 id="nil"><a href="#nil" class="headerlink" title="nil"></a>nil</h4><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> nilArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token constant">nil</span><span class="token punctuation">]</span><span class="token function">print</span><span class="token punctuation">(</span>nilArray<span class="token punctuation">.</span>flatMap <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [2,3]</span><span class="token comment" spellcheck="true">// warning: 'flatMap' is deprecated: Please use compactMap(_:) for the case where closure returns an optional value</span><span class="token function">print</span><span class="token punctuation">(</span>nilArray<span class="token punctuation">.</span>compactMap <span class="token punctuation">{</span> $<span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [2,3]</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
